var documenterSearchIndex = {"docs":
[{"location":"lecture_01/outline/#Course-outline","page":"Outline","title":"Course outline","text":"","category":"section"},{"location":"howto/#How-to-use-admonitions","page":"How To ...","title":"How to use admonitions","text":"","category":"section"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"Documenter.jl provides five special styles for admonitions and one style for custom admonition types","category":"page"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"Admonition type html class\ninfo \"admonition is-info\"\ncompat \"admonition is-compat\"\ndange \"admonition is-danger\"\nwarning \"admonition is-warning\"\ntip \"admonition is-success\"\ncustom \"admonition is-category-custom\"","category":"page"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"All these admonitions can be used in the following way","category":"page"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"!!! tip \"Header\"\n    Text ...\n    ```@repl\n    a = 1\n    b = 2\n    a + b\n    ```","category":"page"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"The resulting admonition looks as follows","category":"page"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"tip: Header\nText ...a = 1\nb = 2\na + b","category":"page"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"The problem is, that the evaluation of the block of code inside admonitions is not currently supported. To allow code evaluation inside admonitions, we can use two raw HTML blocks to wrap the admonition body. The syntax of the code between the HTML block is the same as everywhere else in the document.","category":"page"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"```@raw html\n<div class=\"admonition is-success\">\n<header class=\"admonition-header\">Header</header>\n<div class=\"admonition-body\">\n```\n\nText ...\n\n```@repl\na = 1\nb = 2\na + b\n```\n\n```@raw html\n</div></div>\n```","category":"page"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"The resulting admonition then looks as follows","category":"page"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"<div class=\"admonition is-success\">\n<header class=\"admonition-header\">Header</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"Text ...","category":"page"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"a = 1\nb = 2\na + b","category":"page"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"</div></div>","category":"page"},{"location":"howto/#Additional-admonition-types","page":"How To ...","title":"Additional admonition types","text":"","category":"section"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"The css style downloaded in the make.jl provides three additional admonition types","category":"page"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"Admonition type html class\ntheorem \"admonition is-category-theorem\"\nexercise \"admonition is-category-exercise\"\nhomework \"admonition is-category-homework\"","category":"page"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"Currently, the first two types use the style of the default admonitions types. However, it may change in the future.","category":"page"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"theorem: Theorem\nText...","category":"page"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"exercise: Exercise\nText...","category":"page"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"homework: Homework\nText...","category":"page"},{"location":"howto/#Exercise-with-solution","page":"How To ...","title":"Exercise with solution","text":"","category":"section"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"The used css style also provides style for collapsible admonition that can be used for example to define exercise with the hidden solution. To use this feature, we have to use raw HTML blocks.","category":"page"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"```@raw html\n<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Header</header>\n<div class=\"admonition-body\">\n```\n\nSome text that describes the exercise\n\n```@raw html\n</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>\n```\n\nSolution\n\n```@raw html\n</p></details>\n```","category":"page"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"The result is following","category":"page"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Header</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"Some text that describes the exercise","category":"page"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"Solution","category":"page"},{"location":"howto/","page":"How To ...","title":"How To ...","text":"</p></details>","category":"page"},{"location":"lecture_01/hw/#Homework-1","page":"HOMEWORK","title":"Homework 1","text":"","category":"section"},{"location":"lecture_01/hw/#Assignment-1-(2-points)","page":"HOMEWORK","title":"Assignment 1 (2 points)","text":"","category":"section"},{"location":"lecture_01/hw/#Assignment-2-(4-points)","page":"HOMEWORK","title":"Assignment 2 (4 points)","text":"","category":"section"},{"location":"lecture_01/hw/","page":"HOMEWORK","title":"HOMEWORK","text":"...","category":"page"},{"location":"lecture_01/hw/#How-to-submit?","page":"HOMEWORK","title":"How to submit?","text":"","category":"section"},{"location":"lecture_01/hw/","page":"HOMEWORK","title":"HOMEWORK","text":"The guide is located here","category":"page"},{"location":"lecture_02/lab/#Lab-02:-Predator-Prey-Agents","page":"Lab","title":"Lab 02: Predator-Prey Agents","text":"","category":"section"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"To practice Julia's multiple dispatch you will implement your own, simplified, agent-based simulation of a predator-prey model.  The model will contain wolves, sheep, and - to feed your sheep - some grass. Your final result could look something like the plot below.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"(Image: img)","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"As you can see, in this model, the wolves unfortunately died out :(.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"To get started we need a type hierarchy. In order to be able to extend this model in later lectures we will structure them like this","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"abstract type AbstractAgent end\nabstract type AbstractAnimal <: AbstractAgent end\nabstract type AbstractPlant <: AbstractAgent end","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Our Grass will be growing over time and it will need a certain amount of time steps to fully grow such that it can be eaten. This has to be reflected in the fields of our grass struct:","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"mutable struct Grass <: AbstractPlant\n    fully_grown::Bool\n    regrowth_time::Int\n    countdown::Int\nend\nGrass(t) = Grass(true,t,t)","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Most of the logic of our agent simulation will be located in the function agent_step!(::AbstractAgent, ::World). Grass cannot grow in a void, hence we need the World in the agent_step!. In our case this world will be simply a container for all our agents.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Header</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Define a World struct that will hold all your AbstractAgents in a Vector. Try to avoid fields with abstract types. Julia's compiler will not be able to infer the type for those (which leads to type instabilities and performance losses).","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"TODO: linking to the lecture would be nice here.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"After that, implement the agent_step! method for Grass. It should decrease the countdown until the Grass is fully grown.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"struct World{V<:Vector{<:AbstractAgent}}\n    agents::V\nend\n\nfunction agent_step!(a::Grass, w::World)\n    if !a.fully_grown\n        if a.countdown <= 0\n            a.fully_grown = true\n            a.countdown = a.regrowth_time\n        else\n            a.countdown -= 1\n        end\n    end\nend","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Now you should be able to create a world and grow some grass!","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"grass = Grass(false,2,2)\nworld = World([grass])\n\nagent_step!(grass, world)\nagent_step!(grass, world)","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"And so on and so forth. Probably first create agent_step! just for Sheep then generalize to AbstractAnimal. Not sure if this is the best example. The only parts that make use of dispatch are eats! and agent_step!...","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"mutable struct Sheep{T<:Real} <: AbstractAnimal\n    energy::T\n    Δenergy::T\n    reproduction_prob::T\n    food_prob::T\nend\nSheep() = Sheep(10.0, 5.0, 0.5)\n\nmutable struct Wolf{T<:Real} <: AbstractAnimal\n    energy::T\n    Δenergy::T\n    reproduction_prob::T\n    food_prob::T\nend\nWolf() = Wolf(10.0, 2.0, 0.01)\n\nfunction agent_step!(a::Grass, w::World)\n    if !a.fully_grown\n        if a.countdown <= 0\n            a.fully_grown = true\n            a.countdown = a.regrowth_time\n        else\n            a.countdown -= 1\n        end\n    end\n    return a\nend\n\nfunction agent_step!(a::A, w::World) where A<:AbstractAnimal\n    a.energy -= 1\n    dinner = find_food(a,w)\n    eat!(a, dinner, w)\n    if a.energy < 0\n        kill_agent!(a,w)\n        return\n    end\n    if rand() <= a.reproduction_prob\n        reproduce!(a,w)\n    end\n    return a\nend\n\nfunction find_food(a::T, w::World) where T<:AbstractAnimal\n    if rand() <= a.food_prob\n        as = filter(x->isa(x,eats(T)), w.agents)\n        isempty(as) ? nothing : sample(as)\n    end\nend\n\neats(::Type{<:Sheep}) = Grass\neats(::Type{<:Wolf}) = Sheep\n\nfunction eat!(wolf::Wolf, sheep::Sheep, w::World)\n    kill_agent!(sheep,w)\n    wolf.energy += wolf.Δenergy\nend\nfunction eat!(sheep::Sheep, grass::Grass, w::World)\n    if grass.fully_grown\n        grass.fully_grown = false\n        sheep.energy += sheep.Δenergy\n    end\nend\neat!(a,b,w) = nothing\n\nfunction reproduce!(a::AbstractAnimal, w::World)\n    a.energy /= 2\n    push!(w.agents, deepcopy(a))\nend\n\nkill_agent!(a::AbstractAnimal, w::World) = deleteat!(w.agents, findall(x->x==a, w.agents))","category":"page"},{"location":"lecture_01/motivation/#Motivation","page":"Motivation","title":"Motivation","text":"","category":"section"},{"location":"lecture_01/motivation/#Introduction-to-Scientific-Programming","page":"Motivation","title":"Introduction to Scientific Programming","text":"","category":"section"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"https://en.wikipedia.org/wiki/Scientificprogramminglanguage","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Loose def: a scientific programming language is one that is designed and optimized for the use of mathematical formula and matrices.[2] ","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Scientific programming languages in the stronger sense include ALGOL, APL, Fortran, J, Julia, Maple, MATLAB and R.","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Nowadays, the concept of matrices and linear algebra is extended to a concept of efficient data storage and efficient operations over them.","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Key requirements:","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"fast execution of the code (complex algorithms)\nease of code reuse / restructuring \nreproducibility of the results","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Contrast to general-purpose language:","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"less concern with public/private separation\nless concern with ABI ","category":"page"},{"location":"lecture_01/motivation/#The-two-language-problem","page":"Motivation","title":"The two language problem","text":"","category":"section"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Writing very efficient code requires to go down to hardware specifics -> low-level language. Efficient code restructuring is possible when the language allows easy to handle  abstraction -> high-level language.","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Classical solution = 2 languages (Matlab/C, Python/C,C++, R/C)","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Scientific_Programming_in_Julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"<img class=\"docs-light-only\"; src=\"https://raw.githubusercontent.com/JuliaTeachingCTU/JuliaCTUGraphics/master/logo/Scientific-Programming-in-Julia-logo.svg\"; alt=\"Julia for Machine Learning logo\"; max-width: 100%; height: auto>\n<img class=\"docs-dark-only\"; src=\"https://raw.githubusercontent.com/JuliaTeachingCTU/JuliaCTUGraphics/master/logo/Scientific-Programming-in-Julia-logo-dark.svg\"; alt=\"Julia for Machine Learning logo\"; max-width: 100%; height: auto;>","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Documentation for the course Scientific Programming in Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Scientific_Programming_in_Julia]","category":"page"},{"location":"lecture_01/labs/#Laboratory-session-1","page":"LABS","title":"Laboratory session 1","text":"","category":"section"},{"location":"lecture_01/labs/#Testing-Julia-instalation","page":"LABS","title":"Testing Julia instalation","text":"","category":"section"},{"location":"lecture_01/labs/","page":"LABS","title":"LABS","text":"Make sure that everyone can participate with in the labs","category":"page"},{"location":"lecture_01/labs/#Variables-and-data-structures","page":"LABS","title":"Variables & data structures","text":"","category":"section"},{"location":"lecture_01/labs/","page":"LABS","title":"LABS","text":"Defining both simple and not so simple variables","category":"page"},{"location":"lecture_01/labs/#Functions-and-Methods","page":"LABS","title":"Functions & Methods","text":"","category":"section"},{"location":"lecture_01/labs/#Control-Flow","page":"LABS","title":"Control Flow","text":"","category":"section"},{"location":"lecture_01/labs/","page":"LABS","title":"LABS","text":"Conditional evaluation, loops and iteration, scoping, exceptions","category":"page"},{"location":"lecture_01/labs/#Useful-resources","page":"LABS","title":"Useful resources","text":"","category":"section"},{"location":"lecture_01/labs/","page":"LABS","title":"LABS","text":"MATLAB x Python x Julia","category":"page"},{"location":"how_to_submit_hw/#homeworks","page":"How to submit homeworks","title":"Homework submission","text":"","category":"section"},{"location":"how_to_submit_hw/","page":"How to submit homeworks","title":"How to submit homeworks","text":"This document should describe the homework submission procedure.","category":"page"}]
}
