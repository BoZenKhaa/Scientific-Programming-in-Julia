var documenterSearchIndex = {"docs":
[{"location":"lecture_04/lab/#Lab-4:-Packages,-Tests,-Continuous-Integration","page":"Lab","title":"Lab 4: Packages, Tests, Continuous Integration","text":"","category":"section"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"In this lab you will practice common development workflows in Julia. At the end of the lab you will have","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"Your own package called Ecosystem.jl which you can conveniently install in any Julia REPL\nTests for the major functionality of your package\nSet up continuous integration (CI) via Github Actions to automatically execute your tests","category":"page"},{"location":"lecture_04/lab/#Separating-core-and-extended-functionality","page":"Lab","title":"Separating core and extended functionality","text":"","category":"section"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"To practice working with multiple packages that build on top of each other we first separate the core functionality of our ecosystem into a package called EcosystemCore.jl. This core package already exists and defines the interface to Animal and Plant. It also contains the three basic species types Grass, Sheep, and Wolf, as well as the most important functions: eat!, agent_step!, find_food and reproduce!, model_step!.","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"Your task is to create your own package Ecosystem.jl which will contain the utitlity functions simulate!, agent_count, every_nth that we created, as well as the new species Mushroom.","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"Familiarize yourself with EcosystemCore.jl.\nCreate a new package by starting a julia REPL, typing ] to enter the Pkg REPL and writing generate Ecosystem. This will create a new package called Ecosystem with a Project.toml and one file src/Ecosystem.jl\nNavigate into the newly generated package folder via ;cd Ecosystem and activate the environment via ]activate ..\nAdd EcosystemCore.jl as a dependency by running\n]add https://github.com/JuliaTeachingCTU/EcosystemCore.jl.git","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"You should now have only a single dependency in your new package:","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"(Ecosystem) pkg> st\n     Project Ecosystem v0.1.0\n      Status `~/Ecosystem/Project.toml`\n  [3e0d8730] EcosystemCore v0.1.0 `https://github.com/JuliaTeachingCTU/EcosystemCore.jl.git#main`","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"You can try if using EcosystemCore correctly loads the core package and use its exported functions and types as in the labs before.","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"using EcosystemCore\ngrass = Grass(1,5);\nsheep = Sheep(2,10.0,5.0,0.1,0.1);\nworld = World([grass, sheep])\neat!(sheep,grass,world);\nworld","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"Next, let's add the utility functions simulate!, agent_count, and every_nth, as well as the new species Mushroom along with its necessary method overloads to the Ecosystem module.\nWhile you are adding functionality to your package you can make great use of Revise.jl.  Loading Revise.jl before your Ecosystem.jl will automatically recompile (and invalidate old methods!) while you develop.  You can install it in your global environment and and create a USERDIR/.config/startup.jl which always loads Revise. It can look like this:\n# try/catch block to make sure you can start julia if Revise should not be installed\ntry\n    using Revise\ncatch e\n    @warn(e.msg)\nend\nNote that you either have to import a method to overload it or define your functions like Ecosystem.function_name e.g.:\nEcosystemCore.eats(::Animal{Sheep}, ::Plant{Mushroom}) = true\nwhich is often the preferred way of doing it.\nExport all types and functions that should be accessible from outside your package.  This should include at least agent_count, simulate!, every_nth, all species types, and the World.","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"Now you can run one of your simulation scripts like below","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"# only load the Ecosystem package which depends on EcosystemCore\nusing Ecosystem\n\nn_grass       = 500\nregrowth_time = 17.0\n# ...\n\nworld = World([...])\n\n# ...\nsimulate!(world,100)","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"You can put your simulation scripts in the same package in a new folder called scripts or examples if you like. It often makes sense to have a separate Project.toml in this folder, because it forces you think about which functions you need to export and which additional packages are necessary e.g. for visualization of your results.","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_04/lab/#Testing-the-Ecosystem","page":"Lab","title":"Testing the Ecosystem","text":"","category":"section"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"Every well maintained package should contain tests. In Julia the tests have to be located in the test folder in the package root. The test folder has to contain at least one file called runtests.jl which can include more files. A minimal package structure can look like below.","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":".\n├── Project.toml\n├── README.md\n├── scripts\n│   └── run.jl\n├── src\n│   └── Ecosystem.jl\n└── test\n    └── runtests.jl","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"To start testing we need Julia's Test package which you can install via ]add Test. We do not want Test in the dependencies of Ecosystem.jl, which we can achieve by creating new [extras] and [target] sections in the Project.toml:","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"name = \"Ecosystem\"\nuuid = \"some-uuid\"\nauthors = [\"Your Name <yourname@email.com>\"]\nversion = \"0.1.0\"\n\n[deps]\nEcosystemCore = \"3e0d8730-8ea0-4ee2-afe6-c85384c618a2\"\n\n[extras]\nTest = \"8dfed614-e22c-5e08-85e1-65c5234f0b40\"\n\n[targets]\ntest = [\"Test\"]","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"Alternatively, you can create another Project.toml in your test folder. With Test.jl as an extra dependency you can start writing your test/runtests.jl file.","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"using Scientific_Programming_in_Julia # hide\nusing Test\n# using Ecosystem  # in your code this line as to be uncommented ;)\n\n@testset \"agent_count\" begin\n    @test agent_count(Mushroom(1,1,1)) == 1\nend\nnothing # hide","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"Create a @testset and fill it with tests for agent_count that cover all of its four methods.","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"Hint: You can use isapprox or ≈ to test equaity of real numbers.","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"@testset \"agent_count\" begin\n    grass1 = Grass(1,1,5)\n    grass2 = Grass(2,2,5)\n    sheep  = Sheep(3,1,1,1,1)\n    wolf   = Wolf(5,2,2,2,2)\n    world  = World([sheep,grass1,grass2,wolf])\n\n    @test agent_count(grass1) ≈ 0.2\n    @test agent_count(sheep) == 1\n    @test agent_count([grass2,grass1]) ≈ 0.6\n    res = agent_count(world)\n    tst = Dict(:Sheep=>1,:Wolf=>1,:Grass=>0.6)\n    for (k,_) in res\n        @test res[k] ≈ tst[k]\n    end\nend\nnothing # hide","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_04/lab/#Github-and-Continuous-Integration","page":"Lab","title":"Github & Continuous Integration","text":"","category":"section"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"Another good standard is to use a versioning tool like git. It will save you tons of headaches and you will never have to worry again that you could loose some of your work.","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"Create a new repository called Ecosystem.jl on Github (public or private, however you want). A good repo should also contain a README.md file which briefly describes what it is about.","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"If you have never used git before you can check out the tutorial of our Bachelor Course on Julia.","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"You can turn a folder into a git repo by running git init. After you created a new repo on Github you can connect your local repo to the empty Github repo like below","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"# turn folder into git repo\ngit init\n# point local repo to empty github repo\ngit remote add origin https://github.com/username/Ecosystem.jl.git\n# rename master branch->main\ngit branch -M main\n# create your initial commit\ngit add .\ngit commit -m \"init commit\"\n# push your contents\ngit push -u origin main","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"As a last step, we will add a Github Action to your repository, which will run your test on every commit to the main branch (or for every pull request).","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"Create a file (in a hidden subdirectory) .github/workflows/RunTests.yml with the contents below","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"name: Run tests\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        julia-version: ['1.6']\n        julia-arch: [x64]\n        os: [ubuntu-latest]\n\n    steps:\n      - uses: actions/checkout@v2\n      - uses: julia-actions/setup-julia@v1\n        with:\n          version: ${{ matrix.julia-version }}\n      - uses: julia-actions/julia-buildpkg@v1\n      - uses: julia-actions/julia-runtest@v1","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"Pushing this file to your repository should result in Github automatically running your julia tests.","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"You can add a status badge to your README by copying the status badge string from the Github Actions tab.","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"</div></div>","category":"page"},{"location":"lecture_04/lab/#Code-coverage","page":"Lab","title":"Code coverage","text":"","category":"section"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"If you still have time you can add code coverage reports to your repository. They will show you which parts of your repo have been covered by a test and which have not. To get coverage reports you have to give codecov.io access to your repository and add a few steps to your RunTests.yml that upload the coverage report during the Github Action.","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise (optional)</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"Log into codecov.io with your Github user name and give codecov access to your new repository.\nAdd the codecov steps below to your RunTests.yml.  Note that code coverage does not mean that your code is properly tested!  It is simply measuring which lines have been hit during the execution of your tests, which does not mean that your code (or your tests) are correct.\nAdd the codecov status badge to your README.","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"steps:\n  - uses: julia-actions/julia-processcoverage@v1\n  - uses: codecov/codecov-action@v2\n    with:\n      file: lcov.info","category":"page"},{"location":"lecture_04/lab/","page":"Lab","title":"Lab","text":"</div></div>","category":"page"},{"location":"lecture_03/lab/#lab03","page":"Lab","title":"Lab 3: Predator-Prey Agents","text":"","category":"section"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"In this lab we will look at two different ways of extending our agent simulation to take into account that animals can have two different sexes: female and male.","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"In the first part of the lab you will re-use the code from lab 2 and create a new type of sheep (⚥Sheep) which has an additional field sex. In the second part you will redesign the type hierarchy from scratch using parametric types to make this agent system much more flexible and julian.","category":"page"},{"location":"lecture_03/lab/#Part-I:-Female-and-Male-Sheep","page":"Lab","title":"Part I: Female & Male Sheep","text":"","category":"section"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"The code from lab 2 that you will need in the first part of this lab can be found here.","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"The goal of the first part of the lab is to demonstrate the forwarding method (which is close to how things are done in OOP) by implementing a sheep that can have two different sexes and can only reproduce with another sheep of opposite sex.","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"This new type of sheep needs an additonal field sex::Symbol which can be either :male or :female. In OOP we would simply inherit from Sheep and create a ⚥Sheep with an additional field. In Julia there is no inheritance - only subtyping of abstract types. As you cannot inherit from a concrete type in Julia, we will have to create a wrapper type and forward all necessary methods. This is typically a sign of unfortunate type tree design and should be avoided, but if you want to extend a code base by an unforeseen type this forwarding of methods is a nice work-around.  Our ⚥Sheep type will simply contain a classic sheep and a sex field","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"include(\"../lecture_02/Lab02Ecosystem.jl\") # hide\nstruct ⚥Sheep <: Animal\n    sheep::Sheep\n    sex::Symbol\nend\n⚥Sheep(id,E,ΔE,pr,pf,sex) = ⚥Sheep(Sheep(id,E,ΔE,pr,pf),sex)\nnothing # hide","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"⚥Sheep(1,1.0,1.0,1.0,1.0,:female)","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"In our case, the methods that have to be forwarded are the accessors, as well as eats and eat!.  The custom reproduction behaviour will of course be taken care of by a reproduce! function that does not just forward but also contains specialized behaviour for the ⚥Sheep.","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"Forward the accessors energy, energy!, reprprob, and foodprob, as well as our core methods eats and eat! to Sheep.","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"id(g::⚥Sheep) = id(g.sheep)\nenergy(g::⚥Sheep) = energy(g.sheep)\nenergy!(g::⚥Sheep, ΔE) = energy!(g.sheep, ΔE)\nreprprob(g::⚥Sheep) = reprprob(g.sheep)\nfoodprob(g::⚥Sheep) = foodprob(g.sheep)\n\neats(::⚥Sheep, ::Grass) = true\neat!(s::⚥Sheep, g::Plant, world::World) = eat!(s.sheep, g, world)\neat!(w::Wolf, s::⚥Sheep, world::World) = eat!(w, s.sheep, world)\nnothing # hide","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"For the ones that don't like accessors: You can also overload the Base methods getproperty and setproperty! to make something like ⚥sheep.energy += 1 work:","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"function Base.getproperty(s::⚥Sheep, name::Symbol)\n    if name in fieldnames(Sheep)\n        getfield(s.sheep,name)\n    else\n        getfield(s,name)\n    end\nend\n\nfunction Base.setproperty!(s::⚥Sheep, name::Symbol, x)\n    if name in fieldnames(Sheep)\n        setfield!(s.sheep,name,x)\n    else\n        setfield!(s,name,x)\n    end\nend","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"Implement the reproduce! method for the ⚥Sheep.  Note that you first have to find another sheep of opposite sex in your World, and only if you can find one you can reproduce.","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"mates(a::Plant, ::⚥Sheep) = false\nmates(a::Animal, ::⚥Sheep) = false\nmates(g1::⚥Sheep, g2::⚥Sheep) = g1.sex != g2.sex\nfunction find_mate(g::⚥Sheep, w::World)\n    ms = filter(a->mates(a,g), w.agents |> values |> collect)\n    isempty(ms) ? nothing : sample(ms)\nend\n\nfunction reproduce!(s::⚥Sheep, w::World)\n    m = find_mate(s,w)\n    if !isnothing(m)\n        energy!(s, energy(s)/2)\n        vals = [getproperty(s.sheep,n) for n in fieldnames(Sheep) if n!=:id]\n        new_id = w.max_id + 1\n        ŝ = ⚥Sheep(new_id, vals..., rand(Bool) ? :female : :male)\n        w.agents[id(ŝ)] = ŝ\n        w.max_id = new_id\n    end\nend\nnothing # hide","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"f = ⚥Sheep(1,3.0,1.0,1.0,1.0,:female)\nm = ⚥Sheep(2,4.0,1.0,1.0,1.0,:male)\nw = World([f,m])\n\nfor _ in 1:4\n    @show w\n    world_step!(w)\nend","category":"page"},{"location":"lecture_03/lab/#Part-II:-A-new,-parametric-type-hierarchy","page":"Lab","title":"Part II: A new, parametric type hierarchy","text":"","category":"section"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"The extension of Sheep to ⚥Sheep is a very object-oriented approach. With a little bit of rethinking, we can build a much more elegant solution that makes use of Julia's powerful parametric types.","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"First, let us note that there are two fundamentally different types of agents in our world: animals and plants. All species such as grass, sheep, wolves, etc.  can be categorized as one of those two. Second, animals have two different, immutable sexes.  Thus an animal is specified by two things: its species and its sex.  With this observation let's try to redesign the type hiearchy using parametric types to reflect this.","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"The goal will be an Animal type with two parametric types: A Species type and a Sex type. The type of a female wolf would then be Animal{Wolf,Female}. The new type hiearchy can then look like this:","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"abstract type Species end\nabstract type PlantSpecies <: Species end\nabstract type Grass <: PlantSpecies end\n\nabstract type AnimalSpecies <: Species end\nabstract type Sheep <: AnimalSpecies end\nabstract type Wolf <: AnimalSpecies end\n\nabstract type Sex end\nabstract type Male <: Sex end\nabstract type Female <: Sex end\n\nabstract type Agent{S<:Species} end","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"Now we can create a concrete type Animal with the two parametric types and the fields that we already know from lab 2.","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"mutable struct Animal{A<:AnimalSpecies,S<:Sex} <: Agent{A}\n    id::Int\n    energy::Float64\n    Δenergy::Float64\n    reprprob::Float64\n    foodprob::Float64\nend\n\n# the accessors from lab 2 stay the same\nid(a::Agent) = a.id\nenergy(a::Animal) = a.energy\nΔenergy(a::Animal) = a.Δenergy\nreprprob(a::Animal) = a.reprprob\nfoodprob(a::Animal) = a.foodprob\nenergy!(a::Animal, e) = a.energy = e\nincr_energy!(a::Animal, Δe) = energy!(a, energy(a)+Δe)\nnothing # hide","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"To create an instance of Animal we have to specify the parametric type while constructing it","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"Animal{Wolf,Female}(1,5,5,1,1)","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"Note that we now automatically have animals of any sex without additional work. Our little side project of overloading Julia's show method of our shiny new parametric type already looks much more elegant than before:","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"function Base.show(io::IO, a::Animal{A,S}) where {A,S}\n    e = energy(a)\n    d = Δenergy(a)\n    pr = reprprob(a)\n    pf = foodprob(a)\n    print(io,\"$A$S #$(id(a)) E=$e ΔE=$d pr=$pr pf=$pf\")\nend\n\n# note that for new species/sexes we will only have to overload `show` on the\n# abstract species/sex types like below!\nBase.show(io::IO, ::Type{Sheep}) = print(io,\"🐑\")\nBase.show(io::IO, ::Type{Wolf}) = print(io,\"🐺\")\nBase.show(io::IO, ::Type{Male}) = print(io,\"♂\")\nBase.show(io::IO, ::Type{Female}) = print(io,\"♀\")\n\n\n[Animal{Sheep,Male}(2,2,2,1,1),Animal{Wolf,Female}(1,5,5,1,1)]","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"Unfortunately we have lost the convenience of creating plants and animals by simply calling their species constructor. For example, Sheep is just an abstract type that we cannot instantiate. However, we can manually define a new constructor that will give us this convenience back. This is done in exactly the same way as defining a constructor for a concrete type:","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"Sheep(id,E,ΔE,pr,pf,S=rand(Bool) ? Female : Male) = Animal{Sheep,S}(id,E,ΔE,pr,pf)","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"Ok, so we have a constructor for Sheep now. But what about all the other billions of species that you want to define in your huge master thesis project of ecosystem simulations?  Do you have to write them all by hand? Do not despair! Julia has you covered:","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"function (A::Type{<:AnimalSpecies})(id,E,ΔE,pr,pf,S=rand(Bool) ? Female : Male)\n    Animal{A,S}(id,E,ΔE,pr,pf)\nend\n\n[Sheep(2,2,2,1,1),Wolf(1,5,5,1,1)]","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"Adapt the code from lab 2 to work with our new parametric type hierarchy. For this you will have to define a concrete Plant type in a similar fashion as the new Animal type. Additionally you need to adapt at least the methods eat!, eats, mates, and reproduce!.","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"The full solution can be found on Github for the World, Plants, and Animals.","category":"page"},{"location":"lecture_03/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_04/hw/#Homework-4:-More-Unit-Tests","page":"Homework","title":"Homework 4: More Unit Tests","text":"","category":"section"},{"location":"lecture_04/hw/","page":"Homework","title":"Homework","text":"In this homework you will finish writing your unit tests for your Ecosystem.jl.","category":"page"},{"location":"lecture_04/hw/#How-to-submit","page":"Homework","title":"How to submit","text":"","category":"section"},{"location":"lecture_04/hw/","page":"Homework","title":"Homework","text":"The autoeval system expects you to upload a .zip file of your Ecosystem with at least the following files","category":"page"},{"location":"lecture_04/hw/","page":"Homework","title":"Homework","text":".\n└── Ecosystem\n    ├── Project.toml\n    ├── src\n    │   └── Ecosystem.jl\n    └── test\n        ├── every_nth.jl\n        ├── mushroom.jl\n        └── runtests.jl","category":"page"},{"location":"lecture_04/hw/","page":"Homework","title":"Homework","text":"The files every_nth.jl and mushroom.jl have to contain a single testset, so for example, the every_nth.jl file should look like this:","category":"page"},{"location":"lecture_04/hw/","page":"Homework","title":"Homework","text":"@testset \"every_nth\" begin\n    # your tests go in here\n    @test ...\nend","category":"page"},{"location":"lecture_04/hw/","page":"Homework","title":"Homework","text":"We will run those two testsets on our own (hopefully correct) implementation of Ecosystem.jl and check if your tests pass. Subsequently we will run them on an incorrect implementation of Ecosystem.jl and verify that your tests fail with the incorrect package. Hence, you will get full points if your tests pass on a correct implementation and fail on an incorrect implementation.","category":"page"},{"location":"lecture_04/hw/#Testing-every_nth","page":"Homework","title":"Testing every_nth","text":"","category":"section"},{"location":"lecture_04/hw/","page":"Homework","title":"Homework","text":"<div class=\"admonition is-category-homework\">\n<header class=\"admonition-header\">Compulsory Homework (1 point)</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_04/hw/","page":"Homework","title":"Homework","text":"Create a @testset for every_nth(f,n) in the file test/every_nth.jl. The testset should verify that the inner function f is called only every n times. This testset must contain at least two @test calls. One should verify that a variable has not changed the first n-1 calls to f. The second one should check that the variable has changed.","category":"page"},{"location":"lecture_04/hw/","page":"Homework","title":"Homework","text":"</div></div>","category":"page"},{"location":"lecture_04/hw/#Testing-Mushroom","page":"Homework","title":"Testing Mushroom","text":"","category":"section"},{"location":"lecture_04/hw/","page":"Homework","title":"Homework","text":"<div class=\"admonition is-category-homework\">\n<header class=\"admonition-header\">Compulsory Homework (1 point)</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_04/hw/","page":"Homework","title":"Homework","text":"Create a @testset for Mushroom that verifies that eat!(::Sheep,::Mushroom,::World) does what we expect. Calling eat! on a sheep and a mushroom should set the size of the mushroom to zero and decrease the energy of the sheep appropriately.","category":"page"},{"location":"lecture_04/hw/","page":"Homework","title":"Homework","text":"</div></div>","category":"page"},{"location":"lecture_04/hw/#Code-coverage","page":"Homework","title":"Code coverage","text":"","category":"section"},{"location":"lecture_04/hw/","page":"Homework","title":"Homework","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise (optional)</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_04/hw/","page":"Homework","title":"Homework","text":"Get your test coverage as computed by codecov (visible in your README badge) above 95% by implementing a test for simulate!.","category":"page"},{"location":"lecture_04/hw/","page":"Homework","title":"Homework","text":"</div></div>","category":"page"},{"location":"lecture_02/lecture/#type_lecture","page":"Lecture","title":"Motivation","text":"","category":"section"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"using InteractiveUtils # hide\nusing InteractiveUtils: subtypes # hide","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Before going into the details of Julia's type system, we will spend a few minutes motivating the two main roles of a type system, which are:","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Structuring code\nCommunicating to the compiler how a type will be used","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"The first aspect is important for the convenience of the programmer and enables abstractions in the language, the latter aspect is important for the speed of the generated code.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Type systems according to Wikipedia:","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"In computer science and computer programming, a data type or simply type is an attribute of data which tells the compiler or interpreter how the programmer intends to use the data.\nA type system is a logical system comprising a set of rules that assigns a property called a type to the various constructs of a computer program, such as variables, expressions, functions or modules. These types formalize and enforce the otherwise implicit categories the programmer uses for algebraic data types, data structures, or other components.","category":"page"},{"location":"lecture_02/lecture/#Structuring-the-code-/-enforcing-the-categories","page":"Lecture","title":"Structuring the code / enforcing the categories","text":"","category":"section"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"The role of structuring the code and imposing semantic restriction means that the type system allows you to logically divide your program, and to prevent certain types of errors. Consider for example two types, Wolf and Sheep which share the same definition but the types have different names.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"struct Wolf\n  name::String\n  energy::Int\nend\n\nstruct Sheep\n  name::String\n  energy::Int\nend","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"This allows us to define functions applicable only to the corresponding type","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"howl(wolf::Wolf) = println(wolf.name, \" has howled.\")\nbaa(sheep::Sheep) = println(sheep.name, \" has baaed.\")\nnothing # hide","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Therefore the compiler (or interpreter) enforces that a wolf can only howl and never baa and vice versa a sheep can only baa. In this sense, it ensures that howl(sheep) and baa(wolf) never happen. For comparison, consider an alternative definition as follows","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"bark(animal) = println(animal.name, \" has howled.\")\nbaa(animal)  = println(animal.name, \" has baaed.\")\nnothing # hide","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"in which case the burden of ensuring that a wolf will never baa rests upon the programmer which inevitably leads to errors (note that severely constrained type systems are difficult to use).","category":"page"},{"location":"lecture_02/lecture/#Intention-of-use-and-restrictions-on-compilers","page":"Lecture","title":"Intention of use and restrictions on compilers","text":"","category":"section"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Additionally, types are used to generate efficient code. As an example, consider the following two alternatives to represent a set of animals:","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"a = [Wolf(\"1\", 1), Wolf(\"2\", 2), Sheep(\"3\", 3)]\nb = (Wolf(\"1\", 1), Wolf(\"2\", 2), Sheep(\"3\", 3))\nnothing # hide","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"where a is an array which can contain arbitrary types and have arbitrary length whereas b is a Tuple which has fixed length in which the first two items are of type Wolf and the third item is of type Sheep. Moreover, consider a function which calculates the energy of all animals as","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"energy(animals) = mapreduce(x -> x.energy, +, animals)\nnothing # hide","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"A good compiler makes use of the information provided by the type system to generate effiecint code which we can verify by inspecting the compiled code using @code_native macro","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"@code_native energy(a)\n@code_native energy(b)","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"one observes the second version produces more optimal code. Why is that?","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"In the first representation, a, the animals are stored in an Array which can have arbitrary size and can contain arbitrary animals. This means that the compiler has to compile energy(a) such that it works on such arrays.\nIn the second representation, b, the animals are stored in a Tuple, which specializes for lengths and types of items. This means that the compiler knows the number of animals and the type of each animal on each position within the tuple, which allows it to specialize.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"This difference will indeed have an impact on the time of code execution. On my i5-8279U CPU, the difference (as measured by BenchmarkTools) is","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"using BenchmarkTools\n@btime energy(a);\n@btime energy(b);\nnothing #hide","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Which nicely demonstrates that the choice of types affects performance. Does it mean that we should always use Tuples instead of Arrays? Surely not, it is  just that each is better for different use-cases. Using Tuples means that the compiler will compile a special function for each length of tuple and each combination of types of items it contains, which is clearly wasteful.","category":"page"},{"location":"lecture_02/lecture/#type_system","page":"Lecture","title":"Julia's type system","text":"","category":"section"},{"location":"lecture_02/lecture/#Julia-is-dynamicaly-typed","page":"Lecture","title":"Julia is dynamicaly typed","text":"","category":"section"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Julia's type system is dynamic, which means that all types are resolved during runtime. But, if the compiler can infer types of all variables of the called function, it can specialize the function for that given type of variables which leads to efficient code. Consider a modified example where we represent two wolfpacks:","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"wolfpack_a =  [Wolf(\"1\", 1), Wolf(\"2\", 2), Wolf(\"3\", 3)]\nwolfpack_b =  Any[Wolf(\"1\", 1), Wolf(\"2\", 2), Wolf(\"3\", 3)]\nnothing # hide","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"wolfpack_a carries a type Vector{Wolf} while wolfpack_b has the type Vector{Any}. This means that in the first case, the compiler knows that all items are of the type Wolfand it can specialize functions using this information. In case of wolfpack_b, it does not know which animal it will encounter (although all are of the same type), and therefore it needs to dynamically resolve the type of each item upon its use. This ultimately leads to less performant code.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"@btime energy(wolfpack_a)\n@btime energy(wolfpack_b)\nnothing # hide","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"To conclude, julia is indeed a dynamically typed language, but if the compiler can infer all types in a called function in advance, it does not have to perform the type resolution during execution, which produces performant code.","category":"page"},{"location":"lecture_02/lecture/#Classes-of-types","page":"Lecture","title":"Classes of types","text":"","category":"section"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Julia divides types into three classes: primitive, composite, and abstract.","category":"page"},{"location":"lecture_02/lecture/#Primitive-types","page":"Lecture","title":"Primitive types","text":"","category":"section"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Citing the documentation:  A primitive type is a concrete type whose data consists of plain old bits. Classic examples  of primitive types are integers and floating-point values. Unlike most languages, Julia lets you declare your own primitive types, rather than providing only a fixed set of built-in ones. In fact, the standard primitive types are all defined in the language itself.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"The definition of primitive types look as follows","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"primitive type Float16 <: AbstractFloat 16 end\nprimitive type Float32 <: AbstractFloat 32 end\nprimitive type Float64 <: AbstractFloat 64 end","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"and they are mainly used to jump-start julia's type system. It is rarely needed to define a special primitive type, as it makes sense only if you define special functions operating on its bits. This is almost excusively used for exposing special operations provided by the underlying CPU / LLVM compiler. For example + for Int32 is different from + for Float32 as they call a different intrinsic operations. You can inspect this jump-starting of the type system yourself by looking at Julia's source.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"julia> @which +(1,2)\n+(x::T, y::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8} in Base at int.jl:87","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"At int.jl:87","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"(+)(x::T, y::T) where {T<:BitInteger} = add_int(x, y)","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"we see that + of integers is calling the function add_int(x, y), which is defined in the core part of the compiler in Intrinsics.cpp (yes, in C++).","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"From Julia docs: Core is the module that contains all identifiers considered \"built in\" to the language, i.e. part of the core language and not libraries. Every module implicitly specifies using Core, since you can't do anything without those definitions.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Primitive types are rarely used, and they will not be used in this course. We mention them for the sake of completeness and refer the reader to the official Documentation (and source code of Julia).","category":"page"},{"location":"lecture_02/lecture/#Abstract-types","page":"Lecture","title":"Abstract types","text":"","category":"section"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"An abstract type can be viewed as a set of concrete types. For example, an AbstractFloat represents the set of concrete types (BigFloat,Float64,Float32,Float16). This is used mainly to define general methods for sets of types for which we expect the same behavior (recall the Julia design motivation: if it quacks like a duck, waddles like a duck and looks like a duck, chances are it's a duck). Abstract types are defined with abstract type TypeName end. For example the following set of abstract types defines part of julia's number system.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"abstract type Number end\nabstract type Real          <: Number end\nabstract type Complex       <: Number end\nabstract type AbstractFloat <: Real end\nabstract type Integer       <: Real end\nabstract type Signed        <: Integer end\nabstract type Unsigned      <: Integer end","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"where <: means \"is a subtype of\" and it is used in declarations where the right-hand is an immediate sypertype of a given type (Integer has the immediate supertype Real.) If the supertype is not supplied, it is considered to be Any, therefore in the above defition Number has the supertype Any. Children of a particular type can be viewed as","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"using AbstractTrees\nfunction AbstractTrees.children(t::Type)\n    t === Function ? Vector{Type}() : filter!(x -> x !== Any,subtypes(t))\nend\nAbstractTrees.printnode(io::IO,t::Type) = print(io,t)\nprint_tree(Number)","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"As was mentioned, abstract types allows as to define functions that can be applied variebles of types with a given abstract type as a supertype. For example we can define a sgn function for all real numbers as","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"sgn(x::Real) = x > 0 ? 1 : x < 0 ? -1 : 0\nnothing # hide","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"and we know it would be correct for all real numbers. This means that if anyone creates a new subtype of Real, the above function can be used. This also means that it is expected that comparison operations are defined for any real number. Also notice that Complex numbers are excluded, since they do not have a total order.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"For unsigned numbers, the sgn can be simplified, as it is sufficient to verify if they are different (greater) than zero, therefore the function can read","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"sgn(x::Unsigned) = x > 0 ? 1 : 0\nnothing # hide","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"and again, it applies to all numbers derived from Unsigned. Recall that Unsigned <: Integer <: Real, how does Julia decide, which version of the function sgn to use for UInt8(0)? It chooses the most specific version, and thus for sgn(UInt8(0)) it will use sgn(x::Unsinged). If the compiler cannot decide, typically it encounters an ambiguity, it throws an error and recommends which function you should define to resolve it.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"The above behavior allows to define default \"fallback\" implementations and while allowing to specialize for sub-types. A great example is matrix multiplication, which has a generic (and slow) implementation with many specializations, which can take advantage of structure (sparse, banded), or use optimized implementations (e.g. blas implementation for dense matrices with eltype Float32 and Float64).","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Again, Julia does not make a difference between abstract types defined in Base libraries shipped with the language and those defined by you (the user). All are treated the same.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"From Julia documentation: Abstract types cannot be instantiated, which means that we cannot create a variable that would have an abstract type (try typeof(Number(1f0))). Also, abstract types cannot have any fields, therefore there is no composition (there are lengty discussions of why this is so, one of the most definite arguments of creators is that abstract types with fields frequently lead to children types not using some fields (consider circle vs. ellipse)).","category":"page"},{"location":"lecture_02/lecture/#composite_types","page":"Lecture","title":"Composite types","text":"","category":"section"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Composite types are similar to struct in C (they even have the same memory layout) as they logically join together other types. It is not a great idea to think about them as objects (in OOP sense), because objects tie together data and functions on owned data. Contrary in Julia (as in C), functions operate on data of structures, but are not tied to them and they are defined outside them. Composite types are workhorses of Julia's type system, as user-defined types are mostly composite (or abstract).","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Composite types are defined using struct TypeName [fields] end. To define a position of an animal on the Euclidean plane as a type, we would write","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"struct PositionF64\n  x::Float64\n  y::Float64\nend","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"which defines a structure with two fields x and y of type Float64. Julia's compiler creates a default constructor, where both (but generally all) arguments are converted using (convert(Float64, x), convert(Float64, y) to the correct type. This means that we can construct a PositionF64 with numbers of different type that are convertable to Float64, e.g. PositionF64(1,1//2) but we cannot construct PositionF64 where the fields would be of different type (e.g. Int, Float32, etc.) or they are not trivially convertable (e.g. String).","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Fields in composite types do not have to have a specified type.  We can define a VaguePosition without specifying the type","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"struct VaguePosition\n  x\n  y\nend","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"This works as the definition above except that the arguments are not converted to Float64 now. One can store different values in x and y, for example String (e.g. VaguePosition(\"Hello\",\"world\")). Although the above definition might be convenient, it limits the compiler's ability to specialize, as the type  VaguePosition does not carry information about type of x and y, which has a negative impact on the performance. For example","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"using BenchmarkTools\nmove(a,b) = typeof(a)(a.x+b.x, a.y+b.y)\nx = [PositionF64(rand(), rand()) for _ in 1:100]\ny = [VaguePosition(rand(), rand()) for _ in 1:100]\n@benchmark reduce(move, x)\n@benchmark reduce(move, y)","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Giving fields of a composite type an abstract type does not really solve the problem of the compiler not knowing the type. In this example, it still does not know, if it should use instructions for Float64 or Int8.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"struct LessVaguePosition\n  x::Real\n  y::Real\nend\nz = [LessVaguePosition(rand(), rand()) for _ in 1:100];\n@benchmark reduce(move, z)","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"From the perspective of generating optimal code, both definitions are equally uninformative to the compiler as it cannot assume anything about the code. However, the  LessVaguePosition will ensure that the position will contain only numbers, hence catching trivial errors like instantiating VaguePosition with non-numeric types for which arithmetic operators will not be defined (recall the discussion on the  beginning of the lecture).","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"All structs defined above are immutable (as we have seen above in the case of Tuple), which means that one cannot change a field (unless the struct wraps a container, like and array, which allows that). For example this raises an error","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"a = LessVaguePosition(1,2)\na.x = 2","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"If one needs to make a struct mutable, use the keyword mutable before the keyword struct as","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"mutable struct MutablePosition\n  x::Float64\n  y::Float64\nend","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"In mutable structures, we can change the values of fields.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"a = MutablePosition(1e0, 2e0)\na.x = 2;\na","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Note, that the memory layout of mutable structures is different, as fields now contain references to memory locations, where the actual values are stored.","category":"page"},{"location":"lecture_02/lecture/#Parametric-types","page":"Lecture","title":"Parametric types","text":"","category":"section"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"So far, we had to trade-off flexibility for generality in type definitions. Can we have both? The answer is affirmative. The way to achieve this  flexibility in definitions of the type while being  able to generate optimal code is to  parametrize the type definition. This is achieved by replacing types with a parameter (typically a single uppercase character) and decorating in definition by specifying different type in curly brackets. For example","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"struct PositionT{T}\n  x::T\n  y::T\nend\nu = [PositionT(rand(), rand()) for _ in 1:100]\n@btime reduce(move, u)\nnothing #hide","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Notice that the compiler can take advantage of specializing for different types (which does not have an effect here as in modern processors addition of Float and Int takes the same time).","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"v = [PositionT(rand(1:100), rand(1:100)) for _ in 1:100]\n@btime reduce(move, v)\nnothing #hide","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"The above definition suffers the same problem as VaguePosition, which is that it allows us to instantiate the PositionT with non-numeric types, e.g. String. We solve this by restricting the types T to be children of some supertype, in this case Real","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"struct Position{T<:Real}\n  x::T\n  y::T\nend","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"which will throw an error if we try to initialize it with Position(\"1.0\", \"2.0\").","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Naturally, fields in structures can be of different types, as is in the below pointless example.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"struct PositionXY{X<:Real, Y<:Real}\n  x::X\n  y::Y\nend","category":"page"},{"location":"lecture_02/lecture/#Abstract-parametric-types","page":"Lecture","title":"Abstract parametric types","text":"","category":"section"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Like Composite types, Abstract types can also have parameters. These parameters define types that are common for all child types. A very good example is Julia's definition of arrays of arbitrary dimension N and type T of its items as","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"abstract type AbstractArray{T,N} end","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Different T and N give rise to different variants of AbstractArrays, therefore AbstractArray{Float32,2} is different from AbstractArray{Float64,2} and from AbstractArray{Float64,1}. Note that these are still Abstract types, which means you cannot instantiate them. Their purpose is","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"to allow to define operations for broad class of concrete types\nto inform the compiler about constant values, which can be used","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Notice in the above example that parameters of types do not have to be types, but can also be values of primitive types, as in the above example of AbstractArray N is the number of dimensions which is an integer value.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"For convenience, it is common to give some important partially instantiated Abstract types an alias, for example AbstractVector as","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"const AbstractVector{T} = AbstractArray{T,1}","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"is defined in array.jl:23 (in Julia 1.6.2), which allows us to define for example general prescription for the dot product of two abstract vectors as","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"function dot(a::AbstractVector, b::AbstractVector)\n  @assert length(a) == length(b)\n  mapreduce(*, +, a, b)\nend\nnothing # hide","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"You can verify that the above general function can be compiled to performant code if specialized for particular arguments.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"@code_native mapreduce(*,+, [1,2,3], [1,2,3])","category":"page"},{"location":"lecture_02/lecture/#More-on-the-use-of-types-in-function-definitions","page":"Lecture","title":"More on the use of types in function definitions","text":"","category":"section"},{"location":"lecture_02/lecture/#Terminology","page":"Lecture","title":"Terminology","text":"","category":"section"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"A function refers to a set of \"methods\" for a different combination of type parameters (the term function can be therefore considered as refering to a mere name). Methods define different behavior for different types of arguments for a given function. For example","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"move(a::Position, b::Position) = Position(a.x + b.x, a.y + b.y)\nmove(a::Vector{<:Position}, b::Vector{<:Position}) = move.(a,b)\nnothing # hide","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"move refers to a function with methods move(a::Position, b::Position) and move(a::Vector{<:Position}, b::Vector{<:Position}). When different behavior on different types is defined by a programmer, as shown above, it is also called implementation specialization. There is another type of specialization, called compiler specialization, which occurs when the compiler generates different functions for you from a single method. For example for","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"move(Position(1,1), Position(2,2))\nmove(Position(1.0,1.0), Position(2.0,2.0))","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"the compiler generates two methods, one for Position{Int64} and the other for Position{Float64}. Notice that inside generated functions, the compiler needs to use different intrinsic operations, which can be viewed from","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"@code_native move(Position(1,1), Position(2,2))","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"and","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"@code_native move(Position(1.0,1.0), Position(2.0,2.0))","category":"page"},{"location":"lecture_02/lecture/#Intermezzo:-How-does-the-Julia-compiler-work?","page":"Lecture","title":"Intermezzo: How does the Julia compiler work?","text":"","category":"section"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Let's walk through an example. Consider the following definitions","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"move(a::Position, by::Position) = Position(a.x + by.x, a.y + by.y)\nmove(a::T, by::T) where {T<:Position} = Position(a.x + by.x, a.y + by.y)\nmove(a::Position{Float64}, by::Position{Float64}) = Position(a.x + by.x, a.y + by.y)\nmove(a::Vector{<:Position}, by::Vector{<:Position}) = move.(a, by)\nmove(a::Vector{<:Position}, by::Position) = move.(a, by)\nnothing # hide","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"and a function call","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"a = Position(1.0, 1.0)\nby = Position(2.0, 2.0)\nmove(a, by)","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"The compiler knows that you call the function move.\nThe compiler infers the type of the arguments. You can view the result with","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"(typeof(a),typeof(by))","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"The compiler identifies all move-methods with arguments of type (Position{Float64}, Position{Float64}):","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Base.method_instances(move, (typeof(a), typeof(by)))\nm = Base.method_instances(move, (typeof(a), typeof(by))) |> first","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"4a. If the method has been specialized (compiled), then the arguments are prepared and the method is invoked. The compiled specialization can be seen from","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"m.cache","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"4b. If the method has not been specialized (compiled), the method is compiled for the given type of arguments and continues as in step 4a. A compiled function is therefore  a \"blob\" of native code living in a particular memory location. When Julia calls a function, it needs to pick the right block corresponding to a function with particular type of parameters.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"If the compiler cannot narrow the types of arguments to concrete types, it has to perform the above procedure inside the called function, which has negative effects on performance, as the type resulution and identification of the methods can be slow, especially for methods with many arguments (e.g. 30ns for a method with one argument, 100 ns for method with two arguements). Recall the above example","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"wolfpack_a =  [Wolf(\"1\", 1), Wolf(\"2\", 2), Wolf(\"3\", 3)]\n@benchmark energy(wolfpack_a)","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"and","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"wolfpack_b =  Any[Wolf(\"1\", 1), Wolf(\"2\", 2), Wolf(\"3\", 3)]\n@benchmark energy(wolfpack_b)","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"An interesting intermediate between fully abstract and fully concrete type happens, when the compiler knows that arguments have abstract type, which is composed of a small number of concrete types. This case  called Union-Splitting, which happens when there is just a little bit of uncertainty. Julia will do something like","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"argtypes = typeof(args)\npush!(execution_stack, args)\nif T == Tuple{Int, Bool}\n  @goto compiled_blob_1234\nelse # the only other option is Tuple{Float64, Bool}\n  @goto compiled_blob_1236\nend","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"For example","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"const WolfOrSheep = Union{Wolf, Sheep}\nwolfpack_c =  WolfOrSheep[Wolf(\"1\", 1), Wolf(\"2\", 2), Wolf(\"3\", 3)]\n@benchmark energy(wolfpack_c)","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Thanks to union splitting, Julia is able to have performant operations on arrays with undefined / missing values for example","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"[1, 2, 3, missing] |> typeof","category":"page"},{"location":"lecture_02/lecture/#More-on-matching-methods-and-arguments","page":"Lecture","title":"More on matching methods and arguments","text":"","category":"section"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"In the above process, the step, where Julia looks for a method instance with corresponding parameters can be very confusing. The rest of this lecture will focus on this. For those who want to have a formal background, we recommend talk of  Francesco Zappa Nardelli and / or the one of Jan Vitek.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"When Julia needs to specialize a method instance, it needs to find it among multiple definitions. A single function can have many method instances, see for example methods(+) which  lists all method instances of the +-function. How does Julia select the proper one?","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"It finds all methods where the type of arguments match or are subtypes of restrictions on arguments in the method definition.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"2a. If there are multiple matches, the compiler selects the most specific definition.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"2b. If the compiler cannot decide, which method instance to choose, it throws an error.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"confused_move(a::Position{Float64}, by) = Position(a.x + by.x, a.y + by.y)\nconfused_move(a, by::Position{Float64}) = Position(a.x + by.x, a.y + by.y)\nconfused_move(Position(1.0,2.0), Position(1.0,2.0))","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"2c. If it cannot find a suitable method, it throws an error.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"move(Position(1,2), VaguePosition(\"hello\",\"world\"))","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Some examples: Consider following definitions","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"move(a::Position, by::Position) = Position(a.x + by.x, a.y + by.y)\nmove(a::T, by::T) where {T<:Position} = T(a.x + by.x, a.y + by.y)\nmove(a::Position{Float64}, by::Position{Float64}) = Position(a.x + by.x, a.y + by.y)\nmove(a::Vector{<:Position}, by::Vector{<:Position}) = move.(a, by)\nmove(a::Vector{T}, by::Vector{T}) where {T<:Position} = move.(a, by)\nmove(a::Vector{<:Position}, by::Position) = move.(a, by)\nnothing # hide","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Which method will compiler select for","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"move(Position(1.0,2.0), Position(1.0,2.0))","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"The first three methods match the types of argumens, but the compiler will select the third one, since it is the most specific.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Which method will compiler select for","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"move(Position(1,2), Position(1,2))","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Again, the first and second method definitions match the argument, but the second is the most specific.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Which method will the compiler select for","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"move([Position(1,2)], [Position(1,2)])","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Again, the fourth and fifth method definitions match the argument, but the fifth is the most specific.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"move([Position(1,2), Position(1.0,2.0)], [Position(1,2), Position(1.0,2.0)])","category":"page"},{"location":"lecture_02/lecture/#Frequent-problems","page":"Lecture","title":"Frequent problems","text":"","category":"section"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Why does the following fail?","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"foo(a::Vector{Real}) = println(\"Vector{Real}\")\nfoo([1.0,2,3])","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Julia's type system is invariant, which means that Vector{Real} is different from Vector{Float64} and from Vector{Float32}, even though Float64 and Float32 are sub-types of Real. Therefore typeof([1.0,2,3]) isa Vector{Float64} which is not subtype of Vector{Real}. For covariant languages, this would be true. For more information on variance in computer languages, see here. If de above definition of foo should be applicable to all vectors which has elements of subtype of Real we have define it as","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"foo(a::Vector{T}) where {T<:Real} = println(\"Vector{T} where {T<:Real}\")\nnothing # hide","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"or equivalently but more tersely as","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"foo(a::Vector{<:Real}) = println(\"Vector{T} where {T<:Real}\")\nnothing # hide","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"Diagonal rule says that a repeated type in a method signature has to be a concrete type. Consider for example the function below","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"move(a::T, b::T) where {T<:Position} = T(a.x + by.x, a.y + by.y)\nnothing # hide","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"we cannot call it with move(Position(1.0,2.0), Position(1,2)), since in this case Position(1.0,2.0) is of type Position{Float64} while Position(1,2) is of type Position{Int64}.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"When debugging why arguments do not match a particular method definition, it is useful to use typeof, isa, and <: commands. For example","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"typeof(Position(1.0,2.0))\ntypeof(Position(1,2))\nPosition(1,2) isa Position{Float64}\nPosition(1,2) isa Position{Real}\nPosition(1,2) isa Position{<:Real}\ntypeof(Position(1,2)) <: Position{<:Float64}\ntypeof(Position(1,2)) <: Position{<:Real}","category":"page"},{"location":"lecture_02/lecture/#A-bizzare-definition-which-you-can-encounter","page":"Lecture","title":"A bizzare definition which you can encounter","text":"","category":"section"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"The following definition of a one-hot matrix is taken from Flux.jl","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"struct OneHotArray{T<:Integer, L, N, var\"N+1\", I<:Union{T,AbstractArray{T, N}}} <: AbstractArray{Bool, var\"N+1\"}\n  indices::I\nend","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"The parameters of the type carry information about the type used to encode the position of one in each column in T, the dimension of one-hot vectors in L, the dimension of the storage of indices in N (which is zero for OneHotVector and one for OneHotMatrix), number of dimensions of the OneHotArray in var\"N+1\" and the type of underlying storage of indicies I.","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"","category":"page"},{"location":"lecture_02/lecture/","page":"Lecture","title":"Lecture","text":"This page was generated using Literate.jl.","category":"page"},{"location":"installation/#install","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"In order to participate in the course, everyone should install a recent version of Julia together with some text editor of choice. Furthermore during the course we will introduce some best practices of creating/testing and distributing your own Julia code, for which we will require a GitHub account.","category":"page"},{"location":"installation/#Julia-IDE","page":"Installation","title":"Julia IDE","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"There is no one way to install/develop and run Julia, which may be strange users coming from MATLAB, but for users of general purpose languages such as Python, C++ this is quite common. As of 2020 the most widely adopted way is in combination with the VSCode editor, for which there is an officially supported Julia extension. Moreover this setup is the same as with our bachelor course, which has provided an extensive tutorial mainly in case of installation on Windows machines, here. If you are using any other supported platform, you can use the guide as well replacing some steps with your system specifics (having the julia executable in path or as an alias is a plus). When deciding which version to download we recommend the latest stable release as of August 2021, 1.6.x, which has some quality of life improvements mainly with regards to readability of error messages. ","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Note that this setup is not a strict requirement for the lectures/labs and any other text editor with the option to send code to the terminal, such as Sublime Text, Vim+tmux or Atom will suffice (a major convenience when dealing with programming languages that support interactivity through a Read-Eval-Print Loop - REPL).","category":"page"},{"location":"installation/#GitHub-registration-and-Git-setup","page":"Installation","title":"GitHub registration & Git setup","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"As one of the goals of the course is writing code that can be distributed to others, we require a GitHub account, which you can create here (unless you already have one). In order to interact with GitHub repositories, we will be using git client. For installation instruction (Windows only) see the section in the bachelor course.","category":"page"},{"location":"lecture_01/motivation/#Introduction-to-Scientific-Programming","page":"Motivation","title":"Introduction to Scientific Programming","text":"","category":"section"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"tip: Loose definition of Scientific Programming\nScientific programming language is designed and optimized for the use of mathematical formula and matrices wiki","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Examples of Scientific programming languages include ALGOL, APL, Fortran, J, Julia, Maple, MATLAB and R.","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Key requirements:","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"fast execution of the code (complex algorithms)\nease of code reuse / restructuring \nreproducibility of the results","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Contrast to general-purpose language:","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"less concern with business models (library + header files)\nless concern with Application binary interface (ABI)\nless concern with public/private separation","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"tip: Example of a scientific task\nIn many applications, we encounter the task of     optimization a function given by a routine (e.g.     engineering, finance, etc.)using Optim\n\nP(x,y) = x^2 - 3x*y + 5y^2 - 7y + 3   # user defined     function\n\nz₀ = [ 0.0\n       0.0 ]     # starting point \n\noptimize(z -> P(z...), z₀, ConjugateGradient())\noptimize(z -> P(z...), z₀, Newton())\noptimize(z -> P(z...), z₀, Newton();autodiff = :forward)\n","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Very simple for a user, very complicated for a programmer. The program should:","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"pick the right optimization method (easy by config-like approach)\ncompute gradient (Hessian) of a user function","category":"page"},{"location":"lecture_01/motivation/#Classical-thinking:-create-a-library,-call-it.","page":"Motivation","title":"Classical thinking: create a library, call it.","text":"","category":"section"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Think of a problem of repeated execution of similar jobs. Can be implemented by the  main loop (in low-level language) taking a configuration file. The configuration file can be simple, consisting of e.g.: ","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"input data file,\nwhat to do with it,\noutput file","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"The more complicated experiments you want to do, the more complex your configuration file becomes. Sooner or later, you will create a new configuration language, or scripting language.","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Ending up in the 2 language problem. ","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Low-level programming = computer centric\nclose to the hardware\nallows excellent optimization for fast execution\nHigh-level programming = user centric\nrunning code with many different modifications as easily as possible\nallowing high level of abstraction","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"In scientific programming, the most well known scripting languages are: Python,  Matlab, R","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"If you care about standard \"configurations\" they are just perfect.  (PyTorch, BLAS)\nYou hit a problem with more complex experiments. ","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"The scripting language typically makes decisions (if) at runtime. Becomes slow.","category":"page"},{"location":"lecture_01/motivation/#Examples","page":"Motivation","title":"Examples","text":"","category":"section"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Basic Linear Algebra Subroutines (BLAS)–MKL, OpenBlas–-with bindings (Matlab, NumPy)\nMatlab and Mex (C with pointer arithmetics)\nPython with transcription to C (Cython)","category":"page"},{"location":"lecture_01/motivation/#Convergence-efforts","page":"Motivation","title":"Convergence efforts","text":"","category":"section"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Just-in-time compilation (understands high level and converts to low-level)\nautomatic typing (auto in C++) (extends low-level with high-level concepts)","category":"page"},{"location":"lecture_01/motivation/#Julia-approach:-fresh-thinking","page":"Motivation","title":"Julia approach: fresh thinking","text":"","category":"section"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"(Image: )","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"A dance between specialization and abstraction. ","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Specialization  allows for custom treatment. The right algorithm for the right circumstance is obtained by Multiple dispatch,\nAbstraction recognizes what remains the same after differences are stripped away. Abstractions in mathematics are captured as code through generic programming.","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Why a new language?","category":"page"},{"location":"lecture_01/motivation/#Challenge","page":"Motivation","title":"Challenge","text":"","category":"section"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Translate high-level thinking with as much abstraction as possible into specific fast machine code.","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Not so easy!","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"theorem: Indexing array x in Matlab:\nx = [1,2,3]\ny=x(4/2)\ny=x(5/2)In the first case it works, in the second throws an error.type instability \nfunction inde(x,n,m)=x(n/m) can never be fast.\nPoor language design choice!","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Simple solution","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Solved by different floating and integer division operation /,÷\nNot so simple with complex objects, e.g. triangular matrices","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Julia was designed as a high-level language that allows very high level abstract concepts but propagates as much information about the specifics as possible to help the compiler to generate as fast code as possible. Taking lessons from the inability to achieve fast code compilation (mostly from python).","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"(Image: )","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"julia is faster than C?","category":"page"},{"location":"lecture_01/motivation/#Julia-way","page":"Motivation","title":"Julia way","text":"","category":"section"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Design principle: abstraction should have zero runtime  cost","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"flexible type system with strong typing (abstract types)\nmultiple dispatch\nsingle language from high to low levels (as much as possible) optimize execution as much as you can during compile time\nfunctions as symbolic abstraction layers","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"(Image: )","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"AST = Abstract Syntax Tree\nIR = Intermediate Representation","category":"page"},{"location":"lecture_01/motivation/#Teaser-example","page":"Motivation","title":"Teaser example","text":"","category":"section"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Function recursion with arbitrary number of arguments:","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"fsum(x) = x\nfsum(x,p...) = x+fsum(p[1],p[2:end]...)","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Defines essentially a sum of inputs. Nice generic and abstract concept.","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Possible in many languages:","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Matlab via nargin, varargin using construction if nargin==1, out=varargin{1}, else out=fsum(varargin{2:end}), end","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Julia solves this if at compile time. ","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"The generated code can be inspected by macro @code_llvm?","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"fsum(1,2,3)\n@code_llvm fsum(1,2,3)\n@code_llvm fsum(1.0,2.0,3.0)\nfz()=fsum(1,2,3)\n@code_llvm fz()","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Note that each call of fsum generates a new and different function.","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Functions can act either as regular functions or like templates in C++. Compiler decides.","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"This example is relatively simple, many other JIT languages can optimize such code. Julia allows taking this approach further.","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Generality of the code:","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"fsum('c',1)\nfsum([1,2],[3,4],[5,6])","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Relies on multiple dispatch of the + function.","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"More involved example:","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"using Zygote\n\nf(x)=3x+1           # user defined function\n@code_llvm f'(10)","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"The simplification was not achieved by the compiler alone.","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Julia provides tools for AST and IR code manipulation\nautomatic differentiation via IR manipulation is implemented in Zygote.jl\nin a similar way, debugger is implemented in Debugger.jl\nvery simple to design domain specific language\nusing Turing\nusing StatsPlots\n\n@model function gdemo(x, y)\n    s² ~ InverseGamma(2, 3)\n    m ~ Normal(0, sqrt(s²))\n    x ~ Normal(m, sqrt(s²))\n    y ~ Normal(m, sqrt(s²))\nend","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Such tools allow building a very convenient user experience on abstract level, and reaching very efficient code.","category":"page"},{"location":"lecture_01/motivation/#Reproducibile-research","page":"Motivation","title":"Reproducibile research","text":"","category":"section"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Think about a code that was written some time ago. To run it, you often need to be able to have the same version of the language it was written for. ","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"Standard way language freezes syntax and guarantees some back-ward compatibility (Matlab), which prevents future improvements\nJulia approach allows easy recreation of the environment in which the code was developed. Every project (e.g. directory) can have its own environment","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"tip: Environment\nIs an independent set of packages that can be local to an individual project or shared and selected by name.","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"tip: Package\nA package is a source tree with a standard layout providing functionality that can be reused by other Julia projects.","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"This allows  Julia to be a  rapidly evolving ecosystem with frequent changes due to:","category":"page"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"built-in package manager\nswitching between multiple versions of packages","category":"page"},{"location":"lecture_01/motivation/#Package-manager","page":"Motivation","title":"Package manager","text":"","category":"section"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"implemented by Pkg.jl\nsource tree have their structure defined by a convention\nhave its own mode in REPL\nallows adding packages for using (add) or development (dev)\nsupporting functions for creation (generate) and activation (activate) and many others","category":"page"},{"location":"lecture_01/motivation/#Julia-from-user's-point-of-view","page":"Motivation","title":"Julia from user's point of view","text":"","category":"section"},{"location":"lecture_01/motivation/","page":"Motivation","title":"Motivation","text":"compilation of everything to as specialized as possible\nvery fast code\nslow interaction (caching...)\ngenerating libraries is harder \nthink of fsum, \neverything is \".h\"  (Eigen library)\ndebugging is different to matlab/python\nextensibility, Multiple dispatch = multi-functions\nallows great extensibility and code composition\nnot (yet) mainstream thinking\nJulia is not Object-oriented\nJulia is (not pure) functional language","category":"page"},{"location":"lecture_06/lab/#introspection_lab","page":"Lab","title":"Lab 06: Code introspection and metaprogramming","text":"","category":"section"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"In this lab we are first going to inspect some tooling to help you understand what Julia does under the hood such as:","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"looking at the code at different levels\nunderstanding what method is being called\nshowing different levels of code optimization","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"Secondly we will start playing with the metaprogramming side of Julia, mainly covering:","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"how to view abstract syntax tree (AST) of Julia code\nhow to manipulate AST","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"These topics will be extended in the next lecture/lab, where we are going use metaprogramming to manipulate code with macros.","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"We will be again a little getting ahead of ourselves as we are going to use quite a few macros, which will be properly explained in the next lecture as well, however for now the important thing to know is that a macro is just a special function, that accepts as an argument Julia code, which it can modify.","category":"page"},{"location":"lecture_06/lab/#Quick-reminder-of-introspection-tooling","page":"Lab","title":"Quick reminder of introspection tooling","text":"","category":"section"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"Let's start with the topic of code inspection, e.g. we may ask the following: What happens when Julia evaluates [i for i in 1:10]?","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"parsing ","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"using InteractiveUtils #hide\n:([i for i in 1:10]) |> dump","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"lowering","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"Meta.@lower [i for i in 1:10]","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"typing","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"f() = [i for i in 1:10]\n@code_typed f()","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"LLVM code generation","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"@code_llvm f()","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"native code generation","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"@code_native f()","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"Let's see how these tools can help us understand some of Julia's internals on examples from previous labs and lectures.","category":"page"},{"location":"lecture_06/lab/#Understanding-the-runtime-dispatch-and-type-instabilities","page":"Lab","title":"Understanding the runtime dispatch and type instabilities","text":"","category":"section"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"We will start with a question: Can we spot internally some difference between type stable/unstable code?","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"Inspect the following two functions using @code_lowered, @code_typed, @code_llvm and @code_native.","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"x = rand(10^5)\nfunction explicit_len(x)\n    length(x)\nend\n\nfunction implicit_len()\n    length(x)\nend\nnothing #hide","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"For now do not try to understand the details, but focus on the overall differences such as length of the code.","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"info: Redirecting `stdout`\nIf the output of the method introspection tools is too long you can use a general way of redirecting standard output stdout to a fileopen(\"./llvm_fun.ll\", \"w\") do file\n    original_stdout = stdout\n    redirect_stdout(file)\n    @code_llvm fun()\n    redirect_stdout(original_stdout)\nendIn case of @code_llvm and @code_native there are special options, that allow this out of the box, see help ? for underlying code_llvm and code_native. If you don't mind adding dependencies there is also the @capture_out from Suppressor.jl","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"@code_warntype explicit_sum(x)\n@code_warntype implicit_sum()\n\n@code_typed explicit_sum(x)\n@code_typed implicit_sum()\n\n@code_llvm explicit_sum(x)\n@code_llvm implicit_sum()\n\n@code_native explicit_sum(x)\n@code_native implicit_sum()","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"In this case we see that the generated code for such a simple operation is much longer in the type unstable case resulting in longer run times. However in the next example we will see that having longer code is not always a bad thing.","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_06/lab/#Loop-unrolling","page":"Lab","title":"Loop unrolling","text":"","category":"section"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"In some cases the compiler uses loop unrolling[1] optimization to speed up loops at the expense of binary size. The result of such optimization is removal of the loop control instructions and rewriting the loop into a repeated sequence of independent statements.","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"[1]: https://en.wikipedia.org/wiki/Loop_unrolling","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"Inspect under what conditions does the compiler unroll the for loop in the polynomial function from the last lab.","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"function polynomial(a, x)\n    accumulator = a[end] * one(x)\n    for i in length(a)-1:-1:1\n        accumulator = accumulator * x + a[i]\n    end\n    accumulator  \nend\nnothing #hide","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"Compare the speed of execution with and without loop unrolling.","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"HINTS:","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"these kind of optimization are lower level than intermediate language\nloop unrolling is possible when compiler knows the length of the input","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"using Test #hide\nusing BenchmarkTools\na = Tuple(ones(20)) # tuple has known size\nac = collect(a)\nx = 2.0\n\n@code_lowered polynomial(a,x)       # cannot be seen here as optimizations are not applied\n@code_typed polynomial(a,x)         # loop unrolling is not part of type inference optimization\nnothing #hide","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"@code_llvm polynomial(a,x)\n@code_llvm polynomial(ac,x)","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"More than 2x speedup","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"@btime polynomial($a,$x)\n@btime polynomial($ac,$x)","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_06/lab/#Recursion-inlining-depth","page":"Lab","title":"Recursion inlining depth","text":"","category":"section"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"Inlining[2] is another compiler optimization that allows us to speed up the code by avoiding function calls. Where applicable compiler can replace f(args) directly with the function body of f, thus removing the need to modify stack to transfer the control flow to a different place. This is yet another optimization that may improve speed at the expense of binary size.","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"[2]: https://en.wikipedia.org/wiki/Inline_expansion","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"Rewrite the polynomial function from the last lab using recursion and find the length of the coefficients, at which inlining of the recursive calls stops occurring.","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"function polynomial(a, x)\n    accumulator = a[end] * one(x)\n    for i in length(a)-1:-1:1\n        accumulator = accumulator * x + a[i]\n    end\n    accumulator  \nend","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"info: Splatting/slurping operator `...`\nThe operator ... serves two purposes inside function calls [3][4]:combines multiple arguments into onefunction printargs(args...)\n    println(typeof(args))\n    for (i, arg) in enumerate(args)\n        println(\"Arg #$i = $arg\")\n    end\nend\nprintargs(1, 2, 3)splits one argument into many different argumentsfunction threeargs(a, b, c)\n    println(\"a = $a::$(typeof(a))\")\n    println(\"b = $b::$(typeof(b))\")\n    println(\"c = $c::$(typeof(c))\")\nend\nthreeargs([1,2,3]...) # or with a variable threeargs(x...)[3]: https://docs.julialang.org/en/v1/manual/faq/#What-does-the-...-operator-do?[4]: https://docs.julialang.org/en/v1/manual/functions/#Varargs-Functions","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"HINTS:","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"define two methods _polynomial!(ac, x, a...) and _polynomial!(ac, x, a) for the case of ≥2 coefficients and the last coefficient\nuse splatting together with range indexing a[1:end-1]...\nthe correctness can be checked using the built-in evalpoly\nrecall that these kind of optimization are possible just around the type inference stage\nuse container of known length to store the coefficients","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"_polynomial!(ac, x, a...) = _polynomial!(x * ac + a[end], x, a[1:end-1]...)\n_polynomial!(ac, x, a) = x * ac + a\npolynomial(a, x) = _polynomial!(a[end] * one(x), x, a[1:end-1]...)\n\n# the coefficients have to be a tuple\na = Tuple(ones(Int, 21)) # everything less than 22 gets inlined\nx = 2\npolynomial(a,x) == evalpoly(x,a) # compare with built-in function\n\n# @code_llvm polynomial(a,x)    # seen here too, but code_typed is a better option\n@code_lowered polynomial(a,x) # cannot be seen here as optimizations are not applied\nnothing #hide","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"@code_typed polynomial(a,x)","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_06/lab/#AST-manipulation:-The-first-steps-to-metaprogramming","page":"Lab","title":"AST manipulation: The first steps to metaprogramming","text":"","category":"section"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"Julia is so called homoiconic language, as it allows the language to reason about its code. This capability is inspired by years of development in other languages such as Lisp, Clojure or Prolog.","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"There are two easy ways to extract/construct the code structure [5]","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"parsing code stored in string with internal Meta.parse","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"code_parse = Meta.parse(\"x = 2\")    # for single line expressions (additional spaces are ignored)\ncode_parse_block = Meta.parse(\"\"\"\nbegin\n    x = 2\n    y = 3\n    x + y\nend\n\"\"\") # for multiline expressions","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"constructing an expression using quote ... end or simple :() syntax","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"code_expr = :(x = 2)    # for single line expressions (additional spaces are ignored)\ncode_expr_block = quote\n    x = 2\n    y = 3\n    x + y   \nend # for multiline expressions","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"Results can be stored into some variables, which we can inspect further.","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"typeof(code_parse)\ndump(code_parse)","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"typeof(code_parse_block)\ndump(code_parse_block)","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"The type of both multiline and single line expression is Expr with fields head and args. Notice that Expr type is recursive in the args, which can store other expressions resulting in a tree structure - abstract syntax tree (AST) - that can be visualized for example with the combination of GraphRecipes and Plots packages. ","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"using GraphRecipes #hide\nusing Plots #hide\nplot(code_expr_block, fontsize=12, shorten=0.01, axis_buffer=0.15, nodeshape=:rect)","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"This recursive structure has some major performance drawbacks, because the args field is of type Any and therefore modifications of this expression level AST won't be type stable. Building blocks of expressions are Symbols and literal values (numbers).","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"A possible nuisance of working with multiline expressions is the presence of LineNumber nodes, which can be removed with Base.remove_linenums! function.","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"Base.remove_linenums!(code_parse_block)","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"Parsed expressions can be evaluate using eval function. ","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"eval(code_parse)    # evaluation of :(x = 2) \nx                   # should be defined","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"Before doing anything more fancy let's start with some simple manipulation of ASTs.","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"Define a variable code to be as the result of parsing the string \"j = i^2\". \nCopy code into a variable code2. Modify this to replace the power 2 with a power 3. Make sure that the original code variable is not also modified. \nCopy code2 to a variable code3. Replace i with i + 1 in code3.\nDefine a variable i with the value 4. Evaluate the different code expressions using the eval function and check the value of the variable j.","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"code = Meta.parse(\"j = i^2\")\ncode2 = copy(code)\ncode2.args[2].args[3] = 3\ncode3 = copy(code2)\ncode3.args[2].args[2] = :(i + 1)\ni = 4\neval(code), eval(code2), eval(code3)","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"Following up on the more general substitution of variables in an expression from the lecture, let's see how the situation becomes more complicated, when we are dealing with strings instead of a parsed AST.","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"using Test #hide\nreplace_i(s::Symbol) = s == :i ? :k : s\nreplace_i(e::Expr) = Expr(e.head, map(replace_i, e.args)...)\nreplace_i(u) = u\nnothing #hide","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"Given a function replace_i, which replaces variables i for k in an expression like the following","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"ex = :(i + i*i + y*i - sin(z))\n@test replace_i(ex) == :(k + k*k + y*k - sin(z))","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"write a different function sreplace_i(s), which does the same thing but instead of a parsed expression (AST) it manipulates a string, such as","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"s = string(ex)","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"HINTS:","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"Use Meta.parse in combination with replace_i ONLY for checking of correctness.\nYou can use the replace function in combination with regular expressions.\nThink of some corner cases, that the method may not handle properly.","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"The naive solution","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"sreplace_i(s) = replace(s, 'i' => 'k')\n@test Meta.parse(sreplace_i(s)) == replace_i(Meta.parse(s))","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"does not work in this simple case, because it will replace \"i\" inside the sin(z) expression. Avoiding these corner cases would require some more involved logic (like complicated regular expressions in replace), therefore using the parsed AST is preferable when manipulating the code.","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"If the exercises so far did not feel very useful let's focus on one, that is similar to a part of the IntervalArithmetics.jl pkg.","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"Write function wrap!(ex::Expr) which wraps literal values (numbers) with a call to f(). You can test it on the following example","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"f = x -> convert(Float64, x)\nex = :(x*x + 2*y*x + y*y)     # original expression\nrex = :(x*x + f(2)*y*x + y*y) # result expression\nnothing #hide","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"HINTS:","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"use recursion and multiple dispatch\ndispatch on ::Number to detect numbers in an expression\nfor testing purposes, create a copy of ex before mutating","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"function wrap!(ex::Expr)\n    args = ex.args\n    \n    for i in 1:length(args)\n        args[i] = wrap!(args[i])\n    end\n\n    return ex\nend\n\nwrap!(ex::Number) = Expr(:call, :f, ex)\nwrap!(ex) = ex\n\next, x, y = copy(ex), 2, 3\n@test wrap!(ex) == :(x*x + f(2)*y*x + y*y)\neval(ext)\neval(ex)","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"This kind of manipulation is at the core of some pkgs, such as aforementioned IntervalArithmetics.jl where every number is replaced with a narrow interval in order to find some bounds on the result of a computation.","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"","category":"page"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"[5]: Once you understand the recursive structure of expressions, the AST can be constructed manually like any other type.","category":"page"},{"location":"lecture_06/lab/#Resources","page":"Lab","title":"Resources","text":"","category":"section"},{"location":"lecture_06/lab/","page":"Lab","title":"Lab","text":"Julia's manual on metaprogramming\nDavid P. Sanders' workshop @ JuliaCon 2021 \nSteven Johnson's keynote talk @ JuliaCon 2019\nAndy Ferris's workshop @ JuliaCon 2018\nFrom Macros to DSL by John Myles White \nNotes on JuliaCompilerPlugin","category":"page"},{"location":"how_to_submit_hw/#homeworks","page":"Homework submission","title":"Homework submission","text":"","category":"section"},{"location":"how_to_submit_hw/","page":"Homework submission","title":"Homework submission","text":"This document should describe the homework submission procedure.","category":"page"},{"location":"lecture_07/macros/#Macros","page":"Macros","title":"Macros","text":"","category":"section"},{"location":"lecture_01/basics/#Syntax","page":"Basics","title":"Syntax","text":"","category":"section"},{"location":"lecture_01/basics/#Elementary-syntax:-Matlab-heritage","page":"Basics","title":"Elementary syntax: Matlab heritage","text":"","category":"section"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"Very much like matlab:","category":"page"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"indexing from  1\narray as first-class A=[1 2 3]","category":"page"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"Cheat sheet: https://cheatsheets.quantecon.org/","category":"page"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"Introduction: https://juliadocs.github.io/Julia-Cheat-Sheet/","category":"page"},{"location":"lecture_01/basics/#Arrays-are-first-class-citizens","page":"Basics","title":"Arrays are first-class citizens","text":"","category":"section"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"Many design choices were motivated considering matrix arguments:","category":"page"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"x *= 2 is implemented as x = x*2 causing new allocation (vectors).","category":"page"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"The reason is consistency with matrix operations: A *= B works as A = A*B.","category":"page"},{"location":"lecture_01/basics/#Broadcasting-operator","page":"Basics","title":"Broadcasting operator","text":"","category":"section"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"Julia generalizes matlabs .+ operation to general use for any function. ","category":"page"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"a = [1 2 3]\nsin.(a)\nf(x)=x^2+3x+8\nf.(a)","category":"page"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"Solves the problem of inplace multiplication","category":"page"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"x .*= 2 ","category":"page"},{"location":"lecture_01/basics/#Functional-roots-of-Julia","page":"Basics","title":"Functional roots of Julia","text":"","category":"section"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"Function is a first-class citizen.","category":"page"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"Repetition of functional programming:","category":"page"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"function mymap(f::Function,a::AbstractArray)\n    b = similar(a)\n    for i=1:length(a)\n        b[i]=f(a[i])\n    end\n    b\nend","category":"page"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"Allows for anonymous functions:","category":"page"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"mymap(x->x^2+2,[1.0,2.0])","category":"page"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"Function properties:","category":"page"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"Arguments are passed by reference (change of mutable inputs inside the function is visible outside)\nConvention: function changing inputs have a name ending by \"!\" symbol\nreturn value \nthe last line of the function declaration, \nreturn keyword\nzeros cost abstraction","category":"page"},{"location":"lecture_01/basics/#Different-style-of-writing-code","page":"Basics","title":"Different style of writing code","text":"","category":"section"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"Definitions of multiple small functions and their composition","category":"page"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"fsum(x) = x\nfsum(x,p...) = x+fsum(p[1],p[2:end]...)","category":"page"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"a single methods may not be sufficient to understand the full algorithm. In procedural language, you may write:","category":"page"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"function out=fsum(x,varargin)\nif nargin==2 # TODO: better treatment\n    out=x\nelse\n    out = fsum(varargin{1},varargin{2:end})\nend","category":"page"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"The need to build intuition for function composition.","category":"page"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"Dispatch is easier to optimize by the compiler.","category":"page"},{"location":"lecture_01/basics/#Operators-are-functions","page":"Basics","title":"Operators are functions","text":"","category":"section"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"operator function name\n[A B C ...] hcat\n[A; B; C; ...] vcat\n[A B; C D; ...] hvcat\nA' adjoint\nA[i] getindex\nA[i] = x setindex!\nA.n getproperty\nA.n = x setproperty!","category":"page"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"Can be redefined and overloaded for different input types. The getproperty method can define access to the memory structure.","category":"page"},{"location":"lecture_01/basics/#Broadcasting-revisited","page":"Basics","title":"Broadcasting revisited","text":"","category":"section"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"The a.+b syntax is a syntactic sugar for broadcast(+,a,b).","category":"page"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"The special meaning of the dot is that they will be fused into a single call:","category":"page"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"f.(g.(x .+ 1)) is treated by Julia as broadcast(x -> f(g(x + 1)), x). \nAn assignment y .= f.(g.(x .+ 1)) is treated as in-place operation broadcast!(x -> f(g(x + 1)), y, x).","category":"page"},{"location":"lecture_01/basics/","page":"Basics","title":"Basics","text":"The same logic works for lists, tuples, etc.","category":"page"},{"location":"lecture_03/lecture/#Design-patterns:-good-practices-and-structured-thinking","page":"Lecture","title":"Design patterns: good practices and structured thinking","text":"","category":"section"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Every software developer has a desire to write better code. A desire to improve system performance. A desire to design software that is easy to maintain, easy to understand and explain.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Design patterns are recommendations and good practices accumulating knowledge of experienced  programmers.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"The highest level of experience contains the design guiding principles:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"SOLID: Single Responsibility, Open/Closed, Liskov Substitution, Interface\nSegregation, Dependency Inversion\nDRY: Don't Repeat Yourself\nKISS: Keep It Simple, Stupid!\nPOLA: Principle of Least Astonishment\nYAGNI: You Aren't Gonna Need It (overengineering)\nPOLP: Principle of Least Privilege ","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"While these high-level concepts are intuitive, they are too general to give specific answers.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"More detailed patterns arise for programming paradigms (declarative, imperative) with specific instances of functional or object-oriented programming.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Julia is a multi-paradigm, taking features of both object-oriented and functional programming. The key concept of julia are:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"type system of data structures\nmultiple dispatch, respecting the types,\nfunctional programming concepts such as closures","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"How do I correctly use these tools to express what I want to achieve?","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"The concept of design patterns originates in the OOP paradigm. OOP defines a strict way how to write software:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"class\ninterface\nvirtual methods","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"It is often unclear how to use these concepts to solve a particular programming task.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"A cookbook:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Gamma, E., Johnson, R., Helm, R., Johnson, R. E., & Vlissides, J. (1995). Design patterns: elements of reusable object-oriented software. Pearson Deutschland GmbH.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Defining 23 design patterns in three categories. Became extremely popular.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Fundamental tradeoff: rules vs. freedom","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"freedom: in the C language it is possible to access assembler instructions, use pointer aritmetics:\nit is possible to write extremely efficient code\nit is easy to segfault, leak memory, etc.\nrules: in strict languages (strict OOP, strict functional programing) you lose freedom for certain guarantees:\ne.g. strict functional programing guarantees that the program provably terminates\noperations that are simple e.g. in pointer arithmetics may become clumsy and inefficient in those strict rules.\nthe compiler can validate the rules and complain if the code does not comply with them. ","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Julia is again a dance between freedom and strict rules. It is more inclined to freedom.  Provides few simple concepts that allow to construct design patterns common in other languages.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"the language does not enforce too many formalisms (via keywords (interfac, trait, etc.) but they can be \nthe compiler cannot check for correctness of these \"patterns\"\nthe user has a lot of freedom (and responsibility)\nlots of features can be added by Julia packages (with various level of comfort)\nmacros","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Read: ","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Hands-On Design Patterns and Best Practices with Julia Proven solutions to common problems in software design for Julia 1.x Tom Kwong, CFA","category":"page"},{"location":"lecture_03/lecture/#Functional-tools:-Closures","page":"Lecture","title":"Functional tools: Closures","text":"","category":"section"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"tip: Closure (lexical closure, function closure)\nA technique for implementing lexically scoped name binding in a language with first-class functions. Operationally, a closure is a record storing a function together with an environment.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"originates in functional programming\nnow widespread in many common languages, Python, Matlab, etc..\nmemory management relies on garbage collector in general (can be optimized by compiler)","category":"page"},{"location":"lecture_03/lecture/#Example","page":"Lecture","title":"Example","text":"","category":"section"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"function adder(x)\n    return y->x+y\nend","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"creates a function that \"closes\" the argument x. Try: f=adder(5); f(3).","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"x = 30;\nfunction adder()\n    return y->x+y\nend","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"creates a function that \"closes\" variable x.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"f = adder(10)\nf(1)\ng = adder()\ng(1)\n","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Such function can be passed as an argument: together with the closed data.","category":"page"},{"location":"lecture_03/lecture/#Implementation-of-closures-in-julia:-documentation","page":"Lecture","title":"Implementation of closures in julia: documentation","text":"","category":"section"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Closure is a record storing a function together with an environment. The environment is a mapping associating each free variable of the function (variables that are used locally, but defined in an enclosing scope) with the value or reference to which the name was bound when the closure was created.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"function adder(x)\n    return y->x+y\nend","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"is lowered to (roughly):","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"struct ##1{T}\n    x::T\nend\n\n(_::##1)(y) = _.x + y\n\nfunction adder(x)\n    return ##1(x)\nend","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Note that the structure ##1 is not directly accessible. Try f.x and g.x.","category":"page"},{"location":"lecture_03/lecture/#Functor-Function-like-structure","page":"Lecture","title":"Functor = Function-like structure","text":"","category":"section"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Each structure can have a method that is invoked when called as a function.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"(_::Sheep)()= println(\"🐑\")","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"You can think of it as sheep.default_method().","category":"page"},{"location":"lecture_03/lecture/#Coding-style","page":"Lecture","title":"Coding style","text":"","category":"section"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"From Flux.jl:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"function train!(loss, ps, data, opt; cb = () -> ())\n  ps = Params(ps)\n  cb = runall(cb)\n  @progress for d in data\n      gs = gradient(ps) do\n        loss(batchmemaybe(d)...)\n      end\n      update!(opt, ps, gs)\n      cb()\n  end\nend","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Is this confusing? What can cb() do and what it can not?","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Note that function train! does not have many local variables. The important ones are arguments, i.e. exist in the scope from which the function was invoked.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"loss(x,y)=mse(model(x),y)\ncb() = @info \"training\" loss(x,y)\ntrain!(loss, ps, data, opt; cb=cb)","category":"page"},{"location":"lecture_03/lecture/#Usage","page":"Lecture","title":"Usage","text":"","category":"section"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Usage of closures:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"callbacks: the function can also modify the enclosed variable.\nabstraction: partial evaluation ","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"theorem: Beware: Performance of captured variables\nInference of types may be difficult in closures: https://github.com/JuliaLang/julia/issues/15276    ","category":"page"},{"location":"lecture_03/lecture/#Design-Patterns-of-OOP-from-the-Julia-viewpoint","page":"Lecture","title":"Design Patterns of OOP from the Julia viewpoint","text":"","category":"section"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"OOP is currently very popular concept (C++, Java, Python).  It has strenghts and weaknesses. The Julia authors tried to keep the strength and overcome weaknesses. ","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Key features of OOP:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Encapsulation \nInheritance \nPolymorphism ","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Classical OOP languages define classes that bind processing functions to the data. Virtual methods are defined only for the attached methods of the classes.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"tip: Encapsulation\nRefers to bundling of data with the methods that operate on that data, or the restricting of direct access to some of an object's components. Encapsulation is used to hide the values or state of a structured data object inside a class, preventing direct access to them by clients in a way that could expose hidden implementation details or violate state invariance maintained by the methods. ","category":"page"},{"location":"lecture_03/lecture/#Encapsulation-Advantage:-Consistency-and-Validity","page":"Lecture","title":"Encapsulation Advantage: Consistency and Validity","text":"","category":"section"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"With fields of data structure freely accessible, the information may become inconsistent.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"mutable struct Grass <: Plant\n    id::Int\n    size::Int\n    max_size::Int\nend","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"What if I create Grass with larger size than max_size?","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"grass = Grass(1,50,5)","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Freedom over Rules. Maybe I would prefer to introduce some rules.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Some encapsulation may be handy keeping it consistent. Julia has inner constructor.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"mutable struct Grass <: Plant\n    id::Int\n    size::Int\n    max_size::Int\n    Grass(id,sz,msz) = sz > msz ? error(\"size can not be gerater that max_size\") : new(id,sz,msz)\nend","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"When defined, Julia does not provide the default outer constructor. ","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"But fields are still accessible:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"grass.size = 10000","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Recall that grass.size=1000 is a syntax of ```setproperty!(grass,:size,1000), which can be redefined:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"function Base.setproperty!(obj::Grass, sym::Symbol, val)\n    if sym==:size\n        @assert val<=obj.max_size \"size have to be lower than max_size!\"\n    end\n    setfield!(obj,sym,val)\nend","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Function setfield! can not be overloaded.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Julia has partial encapsulation via a mechanism for consistency checks. ","category":"page"},{"location":"lecture_03/lecture/#Encapsulation-Disadvantage:-the-Expression-Problem","page":"Lecture","title":"Encapsulation Disadvantage: the Expression Problem","text":"","category":"section"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Encapsulation limits the operations I can do with an object. Sometimes too much. Consider a matrix of methods/types(data-structures)","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Consider an existing matrix of data and functions:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"data \\ methods find_food eat! grow!  \nWolf     \nSheep     \nGrass     ","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"You have a good reason not to modify the original source (maintenance).","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Imagine we want to extend the world to use new animals and new methods for all animals.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Object-oriented programming ","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"classes are primary objects (hierarchy)\ndefine animals as classes ( inheriting from abstract class)\nadding a new animal is easy\nadding a new method for all animals is hard (without modifying the original code)","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Functional programming ","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"functions are primary\ndefine operations find_food, eat!\nadding a new operation is easy\nadding new data structure to existing operations is hard","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Solutions:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"multiple-dispatch = julia\nopen classes (monkey patching) = add methods to classes on the fly\nvisitor pattern = partial fix for OOP [extended visitor pattern using dynamic_cast]","category":"page"},{"location":"lecture_03/lecture/#Morale:","page":"Lecture","title":"Morale:","text":"","category":"section"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Julia does not enforces creation getters/setters by default  (setproperty is mapped to setfield)\nit provides tools to enforce access restriction if the user wants it.\ncan be used to imitate objects: ","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"https://stackoverflow.com/questions/39133424/how-to-create-a-single-dispatch-object-oriented-class-in-julia-that-behaves-l/39150509#39150509","category":"page"},{"location":"lecture_03/lecture/#Polymorphism:","page":"Lecture","title":"Polymorphism:","text":"","category":"section"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"tip: Polymorphism in OOP\nPolymorphism is the method in an object-oriented programming language that performs different things as per the object’s class, which calls it. With Polymorphism, a message is sent to multiple class objects, and every object responds appropriately according to the properties of the class. ","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Example animals of different classes make different sounds. In Python:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"sheep.make_sound()\nwolf.make_sound()","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Will make distinct sounds (baa, Howl). ","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Can we achieve this in Julia?","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"make_sound(s::Sheep)=println(\"Baa\")\nmake_sound(w::Wolf)=println(\"Howl\")","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Multiple dispatch is an extension of the classical polymorphism of OOP, which is only a single dispatch.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"tip: Implementation of virtual methods\nVirtual methods in OOP are typically implemented using Virtual Method Table, one for each class. (Image: )","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Freedom vs. Rules. ","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"julia does not check if make_sound exists for all animals. May result in MethodError. Responsibility of a programmer.\ndefine make_sound(A::AbstractAnimal)\nDuck typing is a type of polymorphism without static types\nmore  programming freedom, less formal guarantees","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"tip: Challenge for OOP\nHow to code polymorphic behavior of meeting two animals in OOP?Complicated.... You need a \"design pattern\" for it.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Simple in Julia:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"meet(w1::Wolf, w2::Wolf)=\nmeet(w1::Sheep, w2::Wolf)=\nmeet(w1::Sheep, w2::Sheep)=","category":"page"},{"location":"lecture_03/lecture/#Inheritance","page":"Lecture","title":"Inheritance","text":"","category":"section"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"tip: Inheritance\nIs the mechanism of basing one object or class upon another object (prototype-based inheritance) or class (class-based inheritance), retaining similar implementation. Deriving new classes (sub classes) from existing ones such as super class or base class and then forming them into a hierarchy of classes. In most class-based object-oriented languages, an object created through inheritance, a \"child object\", acquires all the properties and behaviors of the \"parent object\" , with the exception of: constructors, destructor, overloaded operators.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Most commonly, the sub-class inherits methods and the data.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"For example, in python we can design a sheep with additional field. Think of a situation that we want to refine the reproduction procedure for sheeps by considering differences for male and female. We do not have information about gender in the original implementation. ","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"In OOP, we can use inheritance.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"class Sheep:\n    def __init__(self, energy, Denergy):\n        self.energy = energy\n        self.Denergy = Denergy\n\n    def make_sound(self):\n        print(\"Baa\")\n\nclass SheepWithGender(Sheep):\n    def __init__(self, energy, Denergy,gender):\n        super().__init__(energy, Denergy)\n        self.gender = gender\n    # make_sound is inherited \n\n# Can you do this in Julia?!","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Simple answer: NO, not exactly","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Sheep has fields, is a concrete type, we cannot extend it.\nwith modification of the original code, we can define AbstractSheep with subtypes Sheep and AbstractSheep.\nBut methods for AbstractAnimal works for sheeps! Is this inheritance?","category":"page"},{"location":"lecture_03/lecture/#Inheritance-vs.-Subtyping","page":"Lecture","title":"Inheritance vs. Subtyping","text":"","category":"section"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Subtle difference:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"subtyping = equality of interface \ninheritance = reuse of implementation ","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"In practice, subtyping reuse methods, not data fields.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"We have seen this in Julia, using type hierarchy: ","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"agent_step!(a::Animal, w::World)\nall animals subtype of Animal \"inherit\" this method.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"The type hierarchy is only one way of subtyping. Julia allows many variations, e.g. concatenating different parts of hierarchies via the Union{} type:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"fancy_method(O::Union{Sheep,Grass})=println(\"Fancy\")","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Is this a good idea? It can be done completely Ad-hoc! Freedom over Rules.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"There are very good use-cases:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Missing values:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"x::AbstractVector{<:Union{<:Number, Missing}}","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"theorem: SubTyping issues\nWith parametric types, unions and other construction, subtype resolution may become a complicated problem. Julia can even crash. https://www.youtube.com/watch?v=LT4AP7CUMAw","category":"page"},{"location":"lecture_03/lecture/#Sharing-of-data-field-via-composition","page":"Lecture","title":"Sharing of data field via composition","text":"","category":"section"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Composition is also recommended in OOP: https://en.wikipedia.org/wiki/Compositionoverinheritance","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"struct ⚥Sheep <: Animal\n    sheep::Sheep\n    sex::Symbol\nend","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"If we want our new ⚥Sheep to behave like the original Sheep, we need to forward the corresponding methods.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"eat!(a::⚥Sheep, b::Grass, w::World)=eat!(a.sheep, b, w)","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"and all other methods. Routine work. Boring!   The whole process can be automated using macros @forward from Lazy.jl.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Why so complicated? Wasn't the original inheritance tree structure better?","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"multiple inheritance:\nyou just compose two different \"trees\".\ncommon example with ArmoredVehicle = Vehicle + Weapon\nDo you think there is only one sensible inheritance tree?","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"tip: Animal World\nThink of an inheritance tree of a full scope Animal world.Idea #1: Split animals by biological taxonomy (Image: )Hold on. Sharks and dolphins can swim very well!\nBoth bats and birds fly similarly!Idea #2: Split by the way they move!Idea #3: Split by way of ...","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"In fact, we do not have a tree, but more like a matrix/tensor:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":" swims flies walks\nbirds penguin eagle kiwi\nmammal dolphin bat sheep,wolf\ninsect backswimmer fly beetle","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Single type hierarchy will not work. Other approaches:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"interfaces\nparametric types","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Analyze what features of animals are common and compose the animal:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"abstract type HeatType end\nabstract type MovementType end\nabstract type ChildCare end\n\n\nmutable struct Animal{H<:HeatType,M<:MovementType,C<:ChildCare} \n    id::Int\n    ...\nend","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Now, we can define methods dispatching on parameters of the main type.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Composition is simpler in such a general case. Composition over inheritance. ","category":"page"},{"location":"lecture_03/lecture/#Interfaces:-inheritance/subtyping-without-a-hierarchy-tree","page":"Lecture","title":"Interfaces: inheritance/subtyping without a hierarchy tree","text":"","category":"section"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"In OOP languages such as Java, interfaces have a dedicated keyword such taht compiler can check correctes of the interface implementation. ","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"In Julia, interfaces can be achived by defining ordinary functions.  Not so strict validation by the compiler as in other languages. Freedom...","category":"page"},{"location":"lecture_03/lecture/#Example:-Iterators","page":"Lecture","title":"Example: Iterators","text":"","category":"section"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Many fundamental objects can be iterated: Arrays, Tuples, Data collections...","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"They do not have any common \"predecessor\". They are almost \"primitive\" types.\nthey share just the property of being iterable\nwe do not want to modify them in any way","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Example: of interface Iterators defined by \"duck typing\" via two functions.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Required methods Brief description\niterate(iter) Returns either a tuple of the first item and initial state or nothing if empty\niterate(iter, state) Returns either a tuple of the next item and next state or nothing if no items remain","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Defining these two methods for any object/collection C will make the following work:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"for o in C\n   # do something\nend","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"The compiler will not check if both functions exist.\nIf one is missing, it will complain about it when it needs it\nThe error message may be less informative than in the case of formal definition","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Note:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"even iterators may have different features: they can be finite or infinite\nfor finite iterators we can define useful functions (collect)\nhow to pass this information in an extensible way?","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Poor solution: if statements.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"function collect(iter)\n if iter isa Tuple...\n\nend","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"The compiler can do that for us.","category":"page"},{"location":"lecture_03/lecture/#Traits:-cherry-picking-subtyping","page":"Lecture","title":"Traits: cherry picking subtyping","text":"","category":"section"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Trait mechanism in Julia is build using the existing tools: Type System and Multiple Dispatch.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Traits have a few key parts:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Trait types: the different traits a type can have.\nTrait function: what traits a type has.\nTrait dispatch: using the traits.","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"From iterators:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"# trait types:\n\nabstract type IteratorSize end\nstruct SizeUnknown <: IteratorSize end\nstruct HasLength <: IteratorSize end\nstruct IsInfinite <: IteratorSize end\n\n# Trait function: Input is a Type, output is a Type\nIteratorSize(::Type{<:Tuple}) = HasLength()\nIteratorSize(::Type) = HasLength()  # HasLength is the default\n\n# ...\n\n# Trait dispatch\nBitArray(itr) = gen_bitarray(IteratorSize(itr), itr)\ngen_bitarray(isz::IteratorSize, itr) = gen_bitarray_from_itr(itr)\ngen_bitarray(::IsInfinite, itr) =  throw(ArgumentError(\"infinite-size iterable used in BitArray constructor\"))\n","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"What is needed to define for a new type that I want to iterate over? ","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Do you still miss inheritance in the OOP style?","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"Many packages automating this with more structure:","category":"page"},{"location":"lecture_03/lecture/","page":"Lecture","title":"Lecture","text":"https://github.com/andyferris/Traitor.jl\nhttps://github.com/mauro3/SimpleTraits.jl\nhttps://github.com/tk3369/BinaryTraits.jl","category":"page"},{"location":"lecture_10/lecture/","page":"-","title":"-","text":"notes","category":"page"},{"location":"lecture_13/neural_ode/#Ordinary-ODE","page":"-","title":"Ordinary ODE","text":"","category":"section"},{"location":"lecture_13/neural_ode/","page":"-","title":"-","text":"Consider $ \\frac{du}{dt}+N(u)=0 $","category":"page"},{"location":"lecture_13/neural_ode/","page":"-","title":"-","text":"which may have many special cases, e.g. the ","category":"page"},{"location":"lecture_13/neural_ode/","page":"-","title":"-","text":"$","category":"page"},{"location":"lecture_13/neural_ode/","page":"-","title":"-","text":"burg $","category":"page"},{"location":"lecture_13/neural_ode/","page":"-","title":"-","text":"Consider a surrogate function f to be represented by a neural network f=NN_theta(xt).","category":"page"},{"location":"lecture_13/neural_ode/","page":"-","title":"-","text":"Define two loss functions: $ \\begin{align} MSEu = \\frac{1}{Nu}\\sum{i=1}^{Nu} | f(xu^i,t_u^i ) - u^i |^2 \\end{align} $","category":"page"},{"location":"lecture_07/hw/#Homework-7:","page":"Homework","title":"Homework 7:","text":"","category":"section"},{"location":"lecture_05/lab/#Lab-05:-Practical-performance-debugging-tools","page":"Lab","title":"Lab 05: Practical performance debugging tools","text":"","category":"section"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Performance is crucial in scientific computing. There is a big difference if your experiments run one minute or one hour. We have already developed quite a bit of code, both in and outside packages, on which we are going to present some of the tooling that Julia provides for finding performance bottlenecks. Performance of your code or more precisely the speed of execution is of course relative (preference, expectation, existing code) and it's hard to find the exact threshold when we should start to care about it. When starting out with Julia, we recommend not to get bogged down by the performance side of things straightaway, but just design the code in the way that feels natural to you. As opposed to other languages Julia offers you to write the things \"like you are used to\" (depending on your background), e.g. for cycles are as fast as in C; vectorization of mathematical operators works the same or even better than in MATLAB, NumPy. ","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Once you have tested the functionality, you can start exploring the performance of your code by different means:","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"manual code inspection - identifying performance gotchas (tedious, requires skill)\nautomatic code inspection - Jet.jl (probably not as powerful as in statically typed languages)\nbenchmarking - measuring variability in execution time, comparing with some baseline (only a statistic, non-specific)\nprofiling - measuring the execution time at \"each line of code\" (no easy way to handle advanced parallelism, ...)\nallocation tracking - similar to profiling but specifically looking at allocations (one sided statistic)","category":"page"},{"location":"lecture_05/lab/#Checking-type-stability","page":"Lab","title":"Checking type stability","text":"","category":"section"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Recall that type stable function is written in a way, that allows Julia's compiler to infer all the types of all the variables and produce an efficient native code implementation without the need of boxing some variables in a structure whose types is known only during runtime. Probably unbeknown to you we have already seen an example of type unstable function (at least in some situations) in the first lab, where we have defined the polynomial function:","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"function polynomial(a, x)\n    accumulator = 0\n    for i in length(a):-1:1\n        accumulator += x^(i-1) * a[i] # ! 1-based indexing for arrays\n    end\n    return accumulator\nend","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"The exact form of compiled code and also the type stability depends on the arguments of the function. Let's explore the following two examples of calling the function:","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Integer number valued arguments","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"a = [-19, 7, -4, 6]\nx = 3\npolynomial(a, x)","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Float number valued arguments","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"xf = 3.0\npolynomial(a, xf)","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"The result they produce is the \"same\" numerically, however it differs in the output type. Though you have probably not noticed it, there should be a difference in runtime (assuming that you have run it once more after its compilation). It is probably a surprise to no one, that one of the methods that has been compiled is type unstable. This can be check with the @code_warntype macro:","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"using InteractiveUtils #hide\n@code_warntype polynomial(a, x)  # type stable\n@code_warntype polynomial(a, xf) # type unstable","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"We are getting a little ahead of ourselves in this lab, as understanding of these expressions is part of the future lecture and lab. Anyway the output basically shows what the compiler thinks of each variable in the code, albeit for us in less readable form than the original code. The more red the color is of the type info the less sure the inferred type is. Our main focus should be on the return type of the function which is just at the start of the code with the keyword Body. In the first case the return type is an Int64, whereas in the second example the compiler is unsure whether the type is Float64 or Int64, marked as the Union type of the two. Fortunately for us this type instability can be fixed with a single line edit, but we will see later that it is not always the case.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"note: Type stability\nHaving a variable represented as Union of multiple types in a functions is a lesser evil than having Any, as we can at least enumerate statically the available options of functions to which to dynamically dispatch and in some cases there may be a low penalty.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Create a new function polynomial_stable, which is type stable and measure the difference in evaluation time. ","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"HINTS: ","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Ask for help on the one and zero keyword, which are often as a shorthand for these kind of functions.\nrun the function with the argument once before running @time or use @btime if you have BenchmarkTools readily available in your environment\nTo see some measurable difference with this simple function, a longer vector of coefficients may be needed.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"function polynomial_stable(a, x)\n    accumulator = zero(x)\n    for i in length(a):-1:1\n        accumulator += x^(i-1) * a[i]\n    end\n    accumulator\nend","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"@code_warntype polynomial_stable(a, x)  # type stable\n@code_warntype polynomial_stable(a, xf) # type stable","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"polynomial(a, xf) #hide\npolynomial_stable(a, xf) #hide\n@time polynomial(a, xf)\n@time polynomial_stable(a, xf)","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Only really visible when evaluating multiple times.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"using BenchmarkTools\n@btime polynomial($a, $xf)\n@btime polynomial_stable($a, $xf)","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Difference only a few nanoseconds.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Note: Recalling homework from lab 1. Adding zero also extends this function to the case of x being a matrix, see ? menu.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Code stability issues are something unique to Julia, as its JIT compilation allows it to produce code that contains boxed variables, whose type can be inferred during runtime. This is one of the reasons why interpreted languages are slow to run but fast to type. Julia's way of solving it is based around compiling functions for specific arguments, however in order for this to work without the interpreter, the compiler has to be able to infer the types.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"There are other problems (such as unnecessary allocations), that you can learn to spot in your code, however the code stability issues are by far the most commonly encountered problems among beginner users of Julia wanting to squeeze more out of it.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"note: Advanced tooling\nSometimes @code_warntype shows that the function's return type is unstable without any hints to the possible problem, fortunately for such cases a more advanced tools such as Cthuhlu.jl or JET.jl have been developed.","category":"page"},{"location":"lecture_05/lab/#Benchmarking-with-BenchmarkTools","page":"Lab","title":"Benchmarking with BenchmarkTools","text":"","category":"section"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"In the last exercise we have encountered the problem of timing of code to see, if we have made any progress in speeding it up. Throughout the course we will advertise the use of the BenchmarkTools package, which provides an easy way to test your code multiple times. In this lab we will focus on some advanced usage tips and gotchas that you may encounter while using it. ","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"There are few concepts to know in order to understand how the pkg works","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"evaluation - a single execution of a benchmark expression (default 1)\nsample - a single time/memory measurement obtained by running multiple evaluations (default 1e5)\ntrial - experiment in which multiple samples are gathered ","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"The result of a benchmark is a trial in which we collect multiple samples of time/memory measurements, which in turn may be composed of multiple executions of the code in question. This layering of repetition is required to allow for benchmarking code at different runtime magnitudes. Imagine having to benchmark operations which are faster than the act of measuring itself - clock initialization, dispatch of an operation and subsequent time subtraction.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"The number of samples/evaluations can be set manually, however most of the time won't need to know about them, due to an existence of a tuning method tune!, which tries to run the code once to estimate the correct ration of evaluation/samples. ","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"The most commonly used interface of Benchmarkools is the @btime macro, which returns an output similar to the regular @time macro however now aggregated over samples by taking their minimum (a robust estimator for the location parameter of the time distribution, should not be considered an outlier - usually the noise from other processes/tasks puts the results to the other tail of the distribution and some miraculous noisy speedups are uncommon. In order to see the underlying sampling better there is also the @benchmark macro, which runs in the same way as @btime, but prints more detailed statistics which are also returned in the Trial type instead of the actual code output.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"using BenchmarkTools #hide\n@btime sum($(rand(1000)))\n@benchmark sum($(rand(1000)))","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"danger: Interpolation ~ `$` in BenchmarkTools\nIn the previous example we have used the interpolation signs $ to indicate that the code inside should be evaluated once and stored into a local variable. This allows us to focus only on the benchmarking of code itself instead of the input generation. A more subtle way where this is crops up is the case of using previously defined global variable, where instead of data generation we would measure also the type inference at each evaluation, which is usually not what we want. The following list will help you decide when to use interpolation.@btime sum($(rand(1000)))   # rand(1000) is stored as local variable, which is used in each evaluation\n@btime sum(rand(1000))      # rand(1000) is called in each evaluation\nA = rand(1000)\n@btime sum($A)              # global variable A is inferred and stored as local, which is used in each evaluation\n@btime sum(A)               # global variable A has to be inferred in each evaluation","category":"page"},{"location":"lecture_05/lab/#Profiling","page":"Lab","title":"Profiling","text":"","category":"section"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Profiling in Julia is part of the standard library in the Profile module. It implements a fairly simple sampling based profiler, which in a nutshell asks at regular intervals, where the code execution is currently at. As a result we get an array of stacktraces (= chain of function calls), which allow us to make sense of where the execution spent the most time. The number of samples, that can be stored and the period in seconds can be checked after loading Profile into the session with the init() function.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"using Profile\nProfile.init()","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"The same function, but with keyword arguments, can be used to change these settings, however these settings are system dependent. For example on Windows, there is a known issue that does not allow to sample faster than at 0.003s and even on Linux based system this may not do much. There are some further caveat specific to Julia:","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"When running profile from REPL, it is usually dominated by the interactive part which spawns the task and waits for it's completion.\nCode has to be run before profiling in order to filter out all the type inference and interpretation stuff. (Unless compilation is what we want to profile.)\nWhen the execution time is short, the sampling may be insufficient -> run multiple times.","category":"page"},{"location":"lecture_05/lab/#Polynomial-with-scalars","page":"Lab","title":"Polynomial with scalars","text":"","category":"section"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Let's look at our favorite polynomial function or rather it's type stable variant polynomial_stable under the profiling lens.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Profile.clear() # clear the last trace (does not have to be run on fresh start)\n@profile polynomial_stable(a, xf)\nProfile.print() # text based output of the profiler","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Unless the machine that you run the code on is really slow, the resulting output contains nothing or only some internals of Julia's interactive REPL. This is due to the fact that our polynomial function take only few nanoseconds to run. When we want to run profiling on something, that takes only a few nanoseconds, we have to repeatedly execute the function.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"function run_polynomial_stable(a, x, n) \n    for _ in 1:n\n        polynomial_stable(a, x)\n    end\nend\n\na = rand(-10:10, 10) # using longer polynomial\n\nrun_polynomial_stable(a, xf, 10) #hide\nProfile.clear()\n@profile run_polynomial_stable(a, xf, Int(1e5))\nProfile.print()","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"In order to get more of a visual feel for profiling, there are packages that allow you to generate interactive plots or graphs. In this lab we will use ProfileSVG.jl, which does not require any fancy IDE or GUI libraries.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"using ProfileSVG\nProfileSVG.set_default(width=777, height=555) #hide\nProfileSVG.save(\"./profile_poly.svg\") # can work with already created traces\nProfileSVG.view() #hide","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Let's compare this with the type unstable situation.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"First let's define the function that allows us to run the polynomial multiple times.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"function run_polynomial(a, x, n) \n    for _ in 1:n\n        polynomial(a, x)\n    end\nend","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"run_polynomial(a, xf, 10) #hide\n@profview run_polynomial(a, xf, Int(1e5)) # clears the profile for us\nProfileSVG.save(\"./profile_poly_unstable.svg\") #hide\nnothing #hide","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"(Image: profile_unstable)","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Other options for viewing profiler outputs","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"ProfileView - close cousin of ProfileSVG, spawns GTK window with interactive FlameGraph\nVSCode - always imported @profview macro, flamegraphs (js extension required), filtering, one click access to source code \nPProf - serializes the profiler output to protobuffer and loads it in pprof web app, graph visualization of stacktraces","category":"page"},{"location":"lecture_05/lab/#horner","page":"Lab","title":"Applying fixes","text":"","category":"section"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"We have noticed that no matter if the function is type stable or unstable the majority of the computation falls onto the power function ^ and there is a way to solve this using a clever technique called Horner schema[1], which uses distributive and associative rules to convert the sum of powers into an incremental multiplication of partial results.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Rewrite the polynomial function using the Horner schema/method[1]. Moreover include the type stability fixes from polynomial_stable You should get more than 3x speedup when measured against the old implementation (measure polynomial against polynomial_stable.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"BONUS: Profile the new method and compare the differences in traces.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"[1]: Explanation of the Horner schema can be found on https://en.wikipedia.org/wiki/Horner%27s_method.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"function polynomial(a, x)\n    accumulator = a[end] * one(x)\n    for i in length(a)-1:-1:1\n        accumulator = accumulator * x + a[i]\n    end\n    accumulator  \nend","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Speed up:","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"42ns -> 12ns ~ 3.5x on integer valued input \n420ns -> 12ns ~ 15x on real valued input","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"@btime polynomial($a, $x)\n@btime polynomial_stable($a, $x)\n@btime polynomial($a, $xf)\n@btime polynomial_stable($a, $xf)","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"These numbers will be different on different HW.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"BONUS: The profile trace does not even contain the calling of mathematical operators and is mainly dominated by the iteration utilities. In this case we had to increase the number of runs to 1e6 to get some meaningful trace.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"run_polynomial(a, xf, 10) #hide\n@profview run_polynomial(a, xf, Int(1e6))\nProfileSVG.save(\"./profile_poly_horner.svg\") #hide","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"(Image: profile_horner)","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_05/lab/#Ecosystem-debugging","page":"Lab","title":"Ecosystem debugging","text":"","category":"section"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Let's now apply what we have learned so far on the much bigger codebase of our Ecosystem and EcosystemCore packages. ","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"note: Installation of Ecosystem pkg\nIf you do not have Ecosystem readily available you can get it from our repository.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"using Scientific_Programming_in_Julia.Ecosystem #hide\nusing Profile, ProfileSVG\n\nfunction create_world()\n    n_grass       = 500\n    regrowth_time = 17.0\n\n    n_sheep         = 100\n    Δenergy_sheep   = 5.0\n    sheep_reproduce = 0.5\n    sheep_foodprob  = 0.4\n\n    n_wolves       = 8\n    Δenergy_wolf   = 17.0\n    wolf_reproduce = 0.03\n    wolf_foodprob  = 0.02\n\n    gs = [Grass(id, regrowth_time) for id in 1:n_grass];\n    ss = [Sheep(id, 2*Δenergy_sheep, Δenergy_sheep, sheep_reproduce, sheep_foodprob) for id in n_grass+1:n_grass+n_sheep];\n    ws = [Wolf(id, 2*Δenergy_wolf, Δenergy_wolf, wolf_reproduce, wolf_foodprob) for id in n_grass+n_sheep+1:n_grass+n_sheep+n_wolves];\n    World(vcat(gs, ss, ws))\nend\nworld = create_world();\nnothing #hide","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Precompile everything by running one step of our simulation and run the profiler.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"simulate!(world, 1)\n@profview simulate!(world, 100)","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"(Image: profile_ecosim_100)","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Red bars indicate type instabilities however, unless the bars stacked on top of them are high, narrow and not filling the whole width, the problem should not be that serious. In our case the worst offender is thefilter method inside EcosystemCore.find_rand function, either when called from EcosystemCore.find_food or EcosystemCore.find_mate. In both cases the bars on top of it are narrow and not the full with, meaning that not that much time has been really spend working, but instead inferring the types in the function itself during runtime.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"# original\nfunction EcosystemCore.find_rand(f, w::World)\n    xs = filter(f, w.agents |> values |> collect)\n    isempty(xs) ? nothing : sample(xs)\nend","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Looking at the original code, we may not know exactly what is the problem, however the red color indicates that the code may be type unstable. Let's see if that is the case by evaluation the function with some isolated inputs.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"using InteractiveUtils #hide\nusing Scientific_Programming_in_Julia.Ecosystem.EcosystemCore #hide\nw = Wolf(1, 20.0, 10.0, 0.9, 0.75)                  # get an instance of a wolf\nf = x -> EcosystemCore.eats(w, x)                   # define the filter function used in the `find_rand`\nEcosystemCore.find_rand(f, world)                   # check that it returns what we want\n@code_warntype EcosystemCore.find_rand(f, world)    # check type stability","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Indeed we see that the return type is not inferred precisely but ends up being just the Union{Nothing, Agent}, however this is better than straight out Any, which is the union of all types and thus the compiler has to search much wider space. This uncertainty is propagated further resulting in the two parent functions to be inferred imperfectly.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"@code_warntype EcosystemCore.find_food(w, world)\n@code_warntype EcosystemCore.find_mate(w, world)","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"The underlying issue here is that we are enumerating over an array of type Vector{Agent}, where Agent is abstract, which does not allow Julia compiler to specialize the code for the loop body as it has to always check first the type of the item in the vector. This is even more pronounced in the filter function that filters the array by creating a copy of their elements, thus needing to know what the resulting array should look like.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Replace the filter function in EcosystemCore.find_rand with a different mechanism, which does not suffer from the same performance problems as viewed by the profiler. Use the simulation of 100 steps to see the difference.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Use temporary patching by redefine the function in the current REPL session, i.e. write the function fully specified","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"function EcosystemCore.find_rand(f, w::World)\n    ...\nend","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"BONUS: Explore the algorithmic side of things by implementing a different sampling strategies [2][3].","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"[2]: Reservoir sampling https://en.wikipedia.org/wiki/Reservoir_sampling","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"[3]: A simple algorithm https://stackoverflow.com/q/9690009","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"There are a few alterations, which we can try.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"using StatsBase: shuffle!\nfunction EcosystemCore.find_rand(f, w::World)\n    for i in shuffle!(collect(keys(w.agents)))\n        a = w.agents[i]\n        f(a) && return a\n    end\n    return nothing\nend","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"world = create_world();\nsimulate!(world, 1)\n@profview simulate!(world, 100)","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"(Image: profile_ecosim_100_nofilter_1)","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Let's try something that should does not allocate","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"function EcosystemCore.find_rand(f, w::World)\n    count = 1\n    selected = nothing\n    for a in values(w.agents)\n        if f(a) \n            if rand() * count < 1\n                selected = a\n            end\n            count += 1\n        end\n    end\n    selected\nend","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"world = create_world();\nsimulate!(world, 1)\n@profview simulate!(world, 100)","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"(Image: ./profile_ecosim_100_nofilter_2)","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"We have tried a few variants, however none of them really gets rid of the underlying problem. The solution unfortunately requires rewriting the World and other bits, such that the iteration never goes over an array of mixed types. Having said this we may still be interested in a solution that performs the best, given the current architecture.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Benchmark different versions of the find_rand function in a simulation 10 steps. In order for this comparison to be fair, we need to ensure that both the initial state of the World as well as all calls to the Random library stay the same.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"HINTS:","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"use Random.seed! to fix the global random number generator before each run of simulation\nuse setup keyword and deepcopy to initiate the world variable to the same state in each evaluation (see resources at the end of this page for more information)","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Run the following code for each version to find some differences. ","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"using Random\nworld = create_world();\n@benchmark begin\n    Random.seed!(7); \n    simulate!(w, 10) \nend setup=(w=deepcopy($world)) evals=1 samples=20 seconds=30","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Recall that when using setup, we have to limit number of evaluations to evals=1 in order not to mutate the world struct.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_05/lab/#Tracking-allocations","page":"Lab","title":"Tracking allocations","text":"","category":"section"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Memory allocation is oftentimes the most CPU heavy part of the computation, thus working with memory correctly, i.e. avoiding unnecessary allocation is key for a well performing code. In order to get a sense of how much memory is allocated at individual places of the your codebase, we can instruct Julia to keep track of the allocations with a command line option --track-allocation={all|user}","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"user - measure memory allocation everywhere except Julia's core code\nall - measure memory allocation at each line of Julia code","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"After exiting, Julia will create a copy of each source file, that has been touched during execution and assign to each line the number of allocations in bytes. In order to avoid including allocation from compilation the memory allocation statistics have to be cleared after first run by calling Profile.clear_malloc_data(), resulting in this kind of workflow","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"using Profile\nrun_code()\nProfile.clear_malloc_data()\nrun_code()\n# exit julia","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"run_code can be replaced by inclusion of a script file, which will be the annotated as well.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Transform the simulation code above into a script and include it into a new Julia session","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"julia --track-allocation=user","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Use the steps above to obtain a memory allocation map. Investigate the results of allocation tracking inside EcosystemCore source files. Where is the line with the most allocations?","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"HINT: In order to locate source files consult the useful resources at the end of this page. BONUS: Use pkg Coverage.jl to process the resulting files from withing the EcosystemCore.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"The script called sim.jl","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"using Ecosystem \n\nfunction create_world()\n    n_grass       = 500\n    regrowth_time = 17.0\n\n    n_sheep         = 100\n    Δenergy_sheep   = 5.0\n    sheep_reproduce = 0.5\n    sheep_foodprob  = 0.4\n\n    n_wolves       = 8\n    Δenergy_wolf   = 17.0\n    wolf_reproduce = 0.03\n    wolf_foodprob  = 0.02\n\n    gs = [Grass(id, regrowth_time) for id in 1:n_grass];\n    ss = [Sheep(id, 2*Δenergy_sheep, Δenergy_sheep, sheep_reproduce, sheep_foodprob) for id in n_grass+1:n_grass+n_sheep];\n    ws = [Wolf(id, 2*Δenergy_wolf, Δenergy_wolf, wolf_reproduce, wolf_foodprob) for id in n_grass+n_sheep+1:n_grass+n_sheep+n_wolves];\n    World(vcat(gs, ss, ws))\nend\nworld = create_world();\nsimulate!(world, 10)","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"How to run.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"using Profile\ninclude(\"./sim.jl\")\nProfile.clear_malloc_data()\ninclude(\"./sim.jl\")","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Pkg Coverage.jl can highlight where is the problem with allocations.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"julia> using Coverage\njulia> analyze_malloc(expanduser(\"~/.julia/packages/EcosystemCore/8dzJF/src\"))\n35-element Vector{CoverageTools.MallocInfo}:\n CoverageTools.MallocInfo(0, \"~/.julia/packages/EcosystemCore/8dzJF/src/animal.jl.498486.mem\", 21)\n CoverageTools.MallocInfo(0, \"~/.julia/packages/EcosystemCore/8dzJF/src/animal.jl.498486.mem\", 22)\n CoverageTools.MallocInfo(0, \"~/.julia/packages/EcosystemCore/8dzJF/src/animal.jl.498486.mem\", 24)\n CoverageTools.MallocInfo(0, \"~/.julia/packages/EcosystemCore/8dzJF/src/animal.jl.498486.mem\", 26)\n CoverageTools.MallocInfo(0, \"~/.julia/packages/EcosystemCore/8dzJF/src/animal.jl.498486.mem\", 27)\n CoverageTools.MallocInfo(0, \"~/.julia/packages/EcosystemCore/8dzJF/src/animal.jl.498486.mem\", 28)\n CoverageTools.MallocInfo(0, \"~/.julia/packages/EcosystemCore/8dzJF/src/animal.jl.498486.mem\", 30)\n CoverageTools.MallocInfo(0, \"~/.julia/packages/EcosystemCore/8dzJF/src/animal.jl.498486.mem\", 31)\n CoverageTools.MallocInfo(0, \"~/.julia/packages/EcosystemCore/8dzJF/src/animal.jl.498486.mem\", 33)\n CoverageTools.MallocInfo(0, \"~/.julia/packages/EcosystemCore/8dzJF/src/animal.jl.498486.mem\", 38)\n CoverageTools.MallocInfo(0, \"~/.julia/packages/EcosystemCore/8dzJF/src/animal.jl.498486.mem\", 41)\n CoverageTools.MallocInfo(0, \"~/.julia/packages/EcosystemCore/8dzJF/src/animal.jl.498486.mem\", 48)\n CoverageTools.MallocInfo(0, \"~/.julia/packages/EcosystemCore/8dzJF/src/animal.jl.498486.mem\", 49)\n CoverageTools.MallocInfo(0, \"~/.julia/packages/EcosystemCore/8dzJF/src/animal.jl.498486.mem\", 59)\n CoverageTools.MallocInfo(0, \"~/.julia/packages/EcosystemCore/8dzJF/src/animal.jl.498486.mem\", 60)\n CoverageTools.MallocInfo(0, \"~/.julia/packages/EcosystemCore/8dzJF/src/animal.jl.498486.mem\", 62)\n CoverageTools.MallocInfo(0, \"~/.julia/packages/EcosystemCore/8dzJF/src/animal.jl.498486.mem\", 64)\n CoverageTools.MallocInfo(0, \"~/.julia/packages/EcosystemCore/8dzJF/src/animal.jl.498486.mem\", 65)\n CoverageTools.MallocInfo(0, \"~/.julia/packages/EcosystemCore/8dzJF/src/plant.jl.498486.mem\", 16)\n CoverageTools.MallocInfo(0, \"~/.julia/packages/EcosystemCore/8dzJF/src/plant.jl.498486.mem\", 17)\n CoverageTools.MallocInfo(0, \"~/.julia/packages/EcosystemCore/8dzJF/src/world.jl.498486.mem\", 14)\n CoverageTools.MallocInfo(0, \"~/.julia/packages/EcosystemCore/8dzJF/src/world.jl.498486.mem\", 15)\n CoverageTools.MallocInfo(0, \"~/.julia/packages/EcosystemCore/8dzJF/src/world.jl.498486.mem\", 16)\n CoverageTools.MallocInfo(16, \"~/.julia/packages/EcosystemCore/8dzJF/src/world.jl.498486.mem\", 9)\n CoverageTools.MallocInfo(32, \"~/.julia/packages/EcosystemCore/8dzJF/src/world.jl.498486.mem\", 2)\n CoverageTools.MallocInfo(32, \"~/.julia/packages/EcosystemCore/8dzJF/src/world.jl.498486.mem\", 8)\n CoverageTools.MallocInfo(288, \"~/.julia/packages/EcosystemCore/8dzJF/src/world.jl.498486.mem\", 7)\n CoverageTools.MallocInfo(3840, \"~/.julia/packages/EcosystemCore/8dzJF/src/world.jl.498486.mem\", 13)\n CoverageTools.MallocInfo(32000, \"~/.julia/packages/EcosystemCore/8dzJF/src/plant.jl.498486.mem\", 13)\n CoverageTools.MallocInfo(69104, \"~/.julia/packages/EcosystemCore/8dzJF/src/animal.jl.498486.mem\", 23)\n CoverageTools.MallocInfo(81408, \"~/.julia/packages/EcosystemCore/8dzJF/src/animal.jl.498486.mem\", 58)\n CoverageTools.MallocInfo(244224, \"~/.julia/packages/EcosystemCore/8dzJF/src/animal.jl.498486.mem\", 2)\n CoverageTools.MallocInfo(488448, \"~/.julia/packages/EcosystemCore/8dzJF/src/animal.jl.498486.mem\", 63)\n CoverageTools.MallocInfo(895488, \"~/.julia/packages/EcosystemCore/8dzJF/src/animal.jl.498486.mem\", 61)\n CoverageTools.MallocInfo(229589792, \"~/.julia/packages/EcosystemCore/8dzJF/src/animal.jl.498486.mem\", 37)","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"","category":"page"},{"location":"lecture_05/lab/#Useful-resources","page":"Lab","title":"Useful resources","text":"","category":"section"},{"location":"lecture_05/lab/#Where-to-find-source-code?","page":"Lab","title":"Where to find source code?","text":"","category":"section"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"As most of Julia is written in Julia itself it is sometimes helpful to look inside for some details or inspiration. The code of Base and stdlib pkgs is located just next to Julia's installation in the ./share/julia subdirectory","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"./julia-1.6.2/\n    ├── bin\n    ├── etc\n    │   └── julia\n    ├── include\n    │   └── julia\n    │       └── uv\n    ├── lib\n    │   └── julia\n    ├── libexec\n    └── share\n        ├── appdata\n        ├── applications\n        ├── doc\n        │   └── julia       # offline documentation (https://docs.julialang.org/en/v1/)\n        └── julia\n            ├── base        # base library\n            ├── stdlib      # standard library\n            └── test","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Other packages installed through Pkg interface are located in the .julia/ directory which is located in your $HOMEDIR, i.e. /home/$(user)/.julia/ on Unix based systems and /Users/$(user)/.julia/ on Windows.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"~/.julia/\n    ├── artifacts\n    ├── compiled\n    ├── config          # startup.jl lives here\n    ├── environments\n    ├── logs\n    ├── packages        # packages are here\n    └── registries","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"If you are using VSCode, the paths visible in the REPL can be clicked through to he actual source code. Moreover in that environment the documentation is usually available upon hovering over code.","category":"page"},{"location":"lecture_05/lab/#Setting-up-benchmarks-to-our-liking","page":"Lab","title":"Setting up benchmarks to our liking","text":"","category":"section"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"In order to control the number of samples/evaluation and the amount of time given to a given benchmark, we can simply append these as keyword arguments to @btime or @benchmark in the following way","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"@benchmark sum($(rand(1000))) evals=100 samples=10 seconds=1","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"which runs the code repeatedly for up to 1s, where each of the 10 samples in the trial is composed of 10 evaluations. Setting up these parameters ourselves creates a more controlled environment in which performance regressions can be more easily identified.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"Another axis of customization is needed when we are benchmarking mutable operations such as sort!, which sorts an array in-place. One way of achieving a consistent benchmark is by omitting the interpolation such as","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"@benchmark sort!(rand(1000))","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"however now we are again measuring the data generation as well. A better way of doing such timing is using the built in setup keyword, into which you can put a code that has to be run before each sample and which won't be measured.","category":"page"},{"location":"lecture_05/lab/","page":"Lab","title":"Lab","text":"@benchmark sort!(y) setup=(y=rand(1000))\nA = rand(1000) #hide\n@benchmark sort!(AA) setup=(AA=copy($A))","category":"page"},{"location":"lecture_06/lecture/#introspection","page":"Lecture","title":"Language introspection","text":"","category":"section"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"What is metaprogramming? A high-level code that writes high-level code by Stever Johnson.","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Why do we need metaprogramming? ","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"In general, we do not need it, as we can do whatever we need without it, but it can help us to remove a boilerplate code. \nAs an example, consider a @show macro, which just prints the name of the variable (or the expression) and its evaluation. This means that instead of writing println(\"2+exp(4) = \",  2+exp(4)) we can just write @show 2+exp(4).\nAnother example is @time or elapsed The above is difficult to implement using normal function, since when you pass 2+exp(4) as a function argument, it will be automatically evaluated. Therefore you need to pass it as an expression, that can be evaluated within the function.\nIt can help when implementing encapsulation.\nDomain Specific Languages","category":"page"},{"location":"lecture_06/lecture/#Stages-of-compilation","page":"Lecture","title":"Stages of compilation","text":"","category":"section"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Julia (as any modern compiler) uses several stages to convert source code to native code. Let's recap them","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"parsing the source code to abstract syntax tree (AST)\nlowering the abstract syntax tree static single assignment form (SSA) see wiki\nassigning types to variables and performing type inference on called functions\nlowering the typed code to LLVM intermediate representation (LLVM Ir)\nusing LLVM compiler to produce a native code.","category":"page"},{"location":"lecture_06/lecture/#Example:-Fibonacci-numbers","page":"Lecture","title":"Example: Fibonacci numbers","text":"","category":"section"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Consider for example a function computing the Fibonacci numbers[1]","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"function nextfib(n)\n\ta, b = one(n), one(n)\n\twhile b < n\n\t\ta, b = b, a + b\n\tend\n\treturn b\nend","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"[1]: From StackOverflow https://stackoverflow.com/questions/43453944/what-is-the-difference-between-code-native-code-typed-and-code-llvm-in-julia","category":"page"},{"location":"lecture_06/lecture/#Parsing","page":"Lecture","title":"Parsing","text":"","category":"section"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"The first thing the compiler does is that it will parse the source code (represented as a string) to the abstract syntax tree (AST). We can inspect the results of this stage as ","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"julia> parsed_fib = Meta.parse(\n\"\"\"\n\tfunction nextfib(n)\n\t\ta, b = one(n), one(n)\n\t\twhile b < n\n\t\t\ta, b = b, a + b\n\t\tend\n\t\treturn b\n\tend\"\"\")\n:(function nextfib(n)\n      #= none:1 =#\n      #= none:2 =#\n      (a, b) = (one(n), one(n))\n      #= none:3 =#\n      while b < n\n          #= none:4 =#\n          (a, b) = (b, a + b)\n      end\n      #= none:6 =#\n      return b\n  end)","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"AST is a tree representation of the source code, where the parser has already identified individual code elements function call, argument blocks, etc. The parsed code is represented by Julia objects, therefore it can be read and modified by Julia from Julia at your wish (this is what is called homo-iconicity of a language the itself being derived from Greek words homo- meaning \"the same\" and icon meaning \"representation\"). Using TreeView","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"using TreeView, TikzPictures\ng = tikz_representation(walk_tree(parsed_fib))\nTikzPictures.save(SVG(\"parsed_fib.svg\"), g)","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"(Image: parsed_fib.svg)","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"We can see that the AST is indeed a tree, with function being the root node (caused by us parsing a function). Each inner node represents a function call with children of the inner node being its arguments. An interesting inner node is the Block representing a sequence of statements, where we can also see information about lines in the source code inserted as comments. Lisp-like S-Expression can be printed using Meta.show_sexpr(parsed_fib).","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"(:function, (:call, :nextfib, :n), (:block,\n    :(#= none:1 =#),\n    :(#= none:2 =#),\n    (:(=), (:tuple, :a, :b), (:tuple, (:call, :one, :n), (:call, :one, :n))),\n    :(#= none:3 =#),\n    (:while, (:call, :<, :b, :n), (:block,\n        :(#= none:4 =#),\n        (:(=), (:tuple, :a, :b), (:tuple, :b, (:call, :+, :a, :b)))\n      )),\n    :(#= none:6 =#),\n    (:return, :b)\n  ))","category":"page"},{"location":"lecture_06/lecture/#Lowering","page":"Lecture","title":"Lowering","text":"","category":"section"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"The next stage is lowering, where AST is converted to Static Single Assignment Form (SSA), in which \"each variable is assigned exactly once, and every variable is defined before it is used\". Loops and conditionals are transformed into gotos and labels using a single unless/goto construct (this is not exposed in user-level Julia).","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"julia> @code_lowered nextfib(3)\nCodeInfo(\n1 ─ %1 = Main.one(n)\n│   %2 = Main.one(n)\n│        a = %1\n└──      b = %2\n2 ┄ %5 = b < n\n└──      goto #4 if not %5\n3 ─ %7 = b\n│   %8 = a + b\n│        a = %7\n│        b = %8\n└──      goto #2\n4 ─      return b\n)","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"or alternatively lowered_fib = Meta.lower(@__MODULE__, parsed_fib). ","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"We can see that ","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"compiler has introduced a lot of variables \nwhile (and for) loops has been replaced by a goto prepended by conditional statements","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"For inserted debugging information, there is an option to pass keyword argument debuginfo=:source.  ","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"julia> @code_lowered debuginfo=:source nextfib(3)\nCodeInfo(\n    @ none:2 within `nextfib'\n1 ─ %1 = Main.one(n)\n│   %2 = Main.one(n)\n│        a = %1\n└──      b = %2\n    @ none:3 within `nextfib'\n2 ┄ %5 = b < n\n└──      goto #4 if not %5\n    @ none:4 within `nextfib'\n3 ─ %7 = b\n│   %8 = a + b\n│        a = %7\n│        b = %8\n└──      goto #2\n    @ none:6 within `nextfib'\n4 ─      return b\n)","category":"page"},{"location":"lecture_06/lecture/#Code-Typing","page":"Lecture","title":"Code Typing","text":"","category":"section"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Code typing is the process in which the compiler attaches types to variables and tries to infer types of objects returned from called functions. If the compiler fails to infer the returned type, it will give the variable type Any, in which case a dynamic dispatch will be used in subsequent operations with the variable. Inspecting typed code is therefore important for detecting type instabilities (the process can be difficult and error prone, fortunately, new tools like Jet.jl may simplify this task). The output of typing can be inspected using @code_typed macro. If you know the types of function arguments, aka function signature, you can call directly function InteractiveUtils.code_typed(nextfib, (typeof(3),)).","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"julia> @code_typed nextfib(3)\nCodeInfo(\n1 ─      nothing::Nothing\n2 ┄ %2 = φ (#1 => 1, #3 => %6)::Int64\n│   %3 = φ (#1 => 1, #3 => %2)::Int64\n│   %4 = Base.slt_int(%2, n)::Bool\n└──      goto #4 if not %4\n3 ─ %6 = Base.add_int(%3, %2)::Int64\n└──      goto #2\n4 ─      return %2\n) => Int64","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"We can see that ","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"some calls have been inlined, e.g. one(n) was replaced by 1 and the type was inferred as Int. \nThe expression b < n has been replaced with its implementation in terms of the slt_int intrinsic (\"signed integer less than\") and the result of this has been annotated with return type Bool. \nThe expression a + b has been also replaced with its implementation in terms of the add_int intrinsic and its result type annotated as Int64. \nAnd the return type of the entire function body has been annotated as Int64.\nThe phi-instruction %2 = φ (#1 => 1, #3 => %6) is a selector function, which returns the value depending on from which branch do you come from. In this case, variable %2 will have value 1, if the control was transfered from block #1 and it will have value copied from variable %6 if the control was transferreed from block 3 see also. The φ stands from phony variable.","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"When we have called @code_lower, the role of types of arguments was in selecting - via multiple dispatch - the appropriate function body among different methods. Contrary in @code_typed, the types of parameters determine the choice of inner methods that need to be called (again with multiple dispatch). This process can trigger other optimization, such as inlining, as seen in the case of one(n) being replaced with 1 directly, though here this replacement is hidden in the φ function. ","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Note that the same view of the code is offered by the @code_warntype macro, which we have seen in the previous lecture. The main difference from @code_typed is that it highlights type instabilities with red color and shows only unoptimized view of the code. You can view the unoptimized code with a keyword argument optimize=false:","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"julia> @code_typed optimize=false nextfib(3)\nCodeInfo(\n1 ─ %1 = Main.one(n)::Core.Const(1)\n│   %2 = Main.one(n)::Core.Const(1)\n│        (a = %1)::Core.Const(1)\n└──      (b = %2)::Core.Const(1)\n2 ┄ %5 = (b < n)::Bool\n└──      goto #4 if not %5\n3 ─ %7 = b::Int64\n│   %8 = (a + b)::Int64\n│        (a = %7)::Int64\n│        (b = %8)::Int64\n└──      goto #2\n4 ─      return b\n) => Int64","category":"page"},{"location":"lecture_06/lecture/#Lowering-to-LLVM-IR","page":"Lecture","title":"Lowering to LLVM IR","text":"","category":"section"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Julia uses the LLVM compiler framework to generate machine code. LLVM stands for low-level virtual machine and it is basis of many modern compilers (see wiki). We can see the textual form of code lowered to LLVM IR by invoking ","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"julia> @code_llvm debuginfo=:source nextfib(3)\n;  @ REPL[10]:1 within `nextfib'\ndefine i64 @julia_nextfib_890(i64 signext %0) {\ntop:\n  br label %L2\n\nL2:                                               ; preds = %L2, %top\n  %value_phi  = phi i64 [ 1, %top ], [ %1, %L2 ]\n  %value_phi1 = phi i64 [ 1, %top ], [ %value_phi, %L2 ]\n;  @ REPL[10]:3 within `nextfib'\n; ┌ @ int.jl:83 within `<'\n   %.not = icmp slt i64 %value_phi, %0\n; └\n;  @ REPL[10]:4 within `nextfib'\n; ┌ @ int.jl:87 within `+'\n   %1 = add i64 %value_phi1, %value_phi\n; └\n;  @ REPL[10]:3 within `nextfib'\n  br i1 %.not, label %L2, label %L8\n\nL8:                                               ; preds = %L2\n;  @ REPL[10]:6 within `nextfib'\n  ret i64 %value_phi\n}","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"LLVM code can be tricky to understand first, but one gets used to it. Notice references to the source code, which help with orientation. From the code above, we may infer","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"code starts by jumping to label L2, from where it reads values of two variables to two \"registers\" value_phi and value_phi1 (variables in LLVM starts with %). \nBoth registers are treated as int64 and initialized by 1. \n[ 1, %top ], [ %value_phi, %L2 ] means that values are initialized as 1 if you come from the label top and as value value_phi if you come from %2. This is the LLVM's selector (phony φ).\nicmp slt i64 %value_phi, %0 compares the variable %value_phi to the content of variable %0. Notice the anotation that we are comparing Int64.\n%1 = add i64 %value_phi1, %value_phi adds two variables %value_phi1 and %value_phi. Note again than we are using Int64 addition. \nbr i1 %.not, label %L2, label %L8 implements a conditional jump depending on the content of %.not variable. \nret i64 %value_phi returns the value indicating it to be an Int64.","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"It is not expected you will be directly operating on the LLVM code, though there are libraries which does that. For example Enzyme.jl performs automatic differentiation of LLVM code, which has the benefit of being able to take a gradeint through setdiff.","category":"page"},{"location":"lecture_06/lecture/#Producing-the-native-vode","page":"Lecture","title":"Producing the native vode","text":"","category":"section"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Native code The last stage is generation of the native code, which Julia executes. The native code depends on the target architecture (e.g. x86, ARM). As in previous cases there is a macro for viewing the compiled code @code_native","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"julia> @code_native debuginfo=:source nextfib(3)\n\t.section\t__TEXT,__text,regular,pure_instructions\n; ┌ @ REPL[10]:1 within `nextfib'\n\tmovl\t$1, %ecx\n\tmovl\t$1, %eax\n\tnopw\t(%rax,%rax)\nL16:\n\tmovq\t%rax, %rdx\n\tmovq\t%rcx, %rax\n; │ @ REPL[10]:4 within `nextfib'\n; │┌ @ int.jl:87 within `+'\n\taddq\t%rcx, %rdx\n\tmovq\t%rdx, %rcx\n; │└\n; │ @ REPL[10]:3 within `nextfib'\n; │┌ @ int.jl:83 within `<'\n\tcmpq\t%rdi, %rax\n; │└\n\tjl\tL16\n; │ @ REPL[10]:6 within `nextfib'\n\tretq\n\tnopw\t%cs:(%rax,%rax)\n; └","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"and the output is used mainly for debugging / inspection. ","category":"page"},{"location":"lecture_06/lecture/#Looking-around-the-language","page":"Lecture","title":"Looking around the language","text":"","category":"section"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Language introspection is very convenient for investigating, how things are implemented and how they are optimized / compiled to the native code.","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"note: Reminder `@which`\nThough we have already used it quite a few times, recall the very useful macro @which, which identifies the concrete function called in a function call. For example @which mapreduce(sin, +, [1,2,3,4]). Note again that the macro here is a convenience macro to obtain types of arguments from the expression. Under the hood, it calls InteractiveUtils.which(function_name, (Base.typesof)(args...)). Funnily enough, you can call @which InteractiveUtils.which(+, (Base.typesof)(1,1)) to inspect, where which is defined.","category":"page"},{"location":"lecture_06/lecture/#Broadcasting","page":"Lecture","title":"Broadcasting","text":"","category":"section"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Broadcasting is not a unique concept in programming languages (Python/Numpy, MATLAB), however its implementation in Julia allows to easily fuse operations. For example ","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"x = randn(100)\nsin.(x) .+ 2 .* cos.(x) .+ x","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"is all computed in a single loop. We can inspect, how this is achieved in the lowered code:","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"julia> Meta.@lower sin.(x) .+ 2 .* cos.(x) .+ x\n:($(Expr(:thunk, CodeInfo(\n    @ none within `top-level scope'\n1 ─ %1 = Base.broadcasted(sin, x)\n│   %2 = Base.broadcasted(cos, x)\n│   %3 = Base.broadcasted(*, 2, %2)\n│   %4 = Base.broadcasted(+, %1, %3)\n│   %5 = Base.broadcasted(+, %4, x)\n│   %6 = Base.materialize(%5)\n└──      return %6\n))))","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Notice that we have not used the usual @code_lowered macro, because the statement to be lowered is not a function call. In these cases, we have to use @code_lowered, which can handle more general program statements. On these cases, we cannot use @which either, as that applies to function calls only as well.","category":"page"},{"location":"lecture_06/lecture/#Generators","page":"Lecture","title":"Generators","text":"","category":"section"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Meta.@lower [x for x in 1:4]\n:($(Expr(:thunk, CodeInfo(\n    @ none within `top-level scope'\n1 ─ %1 = 1:4\n│   %2 = Base.Generator(Base.identity, %1)\n│   %3 = Base.collect(%2)\n└──      return %3\n))))","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"from which we see that the Generator is implemented using the combination of a Base.collect, which is a function collecting items of a sequence and Base.Generator(f,x), which implements an iterator, which applies function f on elements of x over which is being iterated. So an almost magical generators have instantly lost their magic.","category":"page"},{"location":"lecture_06/lecture/#Closures","page":"Lecture","title":"Closures","text":"","category":"section"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"adder(x) = y -> y + x\n\njulia> @code_lowered adder(5)\nCodeInfo(\n1 ─ %1 = Main.:(var\"#8#9\")\n│   %2 = Core.typeof(x)\n│   %3 = Core.apply_type(%1, %2)\n│        #8 = %new(%3, x)\n└──      return #8\n)","category":"page"},{"location":"lecture_06/lecture/#The-effect-of-type-instability","page":"Lecture","title":"The effect of type-instability","text":"","category":"section"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"struct Wolf\n\tname::String\n\tenergy::Int\nend\n\nstruct Sheep\n\tname::String\n\tenergy::Int\nend\n\nsound(wolf::Wolf) = println(wolf.name, \" has howled.\")\nsound(sheep::Sheep) = println(sheep.name, \" has baaed.\")\nstable_pack   = (Wolf(\"1\", 1), Wolf(\"2\", 2), Sheep(\"3\", 3))\nunstable_pack = [Wolf(\"1\", 1), Wolf(\"2\", 2), Sheep(\"3\", 3)]\n@code_typed map(sound, stable_pack)\n@code_typed map(sound, unstable_pack)","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"info: Info\nCthulhu.jlCthulhu.jl is a library (tool) which simplifies the above, where we want to iteratively dive into functions called in some piece of code (typically some function). Cthulhu is different from te normal debugger, since the debugger is executing the code, while Cthulhu is just lower_typing the code and presenting functions (with type of arguments inferred).","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"using Cthulhu\n@descend map(sound, unstable_pack)","category":"page"},{"location":"lecture_06/lecture/#General-notes-on-metaprogramming","page":"Lecture","title":"General notes on metaprogramming","text":"","category":"section"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"According to an excellent talk by Steven Johnson, you should use metaprogramming sparingly, because on one hand it's very powerful, but  on the other it is generally difficult to read and it can lead to unexpected errors. Julia allows you to interact with the compiler at two different levels.","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"After the code is parsed to AST, you can modify it directly or through macros.\nWhen SSA form is being typed, you can create custom functions using the concept of generated functions.","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"More functionalities are coming through the JuliaCompilerPlugins project, but we will not talk about them (yet). ","category":"page"},{"location":"lecture_06/lecture/#What-is-Quotation?","page":"Lecture","title":"What is Quotation?","text":"","category":"section"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"When we are doing metaprogramming, we need to somehow tell the compiler that the next block of code is not a normal block of code to be executed, but that it should be interpreted as data and in any sense it should not be evaluated. Quotation refers to exactly this syntactic sugar. In Julia, quotation is achieved either through :(...) or quote ... end.","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Notice the difference between","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"1 + 1 ","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"and ","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":":(1 + 1)","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"The type returned by the quotation depends on what is quoted. Observe the returned type of the following quoted code","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":":(1)\t\t\t|> typeof\n:(:x)\t\t \t|> typeof\n:(1 + x) \t\t|> typeof\nquote\n    1 + x\n    x + 1\nend \t\t\t|> typeof","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"All of these snippets are examples of the quoted code, but only :(1 + x) and the quote block produce objects of type Expr. An interesting return type is the QuoteNode, which allows to insert piece of code which should contain elements that should not be interpolated. Most of the time, quoting returns Expressions.","category":"page"},{"location":"lecture_06/lecture/#Expressions","page":"Lecture","title":"Expressions","text":"","category":"section"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Abstract Syntax Tree, the output of Julia's parser, is expressed using Julia's own datastructures, which means that you can freely manipulate it (and constructed) from the language itself. This property is called homoiconicity. Julia's compiler allows you to intercept compilation just after it has parsed the source code. Before we will take advantage of this power, we should get familiar with the strucute of the AST.","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"The best way to inspect the AST is through the combination ","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Meta.parse,  which parses the source code to AST, \ndump which print AST to terminal, \neval which evaluates the AST within the current module.","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Let's start by investigating a very simple statement 1 + 1, whose AST can be constructed either by Meta.parse(\"1 + 1\") or :(1 + 1) or quote 1+1 end (the last one includes also the line information metadata).","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"julia> p = :(1+1)\n:(1 + 1)\n\njulia> typeof(p)\nExpr\n\njulia> dump(p)\nExpr\n  head: Symbol call\n  args: Array{Any}((3,))\n    1: Symbol +\n    2: Int64 1\n    3: Int64 1","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"The parsed code p is of type Expr, which according to Julia's help[2] is a type representing compound expressions in parsed julia code (ASTs). Each expression consists: of a head Symbol identifying which kind of expression it is (e.g. a call, for loop, conditional statement, etc.), and subexpressions (e.g. the arguments of a call). The subexpressions are stored in a Vector{Any} field called args. If you recall the figure above, where AST was represented as a tree, head gives each node the name name args are either some parameters of the node, or they point to childs of that node. The interpretation of the node depends on the its type stored in head (note that the word type used here is not in the Julia sense).","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"[2]: https://docs.julialang.org/en/v1/base/base/#Core.Expr","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"info: `Symbol` type\nWhen manipulations of expressions, we encounter the term Symbol. Symbol is the smallest atom from which the program (in AST representation) is built. It is used to identify an element in the language, for example variable, keyword or function name. Symbol is not a string, since string represents itself, whereas Symbol can represent something else (a variable). An illustrative example[3] goes as follows.julia> eval(:foo)\nERROR: foo not defined\n\njulia> foo = \"hello\"\n\"hello\"\n\njulia> eval(:foo)\n\"hello\"\n\njulia> eval(\"foo\")\n\"foo\"which shows that what the symbol :foo evaluates to depends on what – if anything – the variable foo is bound to, whereas \"foo\" always just evaluates to \"foo\".Symbols can be constructed either by prepending any string with : or by calling Symbol(...), which concatenates the arguments and create the symbol out of it. All of the following are symbolsjulia> :+\n:+\n\njulia> :function\n:function\n\njulia> :call\n:call\n\njulia> :x\n:x\n\njulia> Symbol(:Very,\"_twisted_\",:symbol,\"_definition\")\n:Very_twisted_symbol_definition\n\njulia> Symbol(\"Symbol with blanks\")\nSymbol(\"Symbol with blanks\")Symbols therefore allows us to operate with a piece of code without evaluating it.In Julia, symbols are \"interned strings\", which means that compiler attaches each string a unique identifier (integer), such that it can quickly compare them. Compiler uses Symbols exclusively and the important feature is that they can be quickly compared. This is why people like to use them as keys in Dict.","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"[3]: An example provided by Stefan Karpinski https://stackoverflow.com/questions/23480722/what-is-a-symbol-in-julia","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"info: `Expr`essions\nFrom Julia's help[2]:Expr(head::Symbol, args...)A type representing compound expressions in parsed julia code (ASTs). Each expression consists of a head Symbol identifying which kind of expression it is (e.g. a call, for loop, conditional statement, etc.), and subexpressions (e.g. the arguments of a call). The subexpressions are stored in a Vector{Any} field called args. The expression is simple yet very flexible. The head Symbol tells how the expression should be treated and arguments provide all needed parameters. Notice that the structure is also type-unstable. This is not a big deal, since the expression is used to generate code, hence it is not executed repeatedly.","category":"page"},{"location":"lecture_06/lecture/#Construct-code-from-scratch","page":"Lecture","title":"Construct code from scratch","text":"","category":"section"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Since Expr is a Julia structure, we can construct it manually as we can construct any other structure","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"julia> Expr(:call, :+, 1 , 1) |> dump\nExpr\n  head: Symbol call\n  args: Array{Any}((3,))\n    1: Symbol +\n    2: Int64 1\n    3: Int64 1","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"yielding to the same structure as we have created above.  Expressions can be evaluated using eval, as has been said. to programmatically evaluate our expression, let's do ","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"e = Expr(:call, :+, 1, 1)\neval(e)","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"We are free to use variables (identified by symbols) inside the expression ","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"e = Expr(:call, :+, :x, 5)\neval(e)","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"but unless they are not defined within the scope, the expression cannot produce a meaningful result","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"x = 3\neval(e)","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":":(1 + sin(x)) == Expr(:call, :+, 1, Expr(:call, :sin, :x))","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Since the expression is a Julia structure, we are free to manipulate it. Let's for example substitutue x in  e = :(x + 5) with 2x.","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"e = :(x + 5)\ne.args = map(e.args) do a \n\ta == :x ?  Expr(:call, :*, 2, :x) : a \nend","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"or ","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"e = :(x + 5)\ne.args = map(e.args) do a \n\ta == :x ? :(2*x) : a \nend","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"and verify that the results are correct.","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"julia> dump(e)\nExpr\n  head: Symbol call\n  args: Array{Any}((3,))\n    1: Symbol +\n    2: Expr\n      head: Symbol call\n      args: Array{Any}((3,))\n        1: Symbol *\n        2: Int64 2\n        3: Symbol x\n    3: Int64 5\n\njulia> eval(e)\n11","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"As already mentioned, the manipulation of Expression can be arbitrary. In the above example, we have been operating directly on the arguments. But what if x would be deeper in the expression, as for example in 2(3 + x) + 2(2 - x)? We can implement the substitution using multiple dispatch as we would do when implementing any other function in Julia.","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"replace_x(x::Symbol) = x == :x ? :(2*x) : x\nreplace_x(e::Expr) = Expr(e.head, map(replace_x, e.args)...)\nreplace_x(u) = u","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"which works as promised.","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"julia> e = :(2(3 + 2x) + 2(2 - x))\n:(2 * (3 + x) + 2 * (2 - x))\njulia> f = replace_x(e)\n:(2 * (3 + 2x) + 2 * (2 - 2x))","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"or we can replace the sin function","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"replace_sin(x::Symbol) = x == :sin ? :cos : x\nreplace_sin(e::Expr) = Expr(e.head, map(replace_sin, e.args)...)\nreplace_sin(u) = u","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"replace_sin(:(1 + sin(x)))","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Sometimes, we want to operate on a block of code as opposed to single line expressions. Recall that a block of code is defined-quoted with quote ... end. Let us see how replace_x can handle the following example:","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"e = quote \n\ta = x + 3\n\tb = 2 - x\n\t2a + 2b\nend","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"julia> replace_x(e) |> Base.remove_linenums!\nquote\n    a = 2x + 3\n    b = 2 - 2x\n    2a + 2b\nend\n\njulia> replace_x(e) |> eval\n10","category":"page"},{"location":"lecture_06/lecture/#Brittleness-of-code-manipulation","page":"Lecture","title":"Brittleness of code manipulation","text":"","category":"section"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"When we are manipulating the AST or creating new expressions from scratch, there is no syntactic validation performed by the parser. It is therefore very easy to create AST which does not make any sense and cannot be compiled. We have already seen that we can refer to variables that were not defined yet (this makes perfect sense). The same goes with functions (which also makes a lot of sense).","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"e = :(g() + 5)\neval(e)\ng() = 5\neval(e)","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"But we can also introduce keywords which the language does not know. For example ","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"e = Expr(:my_keyword, 1, 2, 3)\n:($(Expr(:my_keyword, 1, 2, 3)))\n\njulia> e.head\n:my_keyword\n\njulia> e.args\n3-element Vector{Any}:\n 1\n 2\n 3\n\njulia> eval(e)\nERROR: syntax: invalid syntax (my_keyword 1 2 3)\nStacktrace:\n [1] top-level scope\n   @ none:1\n [2] eval\n   @ ./boot.jl:360 [inlined]\n [3] eval(x::Expr)\n   @ Base.MainInclude ./client.jl:446\n [4] top-level scope\n   @ REPL[8]:1","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"notice that error is not related to undefined variable / function, but the invalid syntax. This also demonstrates the role of head in Expr. More on Julia AST can be found in the developer documentation.","category":"page"},{"location":"lecture_06/lecture/#Alternative-way-to-look-at-code","page":"Lecture","title":"Alternative way to look at code","text":"","category":"section"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Meta.parse(\"x[3]\") |> dump","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"We can see a new Symbol ref as a head and the position 3 of variable x.","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Meta.parse(\"(1,2,3)\") |> dump","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Meta.parse(\"1/2/3\") |> dump","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"<!– ### Algebraic expansion with macro","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"function match_sin_xy(ex::Expr) \n\tex.head != :call && return(false)\n\tlength(ex.args) != 2 && return(false)\n\tex.args[1] != :sin && return(false)\n\t!(ex.args[2] isa Expr) && return(false)\n\tix = ex[2]\n\tix.head != :call && return(false)\n\tlength(ix.args) != 3 && return(false)\n\tix.args[1] != :+ && return(false)\nend\n\nfunction rewrite_sin_xy(ex::Expr) \n\tex.head != :call && return(false)\n\tlength(ex.args) != 2 && return(false)\n\tex.args[1] != :sin && return(false)\n\t!(ex.args[2] isa Expr) && return(false)\n\tix = ex[2]\n\tix.head != :call && return(false)\n\tlength(ix.args) != 3 && return(false)\n\tix.args[1] != :+ && return(false)\nend\n\nexpand_sin_xy(:(sin(x + 2*(z + y))))","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"–>","category":"page"},{"location":"lecture_06/lecture/#Code-generation","page":"Lecture","title":"Code generation","text":"","category":"section"},{"location":"lecture_06/lecture/#Using-metaprogramming-in-inheritance-by-encapsulation","page":"Lecture","title":"Using metaprogramming in inheritance by encapsulation","text":"","category":"section"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Recall that Julia (at the moment) does not support inheritance, therefore the only way to adopt functionality of some object and extend it is through encapsulation. Assuming we have some object T, we wrap that object into a new structure. Let's work out a concrete example, where we define the our own matrix. ","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"struct MyMatrix{T} <: AbstractMatrix{T}\n\tx::Matrix{T}\nend","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Now, to make it useful, we should define all the usual methods, like size, length, getindex, setindex!, etc. We can list methods defined with Matrix as an argument methodswith(Matrix) (recall this will load methods that are defined with currently loaded libraries). Now, we would like to overload them. To minimize the written code, we can write","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"import Base: setindex!, getindex, size, length\nfor f in [:setindex!, :getindex, :size, :length]\n\teval(:($(f)(A::MyMatrix, args...) = $(f)(A.x, args...)))\nend","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"which we can verify now that it works as expected ","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"julia> a = MyMatrix([1 2 ; 3 4])\n2×2 MyMatrix{Int64}:\n 1  2\n 3  4\n\njulia> a[4]\n4\n\njulia> a[3] = 0\n0\n\njulia> a\n2×2 MyMatrix{Int64}:\n 1  0\n 3  4","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"In this way, Julia acts as its own preprocessor. The above look can be equally written as ","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"for f in [:setindex!, :getindex, :size, :length]\n\ts = \"Base.$(f)(A::MyMatrix, args...) = $(f)(A.x, args...)\"\n\tprintln(s)\n\teval(Meta.parse(s))\nend","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"for f in [:setindex!, :getindex, :size, :length] \t@eval f(A::MyMatrix, args...) = f(A.x, args...) end","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Notice that we have just hand-implemented parts of @forward macro from MacroTools, which does exactly this.","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"<!– Should I mention the world clock age and the effect of eval in global scope –>","category":"page"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"","category":"page"},{"location":"lecture_06/lecture/#Resources","page":"Lecture","title":"Resources","text":"","category":"section"},{"location":"lecture_06/lecture/","page":"Lecture","title":"Lecture","text":"Julia's manual on metaprogramming\nDavid P. Sanders' workshop @ JuliaCon 2021 \nSteven Johnson's keynote talk @ JuliaCon 2019\nAndy Ferris's workshop @ JuliaCon 2018\nFrom Macros to DSL by John Myles White \nNotes on JuliaCompilerPlugin","category":"page"},{"location":"lecture_02/hw/#Homework-2:-Predator-Prey-Agents","page":"Homework","title":"Homework 2: Predator-Prey Agents","text":"","category":"section"},{"location":"lecture_02/hw/","page":"Homework","title":"Homework","text":"In this lab you will continue working on your agent simulation. If you did not manage to finish the homework, do not worry, you can use this script which contains all the functionality we developed in the lab.","category":"page"},{"location":"lecture_02/hw/","page":"Homework","title":"Homework","text":"projdir = dirname(Base.active_project())\ninclude(joinpath(projdir,\"src\",\"lecture_02\",\"Lab02Ecosystem.jl\"))","category":"page"},{"location":"lecture_02/hw/#How-to-submit?","page":"Homework","title":"How to submit?","text":"","category":"section"},{"location":"lecture_02/hw/","page":"Homework","title":"Homework","text":"Put all your code (including your or the provided solution of lab 2) in a script named hw.jl.  Zip only this file (not its parent folder) and upload it to BRUTE.  Your file can contain one dependency using StatsBase, but no other packages are can to be used.  For example, having a using Plots in your code will cause the automatic evaluation to fail.","category":"page"},{"location":"lecture_02/hw/#Counting-Agents","page":"Homework","title":"Counting Agents","text":"","category":"section"},{"location":"lecture_02/hw/","page":"Homework","title":"Homework","text":"To monitor the different populations in our world we need a function that counts each type of agent. For AbstractAnimals we simply have to count how many of each type are currently in our World. In the case of AbstractPlants we will use the fraction of size(plant)/max_size(plant) as a measurement quantity.","category":"page"},{"location":"lecture_02/hw/","page":"Homework","title":"Homework","text":"<div class=\"admonition is-category-homework\">\n<header class=\"admonition-header\">Compulsory Homework (2 points)</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_02/hw/","page":"Homework","title":"Homework","text":"Implement a function agent_count that can be called on a single AbstractAgent and returns a number between (01) (i.e. always 1 for animals; and size(plant)/max_size(plant) for plants).\nAdd a method for a vector of agents Vector{<:AbstractAgent} which sums all agent counts.\nAdd a method for a World which returns a dictionary that contains pairs of Symbols and the agent count like below:","category":"page"},{"location":"lecture_02/hw/","page":"Homework","title":"Homework","text":"agent_count(p::Plant) = size(p)/max_size(p)\nagent_count(::Animal) = 1\nagent_count(as::Vector{<:Agent}) = sum(agent_count,as)\n\nfunction agent_count(w::World)\n    function op(d::Dict,a::A) where A<:Agent\n        n = nameof(A)\n        if n in keys(d)\n            d[n] += agent_count(a)\n        else\n            d[n] = agent_count(a)\n        end\n        return d\n    end\n    foldl(op, w.agents |> values |> collect, init=Dict{Symbol,Real}())\nend","category":"page"},{"location":"lecture_02/hw/","page":"Homework","title":"Homework","text":"grass1 = Grass(1,5,5);\nagent_count(grass1)\n\ngrass2 = Grass(2,1,5);\nagent_count([grass1,grass2]) # one grass is fully grown; the other only 20% => 1.2\n\nsheep = Sheep(3,10.0,5.0,1.0,1.0);\nwolf  = Wolf(4,20.0,10.0,1.0,1.0);\nworld = World([grass1, grass2, sheep, wolf]);\nagent_count(world)","category":"page"},{"location":"lecture_02/hw/","page":"Homework","title":"Homework","text":"Hint: You can get the name of a type by using the nameof function:","category":"page"},{"location":"lecture_02/hw/","page":"Homework","title":"Homework","text":"nameof(Grass)","category":"page"},{"location":"lecture_02/hw/","page":"Homework","title":"Homework","text":"Use as much dispatch as you can! ;)","category":"page"},{"location":"lecture_02/hw/","page":"Homework","title":"Homework","text":"</div></div>","category":"page"},{"location":"lecture_02/hw/#Plot-your-simulation","page":"Homework","title":"Plot your simulation","text":"","category":"section"},{"location":"lecture_02/hw/","page":"Homework","title":"Homework","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Voluntary Exercise (voluntary)</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_02/hw/","page":"Homework","title":"Homework","text":"Using the world below, run few world_step!s.  Plot trajectories of the agents count over time. Can you tweak the parameters such that you get similar oscillations as in the plot from lab 2?","category":"page"},{"location":"lecture_02/hw/","page":"Homework","title":"Homework","text":"n_grass = 200\nm_size  = 10\n\nn_sheep  = 10\nΔe_sheep = 0.2\ne_sheep  = 4.0\npr_sheep = 0.8\npf_sheep = 0.6\n\nn_wolves = 2\nΔe_wolf  = 8.0\ne_wolf   = 10.0\npr_wolf  = 0.1\npf_wolf  = 0.2\n\ngs = [Grass(id,m_size,m_size) for id in 1:n_grass]\nss = [Sheep(id,e_sheep,Δe_sheep,pr_sheep,pf_sheep) for id in (n_grass+1):(n_grass+n_sheep)]\nws = [Wolf(id,e_wolf,Δe_wolf,pr_wolf,pf_wolf) for id in (n_grass+n_sheep+1):(n_grass+n_sheep+n_wolves)]\nw  = World(vcat(gs,ss,ws))\nnothing # hide","category":"page"},{"location":"lecture_02/hw/","page":"Homework","title":"Homework","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_02/hw/","page":"Homework","title":"Homework","text":"counts = Dict(n=>[c] for (n,c) in agent_count(w))\nfor _ in 1:100\n    world_step!(w)\n    for (n,c) in agent_count(w)\n        push!(counts[n],c)\n    end\nend\n\nusing Plots\nplt = plot()\nfor (n,c) in counts\n    plot!(plt, c, label=\"$n\", lw=2)\nend\nplt","category":"page"},{"location":"lecture_02/hw/","page":"Homework","title":"Homework","text":"</p></details>","category":"page"},{"location":"lecture_01/hw/#Homework-1:-Extending-polynomial-the-other-way","page":"Homework","title":"Homework 1: Extending polynomial the other way","text":"","category":"section"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"<div class=\"admonition is-category-homework\">\n<header class=\"admonition-header\">Homework (2 points)</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"Extend the original polynomial function to the case where x is a square matrix. Create a function called circlemat, that returns nxn matrix A(n) with the following elements","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"leftA(n)right_ij = \nbegincases\n   1 textif  (i = j-1 land j  1) lor (i = n land j=1) \n   1 textif  (i = j+1 land j  n) lor (i = 1 land j=n) \n   0  text  otherwise\nendcases","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"and evaluate the polynomial","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"f(A) = I + A + A^2 + A^3","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":", at point A = A(10).","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"HINTS for matrix definition: You can try one of these options:","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"create matrix with all zeros with zeros(n,n), use two nested for loops going in ranges 1:n and if condition with logical or ||, and && \nemploy array comprehension with nested loops [expression for i in 1:n, j in 1:n] and ternary operator condition ? true branch : false","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"HINTS for polynomial extension:","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"extend the original example (one with for-loop) to initialize the accumulator variable with matrix of proper size (use size function to get the dimension), using argument typing for x is preferred to distinguish individual implementations <: AbstractMatrix","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"or","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"test later defined polynomial methods, that may work out of the box","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"</div></div>\n<details class = \"solution-body\" hidden>\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"Nothing to see here.","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"</p></details>","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise (voluntary)</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"Install GraphRecipes and Plots packages into the environment defined during the lecture and figure out, how to plot the graph defined by adjacency matrix A from the homework.","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"HINTS:","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"There is help command inside the the pkg mod of the REPL. Type ? add to find out how to install a package. Note that both pkgs are registered.\nFollow a guide in the Plots pkg's documentation, which is accessible through docs icon on top of the README in the GitHub repository. Direct link.","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"Activate the environment in pkg mode, if it is not currently active.","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"pkg> activate .","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"Installing pkgs is achieved using the add command. Running ] ? add returns a short piece of documentation for this command:","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"pkg> ? add\n[...]\n  Examples\n\n  pkg> add Example                                          # most commonly used for registered pkgs (installs usually the latest release)\n  pkg> add Example@0.5                                      # install with some specific version (realized through git tags)\n  pkg> add Example#master                                   # install from master branch directly\n  pkg> add Example#c37b675                                  # install from specific git commit\n  pkg> add https://github.com/JuliaLang/Example.jl#master   # install from specific remote repository (when pkg is not registered)\n  pkg> add git@github.com:JuliaLang/Example.jl.git          # same as above but using the ssh protocol\n  pkg> add Example=7876af07-990d-54b4-ab0e-23690620f79a     # when there are multiple pkgs with the same name","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"As the both Plots and GraphRecipes are registered and we don't have any version requirements, we will use the first option.","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"pkg> add Plots\npkg> add GraphRecipes","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"This process downloads the pkgs and triggers some build steps, if for example some binary dependencies are needed. The process duration depends on the \"freshness\" of Julia installation and the size of each pkg. With Plots being quite dependency heavy, expect few minutes. After the installation is complete we can check the updated environment with the status command.","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"pkg> status","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"The plotting itself as easy as calling the graphplot function on our adjacency matrix.","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"using GraphRecipes, Plots\nA = [ 0  1  0  0  0  0  0  0  0  1; 1  0  1  0  0  0  0  0  0  0; 0  1  0  1  0  0  0  0  0  0; 0  0  1  0  1  0  0  0  0  0; 0  0  0  1  0  1  0  0  0  0; 0  0  0  0  1  0  1  0  0  0; 0  0  0  0  0  1  0  1  0  0; 0  0  0  0  0  0  1  0  1  0; 0  0  0  0  0  0  0  1  0  1; 1  0  0  0  0  0  0  0  1  0]# hide\ngraphplot(A)","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"graphplot(A) #hide","category":"page"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"</p></details>","category":"page"},{"location":"lecture_01/hw/#How-to-submit?","page":"Homework","title":"How to submit?","text":"","category":"section"},{"location":"lecture_01/hw/","page":"Homework","title":"Homework","text":"Isolate the code of the compulsory task into a script named hw.jl alongside with the Project.toml and Manifest.toml of the environment. Create a zipfile of the folder and send it to the lab instructor, who has assigned the task, via email (contact emails are located on the homepage of the course).","category":"page"},{"location":"lecture_04/lecture/#pkg_lecture","page":"Lecture","title":"Package development","text":"","category":"section"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Organization of the code is more important with the increasing size of the project and the number of contributors and users. Moreover, it will become essential when different codebases are expected to be combined and reused. ","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Julia was designed from the beginning to encourage code reuse across different codebases as possible\nJulia ecosystem lives on a namespace. From then, it builds projects and environments.","category":"page"},{"location":"lecture_04/lecture/#Namespaces-and-modules","page":"Lecture","title":"Namespaces and modules","text":"","category":"section"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Namespace logically separate fragments of source code so that they can be developed independently without affecting each other. If I define a function in one namespace, I will still be able to define another function in a different namespace even though both functions have the same name.","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"prevents confusion when common words are used in different meaning:\nToo general name of functions \"create\", \"extend\", \"loss\", \nor data \"X\", \"y\" (especially in mathematics, think of π)\nmay not be an issue if used with different types\nModules is Julia syntax for a namespace","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Example:","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"module MySpace\nfunction test1()\n  println(\"test1\")\nend\nfunction test2()\n  println(\"test2\")\nend\nexport test1\n#include(\"filename.jl\")\nend","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Function include copies content of the file to this location (will be part of the module).","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Creates functions:","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"MySpace.test1\nMySpace.test2","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"For easier manipulation, these functions can be \"exported\" to be exposed to the outer world (another namespace).","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Keyword: using exposes the exported functions and structs:","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"using .MySpace","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"The dot means that the module was defined in this scope.","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Keyword: import imports function with availability to redefine it.","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Combinations:","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"usecase results\nusing MySpace MySpace.test1\n MySpace.test2\n test1\nusing MySpace: test1 test1\nimport MySpace MySpace.test1*\n MySpace.test2*\nimport MySpace: test1 test1*\nimport MySpace: test2 test2*","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"symbol \"*\" denotes functions that can be redefined","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":" using  MySpace: test1\n test1()=println(\"new test\")\n import  MySpace: test1\n test1()=println(\"new test\")","category":"page"},{"location":"lecture_04/lecture/#Conflicts:","page":"Lecture","title":"Conflicts:","text":"","category":"section"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"When importing/using functions with name that that is already imported/used from another module:","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"the imported functions/structs are invalidated. \nboth function has to be acessed by their full names.","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Resoluton:","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"It may be easier to cherry pick only the functions we need (rather than importing all via using)\nremane some function using keyword as\nimport MySpace2: test1 as t1","category":"page"},{"location":"lecture_04/lecture/#Submodules","page":"Lecture","title":"Submodules","text":"","category":"section"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Modules can be used or included withing another modules:","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"module A\n   a=1;\nend\nmodule B\n   module C\n       c = 2\n   end\n   b = C.c   \n   using ..A: a\nend;","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"REPL of Julia is a module called \"Main\". ","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"modules are not copied, but referenced, i.e. B.b===B.C.c\nincluding one module twice (from different packages) is not a problem","category":"page"},{"location":"lecture_04/lecture/#Revise.jl","page":"Lecture","title":"Revise.jl","text":"","category":"section"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"The fact that julia can redefine a function in a Module by importing it is used by package Revise.jl to synchronize REPL with a module or file.","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"So far, we have worked in REPL. If you have a file that is loaded and you want to modify it, you would need to either:","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"reload the whole file, or\ncopy the changes to REPL","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Revise.jl do the latter automatically.","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Example demo:","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"using Revise.jl\nincludet(\"example.jl\")","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Works with: ","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"any package loaded with import or using, \nscript  loaded with includet, \nBase julia itself (with Revise.track(Base))\nstandard libraries (with, e.g., using Unicode; Revise.track(Unicode))","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Does not work with variables!","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"How it works: monitors source code for changes and then do","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"for def in setdiff(oldexprs, newexprs)\n    # `def` is an expression that defines a method.\n    # It was in `oldexprs`, but is no longer present in `newexprs`--delete the method.\n    delete_methods_corresponding_to_defexpr(mod, def)\nend\nfor def in setdiff(newexprs, oldexprs)\n    # `def` is an expression for a new or modified method. Instantiate it.\n    Core.eval(mod, def)\nend","category":"page"},{"location":"lecture_04/lecture/#Namespaces-and-scoping","page":"Lecture","title":"Namespaces & scoping","text":"","category":"section"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Every module introduces a new global scope. ","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Global scope\nNo variable or function is expected to exist  outside of it\nEvery module is equal a global scope (no single \"global\" exists)\nThe REPL is a global module called Main\nLocal scope\nVariables in Julia do not need to be explcitely declared, they are created by assignments: x=1. \nIn local scope, the compiler checks if variable x does not exists outside. We have seen:\nx=1\nf(y)=x+y\nThe rules for local scope determine how to treat assignment of x. If local x exists, it is used, if it does not:\nin hard scope: new local x is created\nin soft scope: checks if x exists outside (global)\nif not: new local x is created\nif yes: the split is REPL/non-interactive:\nREPL: global x is used (convenience, as of 1.6)\nnon-interactive: local x is created","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"keyword local and global can be used to specify which variable to use","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"From documentation:","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Construct Scope type Allowed within\nmodule, baremodule global global\nstruct local (soft) global\nfor, while, try local (soft) global, local\nmacro local (hard) global\nfunctions, do blocks, let blocks, comprehensions, generators local (hard) global, local","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Question:","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"x=1\nf()= x=3\nf()\n@show x;","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"x = 1\nfor _ = 1:1\n   x=3\nend\n@show x;","category":"page"},{"location":"lecture_04/lecture/#Packages","page":"Lecture","title":"Packages","text":"","category":"section"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Package is a source tree with a standard layout. Can be loaded with include or using and provides a module.","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Minimimal project:","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"PackageName/\n├── src/\n│   └── PackageName.jl\n├── Project.toml","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Contains:","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Project.toml file describing basic properties:\nName, does not have to be Unique (federated package sources)\nUUID, has to be uniques (generated automatically)\noptionally [deps], [targets],...\nfile src/PackageName.jl that defines module PackageName which is executed when loaded.","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Many other optional directories:","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"directory tests/,  (almost mandatory)\ndirectory docs/    (common)\ndirectory scripts/, examples/,... (optional)","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"The package typically loads other modules that form package dependencies.","category":"page"},{"location":"lecture_04/lecture/#Project-environments","page":"Lecture","title":"Project environments","text":"","category":"section"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Is a package that contains additional file Manifest.toml. This file tracks full dependency tree of a project including versions of the packages on which it depends.","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"for example:","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"# This file is machine-generated - editing it directly is not advised\n\n[[AbstractFFTs]]\ndeps = [\"LinearAlgebra\"]\ngit-tree-sha1 = \"485ee0867925449198280d4af84bdb46a2a404d0\"\nuuid = \"621f4979-c628-5d54-868e-fcf4e3e8185c\"\nversion = \"1.0.1\"\n\n[[AbstractTrees]]\ngit-tree-sha1 = \"03e0550477d86222521d254b741d470ba17ea0b5\"\nuuid = \"1520ce14-60c1-5f80-bbc7-55ef81b5835c\"\nversion = \"0.3.4\"","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Content of files Project.toml and Manifest.toml are maintained by PackageManager.","category":"page"},{"location":"lecture_04/lecture/#Package/Project-manager","page":"Lecture","title":"Package/Project manager","text":"","category":"section"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Handles both packages and projects:","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"creating a project ]generate PkgName\nadding an existing project add PkgName or add https://github.com/JuliaLang/Example.jl\nNames are resolved by Registrators (public or private).\nremoving ]rm PkgName\nupdating ]update\ndeveloping ]dev http://... \nAlways reads the actual content of files. Add creates a precompiled blob.","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"By default these operations are related to environment .julia/environments/v1.6","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"E.g. running an updating will update packages in Manifest.toml in this directory. What if the update breaks functionality of some project package that uses special features?","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"There can be more than one environment!","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Any package can define its own project environment with a list of dependencies.","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"switching by ]activate Path\nfrom that moment, all package modifications will be relevant only to this project!\nwhen switching to a new project ]instantiate will prepare (download and precompile) the environment\nwhich Packages are visible is determined by LOAD_PATH\ntypically contaings default libraries and default environment\nit is different for REPL and Pkg.tests ! No default env. in tests.","category":"page"},{"location":"lecture_04/lecture/#Unit-testing,-/test","page":"Lecture","title":"Unit testing, /test","text":"","category":"section"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Without explicit keywords for checking constructs (think missing functions in interfaces), the good quality of the code is guaranteed by detailed unit testing.","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"each package should have directory /test\nfile /test/runtest.jl is run by command ]test of the package manager\nthis file typically contains include of other tests\nno formal structure of tests is prescribed\ntest files are just ordinary julia scripts\nuser is free to choose what to test and how (freedom x formal rules)\ntesting functionality is supported by macros @test and @teststet\n@testset \"trigonometric identities\" begin\n    θ = 2/3*π\n    @test sin(-θ) ≈ -sin(θ)\n    @test cos(-θ) ≈ cos(θ)\n    @test sin(2θ) ≈ 2*sin(θ)*cos(θ)\n    @test cos(2θ) ≈ cos(θ)^2 - sin(θ)^2\nend;","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Testset is a collection of tests that will be run and summarized in a common report.","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Testsets can be nested: testsets in testsets\ntests can be in loops or functions\nfor i=1:10\n   @test a[i]>0\nend\nUseful macro ≈ checks for equality with given tolerance\na=5+1e-8\n@test a≈5\n@test a≈5 atol=1e-10","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"@testset resets RNG to Random.GLOBAL_SEED before and after the test for repeatability \nThe same results of RNG are not guaranteed between Julia versions!\nTest coverage: package Coverage.jl  \nCan be run automatically by continuous integration, e.g. GitHub actions","category":"page"},{"location":"lecture_04/lecture/#Documentation-and-Style,-/docs","page":"Lecture","title":"Documentation & Style, /docs","text":"","category":"section"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"A well written package is reusable if it is well documented. ","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"The simpliest kind of documentation is the docstring:","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"\"Auxiliary function for printing a hello\"\nhello()=println(\"hello\")\n\n\"\"\"\nMore complex function that adds π to input:\n- x is the input argument (itemize)\n\nCan be written in latex: ``x \\leftarrow x + \\pi``\n\"\"\"\naddπ(x) = x+π","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Yieds:","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"tip: Renders as\nMore complex function that adds π to input:x is the input argument (itemize)Can be written in latex: x leftarrow x + pi","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Structure of the document","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"PackageName/\n├── src/\n│   └── SourceFile.jl\n├── docs/\n│    ├── build/\n│    ├── src/\n│    └── make.jl\n...","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Where the line-by-line documentation is in the source files.","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"/docs/src folder can contain more detailed information: introductory pages, howtos, tutorials, examples\nrunning make.jl controls which pages are generated in what form (html or latex) documentation in the /build  directory\nautomated with GitHub actions","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Documentation is generated by the julia code.","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"code in documentation can be evaluated\nx=3\n@show x\ndocumentation can be added by code:\nstruct MyType\n    value::String\nend\n\nDocs.getdoc(t::MyType) = \"Documentation for MyType with value $(t.value)\"\n\nx = MyType(\"x\")\ny = MyType(\"y\")\nSee ?x and ?y. \nIt uses the same very standdr building blocks: multiple dispatch.","category":"page"},{"location":"lecture_04/lecture/#Precompilation","page":"Lecture","title":"Precompilation","text":"","category":"section"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"By default, every package is precompiled when loading and stored in compiled form in a cache.","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"If it defines methods that extend previously defined (e.g. from Base), it may affect already loaded packages which need to be recompiled as well. May take time.","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Julia has a tracking mechanism that stores information about the whole graph of dependencies. ","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Faster code can be achieved by the precompile directive:","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"module FSum\n\nfsum(x) = x\nfsum(x,p...) = x+fsum(p[1],p[2:end]...)\n\nprecompile(fsum,(Float64,Float64,Float64))\nend","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"Can be investigated using MethodAnalysis.","category":"page"},{"location":"lecture_04/lecture/","page":"Lecture","title":"Lecture","text":"using MethodAnalysis\nmi =methodinstances(fsum)","category":"page"},{"location":"lecture_07/lab/#macro_lab","page":"Lab","title":"Lab 06: Macros","text":"","category":"section"},{"location":"projects/#projects","page":"Projects","title":"Projects","text":"","category":"section"},{"location":"projects/","page":"Projects","title":"Projects","text":"We want you to use Julia for something that is acutally useful for you. Therefore you can choose your final, graded project very freely. We will discuss your ideas with you individually and come up with a sufficiently extensive project together.","category":"page"},{"location":"projects/","page":"Projects","title":"Projects","text":"For you inspiration of what such a project could look like we have four suggestions for you (which you can of course choose to work on as well).","category":"page"},{"location":"projects/#The-Equation-Learner-And-Its-Symbolic-Representation","page":"Projects","title":"The Equation Learner And Its Symbolic Representation","text":"","category":"section"},{"location":"projects/","page":"Projects","title":"Projects","text":"In many scientific and engineering one searches for interpretable (i.e. human-understandable) models instead of the black-box function approximators that neural networks provide. The equation learner (EQL) is one approach that can identify concise equations that describe a given dataset.","category":"page"},{"location":"projects/","page":"Projects","title":"Projects","text":"The EQL is essentially a neural network with different unary or binary activation functions at each indiviual unit. The network weights are regularized during training to obtain a sparse model which hopefully results in a model that represents a simple equation.","category":"page"},{"location":"projects/","page":"Projects","title":"Projects","text":"The goal of this project is to implement the EQL, and if there is enough time the improved equation learner (iEQL). The equation learners should be tested on a few toy problems (possibly inspired by the tasks in the papers).  Finally, you will implement functionality that can transform the learned model into a symbolic, human readable, and exectuable Julia expression.","category":"page"},{"location":"projects/#An-Evolutionary-Algorithm-Applied-To-Julia's-AST","page":"Projects","title":"An Evolutionary Algorithm Applied To Julia's AST","text":"","category":"section"},{"location":"projects/","page":"Projects","title":"Projects","text":"Most of the approaches to equation learning have to be differentiable by default in order to use the traditional machinery of stochastic gradient descent with backpropagation. This often leads to equations with too many terms, requiring  special techniques for enforcing sparsity for terms with low weights.","category":"page"},{"location":"projects/","page":"Projects","title":"Projects","text":"In Julia we can however use a different learning paradigm of evolutionary  algorithms, which can work on discrete set of expressions. The goal is to  write mutation and recombination - the basic operators of a genetic algorithm, but applied on top of Julia AST.","category":"page"},{"location":"projects/","page":"Projects","title":"Projects","text":"Data: AI Feyman database on symbolic regression (from article/code) Inspiration: ","category":"page"},{"location":"projects/","page":"Projects","title":"Projects","text":"Logic Guided Genetic Algorithms article/code\nAI Feynman 2.0: Pareto-optimal symbolic regression exploiting graph modularity article\nGenetic Programming for Julia: fast performance and parallel island model implementation report","category":"page"},{"location":"projects/#Distributed-Optimization-Package","page":"Projects","title":"Distributed Optimization Package","text":"","category":"section"},{"location":"projects/","page":"Projects","title":"Projects","text":"One click distributed optimization is at the heart of other machine learning  and optimization libraries such as pytorch, however some equivalents are  missing in the Julia's Flux ecosystem. The goal of this project is to explore, implement and compare at least two state-of-the-art methods of distributed  gradient descent on data that will be provided for you.","category":"page"},{"location":"projects/","page":"Projects","title":"Projects","text":"Some of the work has already been done in this area by one of our former students,  see link.","category":"page"},{"location":"projects/#A-Rule-Learning-Algorithm","page":"Projects","title":"A Rule Learning Algorithm","text":"","category":"section"},{"location":"projects/","page":"Projects","title":"Projects","text":"Rule-based models are simple and very interpretable models that have been around for a long time and are gaining popularity again. The goal of this project is to implement a sequential covering algorithm called RIPPER and evaluate it on a number of datasets.","category":"page"},{"location":"lecture_01/outline/#Course-outline","page":"Outline","title":"Course outline","text":"","category":"section"},{"location":"lecture_01/outline/","page":"Outline","title":"Outline","text":"Introduction\nType system\nuser: tool for abstraction\ncompiler: tool for memory layout\nDesign patterns (mental setup)\nJulia is a type-based language\nmultiple-dispatch generalizes OOP and FP\nPackages\nway how to organize code\ncode reuse (alternative to libraries)\nexperiment reproducibility\nBenchmarking\nhow to measure code efficiency\nIntrospection\nunderstand how the compiler process the data\nMacros\nautomate writing of boring the boilerplate code\ngood macro create cleaner code\nAutomatic Differentiation\nTheory: difference between the forward and backward mode\nImplementation techniques\nIntermediate representation\nhow to use internal the representation of the code \nexample in automatic differentiation\nParallel computing\nthreads, processes\nGraphics card coding\ntypes for GPU\nspecifics of architectures\nOrdinary Differential Equations\nsimple solvers\nerror propagation\nData driven ODE\ncombine ODE with optimization\nautomatic differentiation (adjoints)","category":"page"},{"location":"lecture_08/lecture/#Automatic-Differentiation","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"","category":"section"},{"location":"lecture_08/lecture/#Theory","page":"Automatic Differentiation","title":"Theory","text":"","category":"section"},{"location":"lecture_08/lecture/#Forward","page":"Automatic Differentiation","title":"Forward","text":"","category":"section"},{"location":"lecture_08/lecture/#Reverse","page":"Automatic Differentiation","title":"Reverse","text":"","category":"section"},{"location":"lecture_08/lecture/#How-to-test","page":"Automatic Differentiation","title":"How to test","text":"","category":"section"},{"location":"lecture_08/lecture/","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"A tricky example with odd function","category":"page"},{"location":"lecture_08/lecture/#ChainRules","page":"Automatic Differentiation","title":"ChainRules","text":"","category":"section"},{"location":"lecture_08/lecture/","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"Why you want to have it\nSyntax\nStructural vs Natural gradient","category":"page"},{"location":"lecture_03/hw/#Homework-3","page":"Homework","title":"Homework 3","text":"","category":"section"},{"location":"lecture_03/hw/","page":"Homework","title":"Homework","text":"using EcosystemCore\nusing Scientific_Programming_in_Julia","category":"page"},{"location":"lecture_03/hw/","page":"Homework","title":"Homework","text":"In this homework we will add another species of plant to our simulation (poisoned mushrooms) and practice the use of closures with callback functions. The solution of lab 3 can be found here. You can use this file and add the code that you write for the homework to it.","category":"page"},{"location":"lecture_03/hw/#How-to-submit?","page":"Homework","title":"How to submit?","text":"","category":"section"},{"location":"lecture_03/hw/","page":"Homework","title":"Homework","text":"Put all your code (including your or the provided solution of lab 2) in a script named hw.jl.  Zip only this file (not its parent folder) and upload it to BRUTE.  Your file can contain one dependency using StatsBase, but no other packages are can to be used.  For example, having a using Plots in your code will cause the automatic evaluation to fail.","category":"page"},{"location":"lecture_03/hw/#Poisoned-Mushrooms","page":"Homework","title":"Poisoned Mushrooms","text":"","category":"section"},{"location":"lecture_03/hw/","page":"Homework","title":"Homework","text":"<div class=\"admonition is-category-homework\">\n<header class=\"admonition-header\">Homework (1 point)</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_03/hw/","page":"Homework","title":"Homework","text":"Implement a new species Mushroom which tricks a sheep into eating it by its delicious looks but decreases the energy of the sheep by size(::Mushroom)*Δenergy(::Sheep).","category":"page"},{"location":"lecture_03/hw/","page":"Homework","title":"Homework","text":"Note: The auto-eval system assumes that you have a constructor Mushroom(id,size,max_size) that accepts the three plant fields as arguments (as implemented e.g. here).","category":"page"},{"location":"lecture_03/hw/","page":"Homework","title":"Homework","text":"</div></div>","category":"page"},{"location":"lecture_03/hw/","page":"Homework","title":"Homework","text":"Your new species should give you results like below","category":"page"},{"location":"lecture_03/hw/","page":"Homework","title":"Homework","text":"s = Sheep(1,2,1,1,1);\nm = Mushroom(2,2,5);\nw = World([s,m])\neat!(s,m,w);\nw","category":"page"},{"location":"lecture_03/hw/#Callbacks-and-Closures","page":"Homework","title":"Callbacks & Closures","text":"","category":"section"},{"location":"lecture_03/hw/","page":"Homework","title":"Homework","text":"In many scientific frameworks we have to work with functions like simulate! (The solve function in Optim.jl is a good example)","category":"page"},{"location":"lecture_03/hw/","page":"Homework","title":"Homework","text":"function simulate!(w::World, iters::Int, cb=()->())\n    for _ in 1:iters\n        # In our case this loop is trivial. In more involved simulations this\n        # will be more complicated ;)\n        world_step!(w)\n        cb()\n    end\nend\nnothing # hide","category":"page"},{"location":"lecture_03/hw/","page":"Homework","title":"Homework","text":"which allow custom functionality within a larger simulation function. For example, we might want to print out what the world looks like after every time step. This could be done by passing a lambda function w->(@show w) to simulate!. Often we want our callbacks to be executed only every n steps. This can be used to get less verbose logging or e.g. to write out checkpoints of your simulation.","category":"page"},{"location":"lecture_03/hw/","page":"Homework","title":"Homework","text":"<div class=\"admonition is-category-homework\">\n<header class=\"admonition-header\">Homework (1 point)</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_03/hw/","page":"Homework","title":"Homework","text":"Implement a function every_nth(f::Function,n::Int) that takes an inner function f and uses a closure to construct an outer function g that only calls f every nth call to g. E.g. if n=3 the inner function f be called at the 3rd, 6th, 9th ... call to g (not at the 1st, 4th, 7th... call).","category":"page"},{"location":"lecture_03/hw/","page":"Homework","title":"Homework","text":"Hint: You can use splatting via ... to pass on an unknown number of arguments from the outer to the inner function.","category":"page"},{"location":"lecture_03/hw/","page":"Homework","title":"Homework","text":"</div></div>","category":"page"},{"location":"lecture_03/hw/","page":"Homework","title":"Homework","text":"You can use every_nth to log (or save) the agent count only every couple of steps of your simulation. Using every_nth will look like this:","category":"page"},{"location":"lecture_03/hw/","page":"Homework","title":"Homework","text":"# `@info agent_count(w)` is executed only every 5th call to logcb(w)\nlogcb = every_nth(w->(@info agent_count(w)), 3);\n\nlogcb(w);  # x->(@info agent_count(w)) is not called\nlogcb(w);  # x->(@info agent_count(w)) is not called\nlogcb(w);  # x->(@info agent_count(w)) *is* called","category":"page"},{"location":"lecture_05/lecture/#perf_lecture","page":"Lecture","title":"Benchmarking, profiling, and performance gotchas","text":"","category":"section"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"This class is a short introduction to writing a performant code. As such, we want to cover","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"how to identify weak spots in the code\nhow to properly benchmark\ncommon performance anti-patterns\nJulia's \"performance gotchas\", by which we mean performance problems specific for Julia (typical caused by the lack of understanding of Julia or by a errors in conversion from script to functions)","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Though recall the most important rule of thumb: Never optimize code from the very beginning. A much more productive workflow is ","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"write the code that is idiomatic and easy to understand\ncover the code with unit test, such that you know that the optimized code works the same as the original\noptimize the code","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Premature optimization frequently backfires, because:","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"you might end-up optimizing wrong thing, i.e. you will not optimize performance bottleneck, but something very different\noptimized code can be difficult to read and reason about, which means it is more difficult to make it right.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"It frequently happens that Julia newbies asks on forum that their code in Julia is slow in comparison to the same code in Python (numpy). Most of the time, they make trivial mistakes and it is very educative to go over their mistakes","category":"page"},{"location":"lecture_05/lecture/#Numpy-10x-faster-than-julia-what-am-i-doing-wrong?-(solved-julia-faster-now)-[1]","page":"Lecture","title":"Numpy 10x faster than julia what am i doing wrong? (solved julia faster now) [1]","text":"","category":"section"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"[1]: Adapted from Julia's discourse thread","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"function f(p)\t\t\t\t\t\t\t\t\t\t\t\t\t\t# line 1 \n    t0,t1 = p \t\t\t\t\t\t\t\t\t\t\t\t\t\t# line 2\n    m0 = [[cos(t0) - 1im*sin(t0)  0]; [0  cos(t0) + 1im*sin(t0)]]\t# line 3\n    m1 = [[cos(t1) - 1im*sin(t1)  0]; [0  cos(t1) + 1im*sin(t1)]]\t# line 4\n    r = m1*m0*[1. ; 0.] \t\t\t\t\t\t\t\t\t\t\t# line 5\n    return abs(r[1])^2 \t\t\t\t\t\t\t\t\t\t\t\t# line 6\nend\n\nfunction g(p,n)\n    return [f(p[:,i]) for i=1:n]\nend\n\ng(rand(2,3),3)  # call to force jit compilation\n\nn = 10^6\np = 2*pi*rand(2,n)\n\n@elapsed g(p,n)\n","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"The first thing we do is to run Profiler, to identify, where the function spends most of the time.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"note: Note\nJulia's built-in profilerJulia's built-in profiler is part of the standard library in the Profile module implementing a fairly standard sampling based profiler. It a nutshell it asks at regular intervals, where the code execution is currently and marks it and collects this information in some statistics. This allows us to analyze, where these \"probes\" have occurred most of the time which implies those parts are those, where the execution of your function spends most of the time. As such, the profiler has two \"controls\", which is the delay between two consecutive probes and the maximum number of probes n (if the profile code takes a long time, you might need to increase it).using Profile\nProfile.init(; n = 989680, delay = 0.001))\n@profile g(p,n)\nProfile.clear()\n@profile g(p,n)Making sense of profiler's outputThe default Profile.print function shows the call-tree with count, how many times the probe occurred in each function sorted from the most to least. The output is a little bit difficult to read and orient in, therefore there are some visualization options.What are our options?ProfileView is the workhorse with a GTK based API and therefore recommended for those with working GTK\nProfileSVG is the ProfileView with the output exported in SVG format, which is viewed by most browser (it is also very convenient for sharing with others)\nPProf.jl is a front-end to Google's PProf profile viewer https://github.com/JuliaPerf/PProf.jl\nStatProfilerHTML  https://github.com/tkluck/StatProfilerHTML.jlBy personal opinion I mostly use ProfileView (or ProfileSVG) as it indicates places of potential type instability, which as will be seen later is very useful feature. Profiling caveatsThe same function, but with keyword arguments, can be used to change these settings, however these settings are system dependent. For example on Windows, there is a known issue that does not allow to sample faster than at 0.003s and even on Linux based system this may not do much. There are some further caveat specific to Julia:When running profile from REPL, it is usually dominated by the interactive part which spawns the task and waits for it's completion.\nCode has to be run before profiling in order to filter out all the type inference and interpretation stuff. (Unless compilation is what we want to profile.)\nWhen the execution time is short, the sampling may be insufficient -> run multiple times.We will use ProfileSVG for its simplicity (especially installation). It shows the statistics in for of a flame graph which read as follows: , where . The hierarchy is expressed as functions on the bottom calls functions on the top. reads as follows:each function is represented by a horizontal bar\nfunction in the bottom calls functions that lays on it\nthe width of the bar corresponds to time spent in the function\nred colored bars indicate type instabilities\nfunctions in bottom bars calls functions on top of upper barsFunction name contains location in files and particular line number called. GTK version is even \"clickable\" and opens the file in default editor.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Let's use the profiler on the above function g to find potential weak spots","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"using Profile, ProfileSVG\nProfile.clear()\n@profile g(p, n)\nProfileSVG.save(\"profile.svg\")","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"The output can be seen here","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"We can see that the function is type stable and 2/3 of the time is spent in lines 3 and 4, which allocates arrays","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"[[cos(t0) - 1im*sin(t0)  0]; \n [0  cos(t0) + 1im*sin(t0)]]","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"and","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"[[cos(t1) - 1im*sin(t1)  0]; \n [0  cos(t1) + 1im*sin(t1)]]","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Scrutinizing the function f, we see that in every call, it has to allocate arrays m0 and m1 on the heap. The allocation on heap is expensive, because it might require interaction with the operating system and it pu stress on the potential garbage collector. Can we avoid it? Repeated allocation can be frequently avoided by:","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"preallocating arrays (if the arrays are of the fixed dimensions)\nor allocating objects on stack, which does not involve interaction with OS (but can be used in limited cases.)","category":"page"},{"location":"lecture_05/lecture/#Adding-preallocation","page":"Lecture","title":"Adding preallocation","text":"","category":"section"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"function f!(m0, m1, p, u)   \t\t\t\t\t\t\t\t\t\t# line 1 \n    t0,t1 = p \t\t\t\t\t\t\t\t\t\t\t\t\t\t# line 2\n    m0[1,1] = cos(t0) - 1im*sin(t0)\t\t\t\t\t\t\t\t\t# line 3\n    m0[2,2] = cos(t0) + 1im*sin(t0)\t\t\t\t\t\t\t\t\t# line 4\n    m1[1,1] = cos(t1) - 1im*sin(t1)\t\t\t\t\t\t\t\t\t# line 5\n    m1[2,2] = cos(t1) + 1im*sin(t1)\t\t\t\t\t\t\t\t\t# line 6\n    r = m1*m0*u \t\t\t\t\t\t\t\t\t\t\t\t\t# line 7\n    return abs(r[1])^2 \t\t\t\t\t\t\t\t\t\t\t\t# line 8\nend\n\nfunction g2(p,n)\n    u = [1. ; 0.]\n    m0 = [[cos(p[1]) - 1im*sin(p[1])  0]; [0  cos(p[1]) + 1im*sin(p[1])]]\t# line 3\n    m1 = [[cos(p[2]) - 1im*sin(p[2])  0]; [0  cos(p[2]) + 1im*sin(p[2])]]\n    return [f!(m0, m1, p[:,i], u) for i=1:n]\nend","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"note: Note\nBenchmarkingThe simplest benchmarking can be as simple as writing repetitions = 100\nt₀ = time()\nfor  in 1:100\n\tg(p, n)\nend\n(time() - t₀) / n where we add repetitions to calibrate for background processes that can step in the precise measurements (recall that your program is not allone). Writing the above for benchmarking is utterly boring. Moreover, you might want to automatically determine the number of repetitions (the shorter time the more repetitions you want), take care of compilation of your function, you might want to have more informative output, for example median, mean, and maximum time of execution, information about number of allocation, time spent in garbage collector, etc. This is in nutshell what BenchmarkTools.jl offers, which we consider an essential tool for anyone interesting in tuning its code.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"We will using macro @benchmark from BenchmarkTools.jl to observe the speedup we will get between g and g2.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"using BenchmarkTools\n\njulia> @benchmark g(p,n)\nBenchmarkTools.Trial: 5 samples with 1 evaluation.\n Range (min … max):  1.168 s …   1.199 s  ┊ GC (min … max): 11.57% … 13.27%\n Time  (median):     1.188 s              ┊ GC (median):    11.91%\n Time  (mean ± σ):   1.183 s ± 13.708 ms  ┊ GC (mean ± σ):  12.10% ±  0.85%\n\n  █ █                                 █ █                 █\n  █▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█ ▁\n  1.17 s         Histogram: frequency by time         1.2 s <\n\n Memory estimate: 1.57 GiB, allocs estimate: 23000002.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"julia> @benchmark g2(p,n)\nBenchmarkTools.Trial: 11 samples with 1 evaluation.\n Range (min … max):  413.167 ms … 764.393 ms  ┊ GC (min … max):  6.50% … 43.76%\n Time  (median):     426.728 ms               ┊ GC (median):     6.95%\n Time  (mean ± σ):   460.688 ms ± 102.776 ms  ┊ GC (mean ± σ):  12.85% ± 11.04%\n\n  ▃█ █\n  ██▇█▁▁▁▁▁▁▁▁▇▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▇ ▁\n  413 ms           Histogram: frequency by time          764 ms <\n\n Memory estimate: 450.14 MiB, allocs estimate: 4000021.\n","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"We can see that we have approximately 3-fold improvement.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Let's profile again, not forgetting to use Profile.clear() to clear already stored probes.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Profile.clear()\n@profile g2(p,n)\nProfileSVG.save(\"/tmp/profile2.svg\")","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"What the profiler tells is now (clear here to see the output)? \t- we spend a lot of time in similar in matmul, which is again an allocation of results for storing output of multiplication on line 7 matrix r. \t- the trigonometric operations on line 3-6 are very costly \t- Slicing p always allocates a new array and performs a deep copy.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Let's get rid of memory allocations at the expense of the code clarity","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"using LinearAlgebra\n@inline function initm!(m, t)\n    st, ct = sincos(t) \n    @inbounds m[1,1] = Complex(ct, -st)\t\t\t\t\t\t\t\t\n    @inbounds m[2,2] = Complex(ct, st)   \t\t\t\t\t\t\t\t\nend\n\nfunction f1!(r1, r2, m0, m1, t0, t1, u)   \t\t\t\t\t\n    initm!(m0, t0)\n    initm!(m1, t1)\n    mul!(r1, m0, u)\n    mul!(r2, m1, r1)\n    return @inbounds abs(@inbounds r2[1])^2\nend\n\nfunction g3(p,n)\n\tu = [1. ; 0.]\n\tm0 = [cos(p[1]) - 1im*sin(p[1])  0; 0  cos(p[1]) + 1im*sin(p[1])]\n    m1 = [cos(p[2]) - 1im*sin(p[2])  0; 0  cos(p[2]) + 1im*sin(p[2])]\n    r1 = m0*u\n    r2 = m1*r1\n    return [f1!(r1, r2, m0, m1, p[1,i], p[2,i], u) for i=1:n]\nend","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"julia> @benchmark g3(p,n)\n Range (min … max):  193.922 ms … 200.234 ms  ┊ GC (min … max): 0.00% … 1.67%\n Time  (median):     195.335 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   196.003 ms ±   1.840 ms  ┊ GC (mean ± σ):  0.26% ± 0.61%\n\n  █▁  ▁ ██▁█▁  ▁█ ▁ ▁ ▁        ▁   ▁     ▁   ▁▁   ▁  ▁        ▁\n  ██▁▁█▁█████▁▁██▁█▁█▁█▁▁▁▁▁▁▁▁█▁▁▁█▁▁▁▁▁█▁▁▁██▁▁▁█▁▁█▁▁▁▁▁▁▁▁█ ▁\n  194 ms           Histogram: frequency by time          200 ms <\n\n Memory estimate: 7.63 MiB, allocs estimate: 24.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Notice that now, we are about six times faster than the first solution, albeit passing the pre code is getting messy. Also notice that we spent a very little time in garbage collector. Running the profiler, ","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Profile.clear()\n@profile g3(p,n)\nProfileSVG.save(\"/tmp/profile3.svg\")","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"we see here that there is a very little what we can do now. May-be, remove bounds checks (more on this later) and make the code a bit nicer.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Let's look at solution from a Discourse","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"using StaticArrays, BenchmarkTools\n\nfunction f(t0,t1)\n    cis0, cis1 = cis(t0), cis(t1)\n    m0 = @SMatrix [ conj(cis0) 0 ; 0 cis0]\n    m1 = @SMatrix [ conj(cis1) 0 ; 0 cis1]\n    r = m1 * (m0 * @SVector [1. , 0.])\n    return abs2(r[1])\nend\n\ng(p) = [f(p[1,i],p[2,i]) for i in axes(p,2)]","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"julia> @benchmark g(p)\n Range (min … max):  36.076 ms … 43.657 ms  ┊ GC (min … max): 0.00% … 9.96%\n Time  (median):     37.948 ms              ┊ GC (median):    0.00%\n Time  (mean ± σ):   38.441 ms ±  1.834 ms  ┊ GC (mean ± σ):  1.55% ± 3.60%\n\n        █▃▅   ▅▂  ▂\n  ▅▇▇███████▅███▄████▅▅▅▅▄▇▅▇▄▇▄▁▄▇▄▄▅▁▄▁▄▁▄▅▅▁▁▅▁▁▅▄▅▄▁▁▁▁▁▅ ▄\n  36.1 ms         Histogram: frequency by time        43.4 ms <\n\n Memory estimate: 7.63 MiB, allocs estimate: 2.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"We can see that it is six-times faster than ours while also being much nicer to read and  having almost no allocations. Where is the catch? It uses StaticArrays which offers linear algebra primitices performant for vectors and matrices of small size. They are allocated on stack, therefore there is no pressure of GarbageCollector and the type is specialized on size of matrices (unlike regular matrices) works on arrays of an sizes. This allows the compiler to perform further optimizations like unrolling loops, etc.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"What we have learned so far?","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Profiler is extremely useful in identifying functions, where your code spends most time.\nMemory allocation (on heap to be specific) can be very bad for the performance. We can generally avoided by pre-allocation (if possible) or allocating on the stack (Julia offers increasingly larger number of primitives for hits. We have already seen StaticArrays, DataFrames now offers for example String3, String7, String15, String31).\nBenchmarking is useful for comparison of solutions","category":"page"},{"location":"lecture_05/lecture/#Replacing-deep-copies-with-shallow-copies-(use-view-if-possible)","page":"Lecture","title":"Replacing deep copies with shallow copies (use view if possible)","text":"","category":"section"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Let's look at the following function computing mean of a columns","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"function cmean(x::AbstractMatrix{T}) where {T}\n\to = zeros(T, size(x,1))\n\tfor i in axes(x, 2)\n\t\to .+= x[:,i]\t\t\t\t\t\t\t\t# line 4\n\tend\n\tn = size(x, 2)\n\tn > 0 ? o ./ n : o \nend\nx = randn(2, 10000)","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"@benchmark cmean(x)\nBenchmarkTools.Trial: 10000 samples with 1 evaluation.\n Range (min … max):  371.018 μs …   3.291 ms  ┊ GC (min … max): 0.00% … 83.30%\n Time  (median):     419.182 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   482.785 μs ± 331.939 μs  ┊ GC (mean ± σ):  9.91% ± 12.02%\n\n  ▃█▄▃▃▂▁                                                       ▁\n  ████████▇▆▅▃▁▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃▇██ █\n  371 μs        Histogram: log(frequency) by time       2.65 ms <\n\n Memory estimate: 937.59 KiB, allocs estimate: 10001.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"What we see that function is performing more than 10000 allocations. They come from x[:,i] which allocates a new memory and copies the content. In this case, this is completely unnecessary, as the content of the array x is never modified. We can avoid it by creating a view into an x, which you can imagine as a pointer to x which automatically adjust the bounds. Views can be constructed either using a function call view(x, axes...) or using a convenience macro @view which turns the usual notation x[...] to view(x, ...)","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"function view_cmean(x::AbstractMatrix{T}) where {T}\n\to = zeros(T, size(x,1))\n\tfor i in axes(x, 2)\n\t\to .+= @view x[:,i]\n\tend\n\tn = size(x,2)\n\tn > 0 ? o ./ n : o \nend","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"We obtain instantly a 10-fold speedup","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"julia> @benchmark view_cmean(x)\nBenchmarkTools.Trial: 10000 samples with 1 evaluation.\n Range (min … max):  36.802 μs … 166.260 μs  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     41.676 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   42.936 μs ±   9.921 μs  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n  ▂ █▆█▆▂      ▁▁ ▁ ▁                                          ▂\n  █▄█████████▇▅██▆█▆██▆▆▇▆▆▆▆▇▆▅▆▆▅▅▁▅▅▆▇▆▆▆▆▄▃▆▆▆▄▆▄▅▅▄▆▅▆▅▄▆ █\n  36.8 μs       Histogram: log(frequency) by time      97.8 μs <\n\n Memory estimate: 96 bytes, allocs estimate: 1.","category":"page"},{"location":"lecture_05/lecture/#Traverse-arrays-in-the-right-order","page":"Lecture","title":"Traverse arrays in the right order","text":"","category":"section"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Let's now compute rowmean using the function similar to cmean and since we have learnt from the above, we use the view to have non-allocating version","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"function rmean(x::AbstractMatrix{T}) where {T}\n\to = zeros(T, size(x,2))\n\tfor i in axes(x, 1)\n\t\to .+= @view x[i,:]\n\tend\n\tn = size(x,1)\n\tn > 0 ? o ./ n : o \nend\nx = randn(10000, 2)","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"x = randn(10000, 2)\n@benchmark rmean(x)\nBenchmarkTools.Trial: 10000 samples with 1 evaluation.\n Range (min … max):  44.165 μs … 194.395 μs  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     46.654 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   48.544 μs ±  10.940 μs  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n  █▆█▇▄▁            ▁                                          ▂\n  ██████▇▇▇▇▆▇▅██▇█▇█▇▆▅▄▄▅▅▄▄▄▄▂▄▅▆▅▅▅▆▅▅▅▆▄▆▄▄▅▅▄▅▄▄▅▅▅▅▄▄▃▅ █\n  44.2 μs       Histogram: log(frequency) by time       108 μs <\n\n Memory estimate: 192 bytes, allocs estimate: 2.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"The above seems OK and the speed is comparable to our tuned cmean.  But, can we actually do better? We have to realize that when we are accessing slices in the matrix x, they are not aligned in the memory. Recall that Julia is column major (like Fortran and unlike C and Python), which means that consecutive arrays of memory are along columns. i.e for a matrix with n rows and m columns they are aligned as ","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"1 | n + 1 | 2n + 1 | ⋯ | (m-1)n + 1\n2 | n + 2 | 2n + 2 | ⋯ | (m-1)n + 2\n3 | n + 3 | 2n + 3 | ⋯ | (m-1)n + 3\n⋮ |   ⋮   |    ⋮   | ⋯ |        ⋮  \nn |  2n   |    3n  | ⋯ |       mn","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"accessing non-consecutively is really bad for cache, as we have to load the memory into a cache line and use a single entry (in case of Float64 it is 8 bytes) out of it, discard it and load another one. If cache line has length 32 bytes, then we are wasting remaining 24 bytes. Therefore, we rewrite rmean to access the memory in consecutive blocks as follows, where we essentially sum the matrix column by columns.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"function aligned_rmean(x::AbstractMatrix{T}) where {T}\n\to = zeros(T, size(x,2))\n\tfor i in axes(x, 2)\n\t\to[i] = sum(@view x[:, i])\n\tend\n\tn = size(x, 1)\n\tn > 0 ? o ./ n : o \nend\n\naligned_rmean(x) ≈ rmean(x)","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"julia> @benchmark aligned_rmean(x)\nBenchmarkTools.Trial: 10000 samples with 10 evaluations.\n Range (min … max):  1.988 μs …  11.797 μs  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     2.041 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   2.167 μs ± 568.616 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n  █▇▄▂▂▁▁ ▁  ▂▁                                               ▂\n  ██████████████▅▅▃▁▁▁▁▁▄▅▄▁▅▆▆▆▇▇▆▆▆▆▅▃▅▅▄▅▅▄▄▄▃▃▁▁▁▄▁▁▄▃▄▃▆ █\n  1.99 μs      Histogram: log(frequency) by time      5.57 μs <\n\n Memory estimate: 192 bytes, allocs estimate: 2.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Running the benchmark shows that we have about 20x speedup and we are on par with Julia's built-in functions.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Remark tempting it might be, there is actually nothing we can do to speed-up the cmean function. This trouble is inherent to the processor design and you should be careful how you align things in the memory, such that it is performant in your project","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Detecting this type of inefficiencies is generally difficult, and requires processor assisted measurement. LIKWID.jl is a wrapper for a LIKWID library providing various processor level statistics, like throughput, cache misses","category":"page"},{"location":"lecture_05/lecture/#Type-stability","page":"Lecture","title":"Type stability","text":"","category":"section"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Sometimes it happens that we create a non-stable code, which might be difficult to spot at first, for a non-trained eye. A prototypical example of such bug is as follows","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"function poor_sum(x)\n\ts = 0\n\tn = length(x)\n\tfor i in 1:n\n\t\ts += x[i]\t\n\tend\n\ts\nend","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"x = randn(10^8);\njulia> @benchmark poor_sum(x)\nBenchmarkTools.Trial: 23 samples with 1 evaluation.\n Range (min … max):  222.055 ms … 233.552 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     225.259 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   225.906 ms ±   3.016 ms  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n  ▁ ▁ ▁▁█  ▁▁  ▁ ▁█ ▁ ▁ ▁ ▁ ▁    ▁▁▁▁                      ▁  ▁\n  █▁█▁███▁▁██▁▁█▁██▁█▁█▁█▁█▁█▁▁▁▁████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁█ ▁\n  222 ms           Histogram: frequency by time          234 ms <\n\n Memory estimate: 16 bytes, allocs estimate: 1.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Can we do better? Let's look what profiler says.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"using Profile, ProfileSVG\nProfile.clear()\n@profile  poor_sum(x)\nProfileSVG.save(\"/tmp/profile4.svg\")","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"The profiler (output here) does not show any red, which means that according to the profilerthe code is type stable (and so does the @code_typed poor_sum(x) does not show anything bad.) Yet, we can see that the fourth line of the poor_sum function takes unusually long (there is a white area above, which means that the time spend in childs of that line (iteration and sum) does the sum to the time spent in the line, which is fishy). ","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"A close lookup on the code reveals that s is initialized as Int64, because typeof(0) is Int64. But then in the loop, we add to s a Float64 because x is Vector{Float64}, which means during the execution, the type s changes the type.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"So why nor compiler nor @code_typed(poor_sum(x)) warns us about the type instability? This is because of the optimization called small unions, where Julia can optimize \"small\" type instabilitites (recall the second lecture).","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"We can fix it for example by initializing x to be the zero of an element type of the array x (though this solution technically assumes x is an array, which means that poor_sum will not work for generators)","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"function stable_sum(x)\n\ts = zero(eltype(x))\n\tn = length(x)\n\tfor i in 1:n\n\t\ts += x[i]\n\tend\n\ts\nend","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"But there is no difference, due to small union optimization (the above would kill any performance in older versions.)","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"julia> @benchmark stable_sum(x)\nBenchmarkTools.Trial: 42 samples with 1 evaluation.\n Range (min … max):  119.491 ms … 123.062 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     120.535 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   120.687 ms ± 819.740 μs  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n            █\n  ▅▁▅▁▅▅██▅▁█▁█▁██▅▁█▅▅▁█▅▁█▁█▅▅▅█▁▁▁▁▁▁▁▅▁▁▁▁▁▅▁▅▁▁▁▁▁▁▅▁▁▁▁▁▅ ▁\n  119 ms           Histogram: frequency by time          123 ms <\n\n Memory estimate: 16 bytes, allocs estimate: 1.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"info: Info\nThe optimization of small unions has been added in Julia 1.0. If we compare the of the same function in Julia 0.6, the difference is strikingjulia> @time poor_sum(x)\n  1.863665 seconds (300.00 M allocations: 4.470 GiB, 4.29% gc time)\n9647.736705951513\njulia> @time stable_sum(x)\n  0.167794 seconds (5 allocations: 176 bytes)\n9647.736705951513The optimization of small unions is a big deal. It simplifies implementation of arrays with missing values, or allows to signal that result has not been produced by returning missing. In case of arrays with missing values, the type of element is Union{Missing,T} where T is the type of non-missing element.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"The main problem with the above formulation is that Julia is checking that getting element of arrays from x[i] is within bounds. We can remove the check using @inbounds macro.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"function inbounds_sum(x)\n\tn = length(x)\n\tn == 0 && return(zero(eltype(x)))\n\tn == 1 && return(x[1])\n    @inbounds a1 = x[1]\n    @inbounds a2 = x[2]\n    v = a1 + a2\n    @inbounds for i = 3 : n\n        ai = x[i]\n        v += ai\n    end\n    v\nend","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"This did not give us much.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"BenchmarkTools.Trial: 42 samples with 1 evaluation.\n Range (min … max):  117.804 ms … 123.634 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     119.077 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   119.387 ms ±   1.225 ms  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n           ▂  ▂█\n  ▅█▁▅▅▁██▅█████▅▅▁██▁▅▅▁▅▁▅▁▅▅▁▁▅▁▅▁▁▁▁▁▁▁▁▁▁▅▁▁▁▁▁▁▅▁▁▁▁▁▁▁▁▅ ▁\n  118 ms           Histogram: frequency by time          124 ms <\n\n Memory estimate: 16 bytes, allocs estimate: 1.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Further, we can tell Julia that it is safe to vectorize the code","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"function simd_sum(x)\n\tn = length(x)\n\tn == 0 && return(zero(eltype(x)))\n\tn == 1 && return(x[1])\n    @inbounds a1 = x[1]\n    @inbounds a2 = x[2]\n    v = a1 + a2\n    @simd for i = 3 : n\n        @inbounds ai = x[i]\n        v += ai\n    end\n    v\nend","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"julia> @benchmark simd_sum(x)\nBenchmarkTools.Trial: 90 samples with 1 evaluation.\n Range (min … max):  50.854 ms … 62.260 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     54.656 ms              ┊ GC (median):    0.00%\n Time  (mean ± σ):   55.630 ms ±  3.437 ms  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n    █  ▂     ▄ ▂                    ▂    ▂            ▄\n  ▄▆█▆▁█▄██▁▁█▆██▆▄█▁▆▄▁▆▆▄▁▁▆▁▁▁▁▄██▁█▁▁█▄▄▆▆▄▄▁▄▁▁▁▄█▁▆▁▆▁▆ ▁\n  50.9 ms         Histogram: frequency by time        62.1 ms <\n\n Memory estimate: 16 bytes, allocs estimate: 1.","category":"page"},{"location":"lecture_05/lecture/#Global-variables-introduce-type-instability-(avoid-non-const-globals)","page":"Lecture","title":"Global variables introduce type instability (avoid non-const globals)","text":"","category":"section"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"function implicit_sum()\n    n = length(y)\n    n == 0 && return(zero(eltype(y)))\n    n == 1 && return(y[1])\n    @inbounds a1 = y[1]\n    @inbounds a2 = y[2]\n    v = a1 + a2\n    @simd for i = 3 : n\n        @inbounds ai = y[i]\n        v += ai\n    end\n    v\nend","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"julia> @benchmark implicit_sum()\nBenchmarkTools.Trial: 1 sample with 1 evaluation.\n Single result which took 10.837 s (11.34% GC) to evaluate,\n with a memory estimate of 8.94 GiB, over 499998980 allocations.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"What? The same function where I made the parameters to be implicit has just turned nine orders of magnitude slower? ","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Let's look what the profiler says","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Profile.clear()\ny = randn(10^4)\n@profile implicit_sum()\nProfileSVG.save(\"/tmp/profile5.svg\")","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"(output available here) which does not say anything except that there is a huge type-instability (red bar). In fact, the whole computation is dominated by Julia constantly determining the type (of something).","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"How can we determine, where is the type instability?","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"@code_typed implicit_sum() is \nCthulhu as @descend implicit_sum()\nJET (available with the nightly build of Julia and 1.7 pre-releases)","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"info: Info\nJETJET is a code analyzer, which analyze the code without actually invoking it. The technique is called \"abstract interpretation\" and JET internally uses Julia's native type inference implementation, so it can analyze code as fast/correctly as Julia's code generation. JET internally traces the compiler's knowledge about types and detects, where the compiler cannot infer the type (outputs Any). Note that small unions are no longer considered type instability, since as we have seen above, the performance bottleneck is small. We can use JET as \tusing JET\n\t@report_opt implicit_sum()","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"All of these tools tells us that the Julia's compiler cannot determine the type of x. But why? I can just invoke typeof(x) and I know immediately the type of x. ","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"To understand the problem, you have to think about the compiler.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"You define function implicit_sum().\nIf you call implicit_sum and x does not exist, Julia will happily crash.\nIf you call implicit_sum and x exist, the function will give you the result (albeit slowly). At this moment, Julia has to specialize implicit_sum. It has two options how to behave with respect to x.   a. The compiler can assume that type of x is the current typeof(x) but that would mean that if a user redefines x and change the type, the specialization of the function implicit_sum will assume the wrong type of x and it can have unexpected results.  b. The compiler take safe approach and determine the type of x inside the function implicit_sum and behave accordingly (recall that julia is dynamically typed). Yet, not knowing the type precisely is absolute disaster for performance.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Notice the compiler dispatches on the name of the function and type of its arguments, hence, the compiler cannot create different versions of implicit_sum for different types of x, since it is not in argument, hence the dynamic resolution of types x inside implicit_sum function.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Julia takes the safe approach, which we can verify that although the implicit_sum was specialized (compiled) when x was Vector{Float64}, it works for other types","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"x = rand(Int, 1000)\nimplicit_sum() ≈ sum(x)\nx = map(x -> Complex(x...), zip(rand(1000), rand(1000)))\nimplicit_sum() ≈ sum(x)","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"This means, using global variables inside functions without passing them as arguments ultimately leads to type-instability. What are the solutions","category":"page"},{"location":"lecture_05/lecture/#Declaring-x-as-const","page":"Lecture","title":"Declaring x as const","text":"","category":"section"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"We can declare x as const, which tells the compiler that x will not change (and for the compiler mainly indicates that type of x will not change).","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Let's see that, but restart the julia before trying","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"using BenchmarkTools\nfunction implicit_sum()\n\tn = length(x)\n\tn == 0 && return(zero(eltype(x)))\n\tn == 1 && return(x[1])\n    @inbounds a1 = x[1]\n    @inbounds a2 = x[2]\n    v = a1 + a2\n    @simd for i = 3 : n\n        @inbounds ai = x[i]\n        v += ai\n    end\n    v\nend\nconst x = randn(10^8);","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"after benchmarking we see that the speed is the same as of simd_sum().","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"julia> @benchmark implicit_sum()\nBenchmarkTools.Trial: 99 samples with 1 evaluation.\n Range (min … max):  47.864 ms … 58.365 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     50.042 ms              ┊ GC (median):    0.00%\n Time  (mean ± σ):   50.479 ms ±  1.598 ms  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n          ▂ █▂▂▇ ▅  ▃\n  ▃▁▃▁▁▁▁▇██████▅█▆██▇▅▆▁▁▃▅▃▃▁▃▃▁▃▃▁▁▃▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▃▁▁▁▁▁▃ ▁\n  47.9 ms         Histogram: frequency by time        57.1 ms <\n\n Memory estimate: 0 bytes, allocs estimate: 0.","category":"page"},{"location":"lecture_05/lecture/#Barier-function","page":"Lecture","title":"Barier function","text":"","category":"section"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"The reason, why the implicit_sum is so slow that every time the function invokes getindex and +, it has to resolve types. The solution would be to limit the number of resolutions, which can done by passing all parameters to inner function as follows.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"using BenchmarkTools\nfunction simd_sum(x)\n\tn = length(x)\n\tn == 0 && return(zero(eltype(x)))\n\tn == 1 && return(x[1])\n    @inbounds a1 = x[1]\n    @inbounds a2 = x[2]\n    v = a1 + a2\n    @simd for i = 3 : n\n        @inbounds ai = x[i]\n        v += ai\n    end\n    v\nend\n\nfunction barrier_sum()\n\tsimd_sum(x)\nend\nx = randn(10^8);","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"@benchmark barrier_sum()\nBenchmarkTools.Trial: 93 samples with 1 evaluation.\n Range (min … max):  50.229 ms … 58.484 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     53.882 ms              ┊ GC (median):    0.00%\n Time  (mean ± σ):   54.064 ms ±  2.892 ms  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n   ▂▆█                                          ▆▄\n  ▆█████▆▄█▆▄▆▁▄▄▄▄▁▁▄▁▄▄▆▁▄▄▄▁▁▄▁▁▄▁▁▆▆▁▁▄▄▁▄▆████▄▆▄█▆▄▄▄▄█ ▁\n  50.2 ms         Histogram: frequency by time        58.4 ms <\n\n Memory estimate: 16 bytes, allocs estimate: 1.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"using JET\n@report_opt barrier_sum()","category":"page"},{"location":"lecture_05/lecture/#Boxing-in-closure","page":"Lecture","title":"Boxing in closure","text":"","category":"section"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Recall closure is a function which contains some parameters contained ","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"An example of closure from Jet.jl","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"function abmult(r::Int)\n   if r < 0\n       r = -r\n   end\n   # the closure assigned to `f` make the variable `r` captured\n   f = x -> x * r\n   return f\nend;","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Another example of closure counting the error and printing it every steps","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"function initcallback(; steps = 10)\n\ti = 0\n\tts = time()\n\ty = 0.0\n\tcby = function evalcb(_y)\n\t\ti += 1.0\n\t\ty += _y\n\t\tif mod(i, steps) == 0\n\t\t\tl = y / steps\n\t\t\ty = 0.0\n\t\t\tprintln(i, \": loss: \", l,\" time per step: \",round((time() - ts)/steps, sigdigits = 2))\n\t\t\tts = time()\n\t\tend\n\tend\n\tcby\nend\n\ncby = initcallback()\n\nfor i in 1:100\n\tcby(rand())\nend","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"function simulation()\n\tcby = initcallback(;steps = 10000)\t#intentionally disable printing\n\tfor i in 1:1000\n\t\tcby(sin(rand()))\n\tend\nend\n\n@benchmark simulation()","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"using Profile, ProfileSVG\nProfile.clear()\n@profile (for i in 1:100; simulation(); end)\nProfileSVG.save(\"/tmp/profile.svg\")","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"We see a red bars in lines 4 and 8 of evalcb, which indicates the type instability hindering the performance. Why they are there? The answer is tricky.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"In closures, as the name suggest, function closes over (or captures) some variables defined in the function outside the function that is returned. If these variables are of primitive types (think Int, Float64, etc.), the compiler assumes that they might be changed. Though when primitive types are used in calculations, the result is not written to the same memory location but to a new location and the name of the variable is made to point to this new variable location (this is called rebinding). We can demonstrate it on this example [2].","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"[2]: Invenia blog entry","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"julia> x = [1];\n\njulia> objectid(x)\n0x79eedc509237c203\n\njulia> x .= [10];  # mutating contents\n\njulia> objectid(x)\n0x79eedc509237c203\n\njulia> y = 100;\n\njulia> objectid(y)\n0xdb216d4e5c739c77\n\njulia> y = y + 100;  # rebinding the variable name\n\njulia> objectid(y)\n0xb642af5f06b41e88","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Since the inner function needs to point to the same location, julia uses Box container which can be seen as a translation, where the pointer inside the Box can change while the inner function contains the same pointer to the Box. This makes possible to change the captured variables and tracks changes in the point. Sometimes (it can happen many time) the compiler fails to determine that the captured variable is read only, and it wrap it (box it) in the Box wrapper, which makes it type unstable, as Box does not track types (it would be difficult as even the type can change in the inner function). This is what we can see in the first example of abmult. In the second example, the captured variable y and i changes and the compiler is right.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"What can we do?","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"The first difficulty is to even detect this case. We can spot it using @code_typed and of course JET.jl can do it and it will warn us. Above we have seen the effect of the profiler.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Using @code_typed","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"julia> @code_typed abmult(1)\nCodeInfo(\n1 ─ %1  = Core.Box::Type{Core.Box}\n│   %2  = %new(%1, r@_2)::Core.Box\n│   %3  = Core.isdefined(%2, :contents)::Bool\n└──       goto #3 if not %3\n2 ─       goto #4\n3 ─       $(Expr(:throw_undef_if_not, :r, false))::Any\n4 ┄ %7  = Core.getfield(%2, :contents)::Any\n│   %8  = (%7 < 0)::Any\n└──       goto #9 if not %8\n5 ─ %10 = Core.isdefined(%2, :contents)::Bool\n└──       goto #7 if not %10\n6 ─       goto #8\n7 ─       $(Expr(:throw_undef_if_not, :r, false))::Any\n8 ┄ %14 = Core.getfield(%2, :contents)::Any\n│   %15 = -%14::Any\n└──       Core.setfield!(%2, :contents, %15)::Any\n9 ┄ %17 = %new(Main.:(var\"#5#6\"), %2)::var\"#5#6\"\n└──       return %17\n) => var\"#5#6\"","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Using Jet.jl (recall it requires the very latest Julia 1.7)","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"julia> @report_opt abmult(1)\n═════ 3 possible errors found ═════\n┌ @ REPL[15]:2 r = Core.Box(:(_7::Int64))\n│ captured variable `r` detected\n└──────────────\n┌ @ REPL[15]:2 Main.<(%7, 0)\n│ runtime dispatch detected: Main.<(%7::Any, 0)\n└──────────────\n┌ @ REPL[15]:3 Main.-(%14)\n│ runtime dispatch detected: Main.-(%14::Any)\n└──────────────","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Sometimes, we do not have to do anything. For example the above example of evalcb function, we assume that all the other code in the simulation would take much more time so a little type instability is not important.\nAlternatively, we can explicitly use Ref instead of the Box, which are typed wrappers, but they are awkward to use. ","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"function ref_abmult(r::Int)\n   if r < 0\n       r = -r\n   end\n   rr = Ref(r)\n   f = x -> x * rr[]\n   return f\nend;","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"We can see in @code_typed that the compiler is happy as it can resolve the types correctly","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"julia> @code_typed ref_abmult(1)\nCodeInfo(\n1 ─ %1 = Base.slt_int(r@_2, 0)::Bool\n└──      goto #3 if not %1\n2 ─ %3 = Base.neg_int(r@_2)::Int64\n3 ┄ %4 = φ (#2 => %3, #1 => _2)::Int64\n│   %5 = %new(Base.RefValue{Int64}, %4)::Base.RefValue{Int64}\n│   %6 = %new(var\"#7#8\"{Base.RefValue{Int64}}, %5)::var\"#7#8\"{Base.RefValue{Int64}}\n└──      return %6\n) => var\"#7#8\"{Base.RefValue{Int64}}","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Jet is also happy.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"\njulia> @report_opt ref_abmult(1)\nNo errors !\n","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"So when you use closures, you should be careful of the accidental boxing, since it can inhibit the speed of code. This is a big deal in Multithreadding and in automatic differentiation, both heavily uses closures. You can track the discussion here.","category":"page"},{"location":"lecture_05/lecture/#NamedTuples-are-more-efficient-that-Dicts","page":"Lecture","title":"NamedTuples are more efficient that Dicts","text":"","category":"section"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"It happens a lot in scientific code, that some experiments have many parameters. It is therefore very convenient to store them in Dict, such that when adding a new parameter, we do not have to go over all defined functions and redefine them.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Imagine that we have a (nonsensical) simulation like ","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"settings = Dict(:stepsize => 0.01, :h => 0.001, :iters => 500, :info => \"info\")\nfunction find_min!(f, x, p)\n\tfor i in 1:p[:iters]\n\t\tx̃ = x + p[:h]\n\t\tfx = f(x)\t\t\t\t\t\t\t\t\t# line 4\n\t\tx -= p[:stepsize] * (f(x̃) - fx)/p[:h]\t\t# line 5\n\tend\n\tx\nend","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Notice the parameter p is a Dict and notice that it can contain arbitrary parameters, which is useful. Hence, Dict is cool for passing parameters. Let's now run the function through the profiler","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"x₀ = rand()\nf(x) = x^2\nProfile.clear()\n@profile find_min!(f, x₀, settings)\nProfileSVG.save(\"/tmp/profile6.svg\")","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"from the profiler's output here we can see some type instabilities. Where they come from? The compiler does not have any information about types stored in settings, as the type of stored values are Any (caused by storing String and Int).","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"julia> typeof(settings)\nDict{Symbol, Any}","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"The second problem is get operation on dictionaries is very time consuming operation (although technically it is O(1)), because it has to search the key in the list. Dicts are designed as a mutable container, which is not needed in our use-case, as the settings are static. For similar use-cases, Julia offers NamedTuple, with which we can construct settings as ","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"nt_settings = (;stepsize = 0.01, h=0.001, iters=500, :info => \"info\")","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"The NamedTuple is fully typed, but which we mean the names of fields are part of the type definition and fields are also part of type definition. You can think of it as a struct. Moreover, when accessing fields in NamedTuple, compiler knows precisely where they are located in the memory, which drastically reduces the access time.  Let's see the effect in BenchmarkTools.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"julia> @benchmark find_min!(x -> x^2, x₀, settings)\nBenchmarkTools.Trial: 10000 samples with 1 evaluation.\n Range (min … max):   86.350 μs …   4.814 ms  ┊ GC (min … max): 0.00% … 97.61%\n Time  (median):      90.747 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   102.405 μs ± 127.653 μs  ┊ GC (mean ± σ):  4.69% ±  3.75%\n\n  ▅██▆▂     ▁▁    ▁                                             ▂\n  ███████▇▇████▇███▇█▇████▇▇▆▆▇▆▇▇▇▆▆▆▆▇▆▇▇▅▇▆▆▆▆▄▅▅▄▅▆▆▅▄▅▃▅▃▅ █\n  86.4 μs       Histogram: log(frequency) by time        209 μs <\n\n Memory estimate: 70.36 KiB, allocs estimate: 4002.\n\njulia> @benchmark find_min!(x -> x^2, x₀, nt_settings)\nBenchmarkTools.Trial: 10000 samples with 7 evaluations.\n Range (min … max):  4.179 μs … 21.306 μs  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     4.188 μs              ┊ GC (median):    0.00%\n Time  (mean ± σ):   4.493 μs ±  1.135 μs  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n  █▃▁        ▁ ▁  ▁                                          ▁\n  ████▇████▄██▄█▃██▄▄▇▇▇▇▅▆▆▅▄▄▅▄▅▅▅▄▁▅▄▁▄▄▆▆▇▄▅▆▄▄▃▄▆▅▆▁▄▄▄ █\n  4.18 μs      Histogram: log(frequency) by time     10.8 μs <\n\n Memory estimate: 16 bytes, allocs estimate: 1.","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"Checking the output with JET, there is no type instability anymore","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"@report_opt find_min!(f, x₀, nt_settings)\nNo errors !","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"<!– ","category":"page"},{"location":"lecture_05/lecture/#Don't-use-IO-unless-you-have-to","page":"Lecture","title":"Don't use IO unless you have to","text":"","category":"section"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"debug printing in performance critical code should be kept to minimum or using in memory/file based logger in stdlib Logging.jl","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"function find_min!(f, x, p; verbose=true)\n\tfor i in 1:p[:iters]\n\t\tx̃ = x + p[:h]\n\t\tfx = f(x)\n\t\tx -= p[:stepsize] * (f(x̃) - fx)/p[:h]\n\t\tverbose && println(\"x = \", x, \" | f(x) = \", fx)\n\tend\n\tx\nend\n\n@btime find_min!($f, $x₀, $params_tuple; verbose=true)\n@btime find_min!($f, $x₀, $params_tuple; verbose=false)","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"interpolation of strings is even worse https://docs.julialang.org/en/v1/manual/performance-tips/#Avoid-string-interpolation-for-I/O","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"function find_min!(f, x, p; verbose=true)\n\tfor i in 1:p[:iters]\n\t\tx̃ = x + p[:h]\n\t\tfx = f(x)\n\t\tx -= p[:stepsize] * (f(x̃) - fx)/p[:h]\n\t\tverbose && println(\"x = $x | f(x) = $fx\")\n\tend\n\tx\nend\n@btime find_min!($f, $x₀, $params_tuple; verbose=true)","category":"page"},{"location":"lecture_05/lecture/","page":"Lecture","title":"Lecture","text":"–>","category":"page"},{"location":"lecture_01/lab/#Lab-01:-Introduction-to-Julia","page":"Lab","title":"Lab 01: Introduction to Julia","text":"","category":"section"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"This lab should get everyone up to speed in the basics of Julia's installation, syntax and basic coding. For more detailed introduction you can check out Lectures 1-3 of the bachelor course.","category":"page"},{"location":"lecture_01/lab/#Testing-Julia-installation-(custom-setup)","page":"Lab","title":"Testing Julia installation (custom setup)","text":"","category":"section"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"In order to proceed further let's run a simple script to see, that the setup described in chapter Installation is working properly. After spawning a terminal/cmdline run this command:","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"julia ./test_setup.jl","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"The script does the following ","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"\"Tests\" if Julia is added to path and can be run with julia command from anywhere\nPrints Julia version info\nChecks Julia version.\nChecks git configuration (name + email)\nCreates an environment configuration files\nInstalls a basic pkg called BenchmarkTools, which we will use for benchmarking a simple function later in the labs.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"There are some quality of life improvements over long term support versions of Julia and thus throughout this course we will use the latest stable release of Julia 1.6.x.","category":"page"},{"location":"lecture_01/lab/#Polynomial-evaluation-example","page":"Lab","title":"Polynomial evaluation example","text":"","category":"section"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Let's consider a common mathematical example for evaluation of nth-degree polynomial","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"f(x) = a_nx^n + a_n-1x^n-1 + dots + a_0x^0","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"where x in mathbbR and veca in mathbbR^n+1.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"The simplest way of writing this in a generic fashion is realizing that essentially the function f is really implicitly containing argument veca, i.e. f equiv f(veca x), yielding the following Julia code","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"function polynomial(a, x)\n    accumulator = 0\n    for i in length(a):-1:1\n        accumulator += x^(i-1) * a[i] # ! 1-based indexing for arrays\n    end\n    return accumulator\nend\nnothing #hide","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Evaluate the code of the function called polynomial in Julia REPL and evaluate the function itself with the following arguments.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"a = [-19, 7, -4, 6] # list coefficients a from a^0 to a^n\nx = 3               # point of evaluation\nnothing #hide","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"The simplest way is to just copy&paste into an already running terminal manually. As opposed to the default Python REPL, Julia can deal with the blocks of code and different indentation much better without installation of an ipython-like REPL. There are ways to make this much easier in different text editors/IDEs:","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"VSCode - when using Julia extension is installed and .jl file is opened, Ctrl/Cmd+Enter will spawn Julia REPL\nSublime Text - Ctrl/Cmd+Enter with Send Code pkg (works well with Linux terminal or tmux, support for Windows is poor)\nVim - there is a Julia language plugin, which can be combine with vimcmdline to gain similar functionality","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Either way, you should see the following:","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"function polynomial(a, x)\n    accumulator = 0\n    for i in length(a):-1:1\n        accumulator += x^(i-1) * a[i] # ! 1-based indexing for arrays\n    end\n    return accumulator\nend","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Similarly we enter the arguments of the function a and x:","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"a = [-19, 7, -4, 6]\nx = 3","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Function call intuitively takes the name of the function with round brackets as arguments, i.e. works in the same way as majority of programming languages. The result is printed unless a ; is added at the end of the statement.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"polynomial(a, x)    # function call","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Thanks to the high level nature of Julia language it is often the case that examples written in pseudocode are almost directly rewritable into the language itself without major changes and the code can be thus interpreted easily.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"(Image: polynomial_explained)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Due to the existence of the end keyword, indentation is not necessary as opposed to other languages such as Python, however it is strongly recommended to use it, see style guide.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Though there are libraries/IDEs that allow us to step through Julia code (Debugger.jl link and VSCode link), here we will explore the code interactively in REPL by evaluating pieces of code separately.","category":"page"},{"location":"lecture_01/lab/#Basic-types,-assignments-and-variables","page":"Lab","title":"Basic types, assignments and variables","text":"","category":"section"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"When defining a variable through an assignment we get the representation of the right side, again this is different from the default  behavior in Python, where the output of assignments a = [-19, 7, -4, 6] or x = 3, prints nothing. Internally Julia returns the result of the display function.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"a = [-19, 7, -4, 6]\ndisplay(a) # should return the same thing as the line above","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"As you can see, the string that is being displayed contains information about the contents of a variable along with it's type in this case this is a Vector/Array of Int types. If the output of display is insufficient the type of variable can be checked with the typeof function:","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"typeof(a)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Additionally for collection/iterable types such as Vector there is also the eltype function, which returns the type of elements in the collection.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"eltype(a)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"In most cases variables store just a reference to a place in memory either stack/heap (exceptions are primitive types such as Int, Float) and therefore creating an array a, \"storing\" the reference in b with an assignment and changing elements of b, e.g. b[1] = 2, changes also the values in a.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Create variables x and accumulator, storing floating point 3.0 and integer value 0 respectively. Check the type of variables using typeof function.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"x = 3.0\naccumulator = 0\ntypeof(x), typeof(accumulator)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_01/lab/#For-cycles-and-ranges","page":"Lab","title":"For cycles and ranges","text":"","category":"section"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Moving further into the polynomial function we encounter the definition of a for cycle, with the de facto standard syntax","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"for iteration_variable in iterator\n    # do something\nend","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"As an example of iterator we have used an instance of a range type ","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"r = length(a):-1:1\ntypeof(r)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"As opposed to Python, ranges in Julia are inclusive, i.e. they contain number from start to end - in this case running from 4 to 1 with negative step -1, thus counting down. This can be checked with the collect and/or length functions.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"collect(r)\nlength(r)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Create variable c containing an array of even numbers from 2 to 42. Furthermore create variable d that is different from c only at the 7th position, which will contain 13.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"HINT: Use collect function for creation of c and copy for making a copy of c.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"c = collect(2:2:42)\nd = copy(c)\nd[7] = 13\nd","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_01/lab/#Functions-and-operators","page":"Lab","title":"Functions and operators","text":"","category":"section"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Let us now move from the function body to the function definition itself. From the picture at the top of the page, we can infer the general syntax for function definition:","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"function function_name(arguments)\n    # do stuff with arguments and define output value `something`\n    return something\nend","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"The return keyword can be omitted, if the last line being evaluated contains the result.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"By creating the function polynomial we have defined a variable polynomial, that from now on always refers to a function and cannot be reassigned to a different type, like for example Int.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"polynomial = 42","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"This is caused by the fact that each function defines essentially a new type, the same like Int ~ Int64 or Vector{Int}.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"typeof(polynomial)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"You can check that it is a subtype of the Function abstract type, with the subtyping operator <:","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"typeof(polynomial) <: Function","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"These concepts will be expanded further in the type lecture, however for now note that this construction is quite useful for example if we wanted to create derivative rules for our function derivativeof(::typeof(polynomial), ...).","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Looking at mathematical operators +, *, we can see that in Julia they are also standalone functions. ","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"+\n*","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"The main difference from our polynomial function is that there are multiple methods, for each of these functions. Each one of the methods coresponds to a specific combination of arguments, for which the function can be specialized to using multiple dispatch. You can see the list by calling a methods function:","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"julia> methods(+)\n# 190 methods for generic function \"+\":                                                                               \n[1] +(x::T, y::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8} in Base at\n int.jl:87                                                                                                            \n[2] +(c::Union{UInt16, UInt32, UInt64, UInt8}, x::BigInt) in Base.GMP at gmp.jl:528                                   \n[3] +(c::Union{Int16, Int32, Int64, Int8}, x::BigInt) in Base.GMP at gmp.jl:534\n...","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"One other notable difference is that these functions allow using both infix and postfix notation a + b and +(a,b), which is a specialty of elementary functions such as arithmetic operators or set operation such as ∩, ∪, ∈. ","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"The functionality of methods is complemented with the reverse lookup methodswith, which for a given type returns a list of methods that can be called with it as an argument.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"julia> methodswith(Int)\n[1] +(x::T, y::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8} in Base at int.jl:87\n[2] +(c::Union{Int16, Int32, Int64, Int8}, x::BigInt) in Base.GMP at gmp.jl:534\n[3] +(c::Union{Int16, Int32, Int64, Int8}, x::BigFloat) in Base.MPFR at mpfr.jl:384\n[4] +(x::BigFloat, c::Union{Int16, Int32, Int64, Int8}) in Base.MPFR at mpfr.jl:379\n[5] +(x::BigInt, c::Union{Int16, Int32, Int64, Int8}) in Base.GMP at gmp.jl:533\n...","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Define function called addone with one argument, that adds 1 to the argument.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"function addone(x)\n    x + 1\nend\naddone(1) == 2","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_01/lab/#Calling-for-help","page":"Lab","title":"Calling for help","text":"","category":"section"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"In order to better understand some keywords we have encountered so far, we can ask for help in the Julia's REPL itself with the built-in help terminal. Accessing help terminal can be achieved by writing ? with a query keyword after. This searches documentation of all the available source code to find the corresponding keyword. The simplest way to create documentation, that can be accessed in this way, is using so called docstrings, which are multiline strings written above function or type definition. ","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"\"\"\"\n    polynomial(a, x)\n\nReturns value of a polynomial with coefficients `a` at point `x`.\n\"\"\"\nfunction polynomial(a, x)\n    # function body\nend","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"More on this in the lecture about pkg development.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Lookup docstring for the basic functions that we have introduced in the previous exercises: typeof, eltype, length, collect, copy, methods and methodswith. ","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"BONUS: Try it with others, for example with the subtyping operator <:.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Example docstring for typeof function.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"  typeof(x)\n\n  Get the concrete type of x.\n\n  Examples\n  ≡≡≡≡≡≡≡≡≡≡\n\n  julia> a = 1//2;\n  \n  julia> typeof(a)\n  Rational{Int64}\n  \n  julia> M = [1 2; 3.5 4];\n  \n  julia> typeof(M)\n  Matrix{Float64} (alias for Array{Float64, 2})","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_01/lab/#Testing-waters","page":"Lab","title":"Testing waters","text":"","category":"section"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"As the arguments of the polynomial functions are untyped, i.e. they do not specify the allowed types like for example polynomial(a, x::Number) does, the following exercise explores which arguments the function accepts, while giving expected result.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Choose one of the variables af to ac representing polynomial coefficients and try to evaluate it with the polynomial function at point x=3 as before. Lookup the type of coefficient collection variable itself with typeof and the items in the collection with eltype. In this case we allow you to consult your solution with the expandable solution bellow to find out more information about a particular example.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"af = [-19.0, 7.0, -4.0, 6.0]\nat = (-19, 7, -4, 6)\nant = (a₀ = -19, a₁ = 7, a₂ = -4, a₃ = 6)\na2d = [-19 -4; 7 6]\nac = [2i^2 + 1 for i in -2:1]\nnothing #hide","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"typeof(af), eltype(af)\npolynomial(af, x)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"As opposed to the basic definition of a type the array is filled with Float64 types and the resulting value gets promoted as well to the Float64.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"typeof(at), eltype(at)\npolynomial(at, x)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"With round brackets over a fixed length vector we get the Tuple type, which is so called immutable \"array\" of a fixed size (its elements cannot be changed, unless initialized from scratch). Each element can be of a different type, but here we have only one and thus the Tuple is aliased into NTuple. There are some performance benefits for using immutable structure, which will be discussed later or even later.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Defining key=value pairs inside round brackets creates a structure called NamedTuple, which has the same properties as Tuple and furthermore its elements can be conveniently accessed by dot syntax, e.g. ant.a₀.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"typeof(ant), eltype(ant)\npolynomial(ant, x)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Defining a 2D array is a simple change of syntax, which initialized a matrix row by row separated by ; with spaces between individual elements. The function returns the same result because linear indexing works in 2d arrays in the column major order.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"typeof(a2d), eltype(a2d)\npolynomial(a2d, x)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"The last example shows so called array comprehension syntax, where we define and array of known length using and for loop iteration. Resulting array/vector has integer elements, however even mixed type is possible yielding Any, if there isn't any other common supertype to promote every entry into. (Use ? to look what promote and promote_type does.)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"typeof(ac), eltype(ac)\npolynomial(ac, x)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"So far we have seen that polynomial function accepts a wide variety of arguments, however there are some understandable edge cases that it cannot handle.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Consider first the vector/array of characters ach","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"ach = ['1', '2', '3', '4']","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"which themselves have numeric values (you can check by converting them to Int Int('1') or convert(Int, '1')). In spite of that, our untyped function cannot process such input, as there isn't an operation/method that would allow multiplication of Char and Int type. Julia tries to promote the argument types to some common type, however checking the promote_type(Int, Char) returns Any (union of all types), which tells us that the conversion is not possible automatically.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"typeof(ach), eltype(ach)\npolynomial(ach, x)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"In the stacktrace we can see the location of each function call. If we include the function polynomial from some file poly.jl using include(\"poly.jl\"), we will see that the location changes from REPL[X]:10 to the actual file name.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"By swapping square brackets for round in the array comprehension ac above, we have defined so called generator/iterator, which as opposed to original variable ac does not allocate an array, only the structure that produces it.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"ag = (2i^2 + 1 for i in -2:1)\ntypeof(ag), eltype(ag)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"You may notice that the element type in this case is Any, which means that a function using this generator as an argument cannot specialize based on the type and has to infer it every time an element is generated/returned. We will touch on how this affects performance in one of the later lectures.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"polynomial(ag, x)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"The problem that we face during evaluation is that generator type is missing the getindex operation, as they are made for situations where the size of the collection may be unknown and the only way of obtaining particular elements is through sequential iteration. Generators can be useful for example when creating batches of data for a machine learning training. We can \"fix\" the situation using collect function, mentioned earlier, however that again allocates an array.","category":"page"},{"location":"lecture_01/lab/#Extending/limiting-the-polynomial-example","page":"Lab","title":"Extending/limiting the polynomial example","text":"","category":"section"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Following up on the polynomial example, let's us expand it a little further in order to facilitate the arguments, that have been throwing exceptions. The first direction, which we will move forward to, is providing the user with more detailed error message when an incorrect type of coefficients has been provided.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Design an if-else condition such that the array of Char example throws an error with custom string message, telling the user what went wrong and printing the incorrect input alongside it. Confirm that we have not broken the functionality of other examples from previous exercise.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"HINTS:","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Throw the ArgumentError(msg) with throw function and string message msg. More details in help mode ? or at the end of this document.\nStrings are defined like this s = \"Hello!\"\nUse string interpolation to create the error message. It allows injecting an expression into a string with the $ syntax b = 1; s = \"Hellow Number $(b)\"\nCompare eltype of the coefficients with Char type.\nThe syntax for if-else:","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"if condition\n    println(\"true\") # true branch code\nelse\n    println(\"false\") # false branch code\nend","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Not equal condition can be written as a != b.\nThrowing an exception automatically returns from the function. Use return inside one of the branches to return the correct value.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"The simplest way is to wrap the whole function inside an if-else condition and returning only when the input is \"correct\" (it will still fail in some cases).","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"function polynomial(a, x)\n    if eltype(a) != Char\n        accumulator = 0\n        for i in length(a):-1:1\n            accumulator += x^(i-1) * a[i] # ! 1-based indexing for arrays\n        end\n        return accumulator\n    else\n        throw(ArgumentError(\"Invalid coefficients $(a) of type Char!\"))\n    end\nend\nnothing #hide","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Now this should show our predefined error message. ","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"polynomial(ach, x)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Testing on other examples should pass without errors and give the same output as before.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"polynomial(a, x)\npolynomial(af, x)\npolynomial(at, x)\npolynomial(ant, x)\npolynomial(a2d, x)\npolynomial(ac, x)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"The second direction concerns the limitation to index-able structures, which the generator example is not. For this we will have to rewrite the whole loop in a more functional programming approach using map, anonymous function and other concepts.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Rewrite the following code inside our original polynomial function with map, enumerate and anonymous function.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"accumulator = 0\nfor i in length(a):-1:1\n    accumulator += x^(i-1) * a[i] # ! 1-based indexing for arrays\nend","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"note: Anonymous functions reminder\nx -> x + 1              # unless the reference is stored it cannot be called\nplusone = x -> x + 1    # the reference can be stored inside a variable\nplusone(x)              # calling with the same syntax","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"HINTS:","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Use enumerate to obtain iterator over a that returns a tuple of ia = (i, aᵢ). With Julia 1-based indexing i starts also from 1 and goes up to length(a).\nPass this into a map with either in-place or predefined anonymous function that does the operation of x^(i-1) * aᵢ.\nUse sum to collect the resulting array into accumulator variable or directly into the return command.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"BONUS: There is even shorter way how to write this using one line function syntax and recently added options to the sum function. See entry in the help mode ?.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Ordered from the longest to the shortest, here are three examples with the same functionality (and there are definitely many more). Using the map(iterable) do itervar ... end syntax, that creates anonymous function from the block of code.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"function polynomial(a, x)\n    powers = map(enumerate(a)) do (i, aᵢ)\n        x^(i-1) * aᵢ\n    end\n    accumulator = sum(powers)\n    return accumulator\nend\nnothing #hide","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Using the default syntax for map and storing the anonymous into a variable","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"function polynomial(a, x)\n    polypow = ia -> x^(ia[1]-1) * ia[2] # \n    powers = map(polypow, enumerate(a))\n    return sum(powers)\nend\nnothing #hide","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"As the function polypow is used only once, there is no need to assign it to a local variable.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"function polynomial(a, x)\n    powers = map(ia -> x^(ia[1]-1) * ia[2], enumerate(a))\n    sum(powers)\nend\nnothing #hide","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Checking the behavior on all the inputs.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"polynomial(a, x)\npolynomial(af, x)\npolynomial(at, x)\npolynomial(ant, x)\npolynomial(a2d, x)\npolynomial(ach, x)\npolynomial(ac, x)\npolynomial(ag, x)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"BONUS: Using one line function definition and the recently added option of a function in the first argument of sum:","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"polynomial(a, x) = sum(ia -> x^(ia[1]-1) * ia[2], enumerate(a))\nnothing #hide","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_01/lab/#How-to-use-code-from-other-people","page":"Lab","title":"How to use code from other people","text":"","category":"section"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"The script that we have run at the beginning of this lab has created two new files inside the current folder:","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"./\n ├── Manifest.toml\n └── Project.toml","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Every folder with a toml file called Project.toml, can be used by Julia's pkg manager into setting so called environment, which contains a list of pkgs to be installed. Setting up or more often called activating an environment can be done either before starting Julia itself by running julia with the --project XXX flag or from within the Julia REPL, by switching to Pkg mode with ] key (similar to the help mode activated by pressing ?) and running command activate.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"So far we have used the general environment (depending on your setup), which by default does not come with any 3rd party packages and includes only the base and standard libraries - already quite powerful on its own. ","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"In order to find which environment is currently active, run the following:","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"pkg> status","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"The output of such command usually indicates the general environment located at .julia/ folder (${HOME}/.julia/ or ${APPDATA}/.julia/ in case of Unix/Windows based systems respectively)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"pkg> status\nStatus `~/.julia/environments/v1.6/Project.toml` (empty project)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Generally one should avoid working in the general environment, with the exception of some generic pkgs, such as PkgTemplates.jl, which is used for generating library templates/folder structure like the one above (link), more on this in the lecture on pkg development. ","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Activate the environment inside the current folder and check that the BenchmarkTools package has been installed. Use BenchmarkTools pkg's @btime to benchmark our polynomial function with the following arguments.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"aexp = ones(10) ./ factorial.(0:9)\nx = 1.1\nnothing #hide","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"HINTS:","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"In pkg mode use the command activate and status to check the presence. \nIn order to import the functionality from other package, lookup the keyword using in the repl help mode ?. \nThe functionality that we want to use is the @btime macro (it acts almost like a function but with a different syntax @macro arg1 arg2 arg3 ...). More on macros in the corresponding lecture.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"BONUS: Compare the output of polynomial(aexp, x) with the value of exp(x), which it approximates.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"note: Broadcasting\nIn the assignment's code, we are using quite ubiquitous concept in Julia called broadcasting or simply the dot-syntax - represented here by ./, factorial.. This concept allows to map both simple arithmetic operations as well as custom functions across arrays, with the added benefit of increased performance, when the broadcasting system can merge operations into a more efficient code. More information can be found in the official documentation or section of our bachelor course.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"There are other options to import a function/macro from a different package, however for now let's keep it simple with the using Module syntax, that brings to the REPL, all the variables/function/macros exported by the BenchmarkTools pkg. If @btime is exported, which it is, it can be accessed without specification i.e. just by calling @btime without the need for BenchmarkTools.@btime. More on the architecture of pkg/module loading in the package developement lecture.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"using BenchmarkTools\n@btime polynomial(aexp, x)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"The output gives us the time of execution averaged over multiple runs (the number of samples is defined automatically based on run time) as well as the number of allocations and the output of the function, that is being benchmarked.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"BONUS: The difference between our approximation and the \"actual\" function value computed as a difference of the two. ","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"polynomial(aexp, x) - exp(x)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"The apostrophes in the previous sentence are on purpose, because implementation of exp also relies on a finite sum, though much more sophisticated than the basic Taylor expansion.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_01/lab/#Discussion-and-future-directions","page":"Lab","title":"Discussion & future directions","text":"","category":"section"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Instead of if-else statements that would throw an error for different types, in Julia, we generally see the pattern of typing the function in a way, that for other than desirable types MethodError is emitted with the information about closest matching methods. This is part of the design process in Julia of a function and for the particular functionality of the polynomial example, we can look into the Julia itself, where it has been implemented in the evalpoly function","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"methods(evalpoly)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Another avenue, that we have only touched with the BenchmarkTools, is performance and will be further explored in the later lectures.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"With the next lecture focused on typing in Julia, it is worth noting that polynomials lend themselves quite nicely to a definition of a custom type, which can help both readability of the code as well further extensions.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"struct Polynom{C}\n    coefficients::{C}\nend\n\nfunction (p:Polynom)(x)\n    polynomial(p.coefficients, x)\nend","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"","category":"page"},{"location":"lecture_01/lab/#Useful-resources","page":"Lab","title":"Useful resources","text":"","category":"section"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Getting Started tutorial from JuliaLang documentation - Docs\nConverting syntax between MATLAB ↔ Python ↔ Julia - Cheatsheet\nBachelor course for refreshing your knowledge - Course\nStylistic conventions - Style Guide\nReserved keywords - List\nOfficial cheatsheet with basic syntax - link","category":"page"},{"location":"lecture_01/lab/#lab_errors","page":"Lab","title":"Various errors and how to read them","text":"","category":"section"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"This section summarizes most commonly encountered types of errors in Julia and how to resolve them or at least understand, what has gone wrong. It expands a little bit the official documentation, which contains the complete list with examples. Keep in mind again, that you can use help mode in the REPL to query error types as well.","category":"page"},{"location":"lecture_01/lab/#MethodError","page":"Lab","title":"MethodError","text":"","category":"section"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"This type of error is most commonly thrown by Julia's multiple dispatch system with a message like no method matching X(args...), seen in two examples bellow.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"2 * 'a'                       # many candidates\ngetindex((i for i in 1:4), 3) # no candidates","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Both of these examples have a short stacktrace, showing that the execution failed on the top most level in REPL, however if this code is a part of some function in a separate file, the stacktrace will reflect it. What this error tells us is that the dispatch system could not find a method for a given function, that would be suitable for the type of arguments, that it has been given. In the first case Julia offers also a list of candidate methods, that match at least some of the arguments","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"When dealing with basic Julia functions and types, this behavior can be treated as something given and though one could locally add a method for example for multiplication of Char and Int, there is usually a good reason why Julia does not support such functionality by default. On the other hand when dealing with user defined code, this error may suggest the developer, that either the functions are too strictly typed or that another method definition is needed in order to satisfy the desired functionality.","category":"page"},{"location":"lecture_01/lab/#InexactError","page":"Lab","title":"InexactError","text":"","category":"section"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"This type of error is most commonly thrown by the type conversion system (centered around convert function), informing the user that it cannot exactly convert a value of some type to match arguments of a function being called.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Int(1.2)                      # root cause\nappend!([1,2,3], 1.2)         # same as above but shows the root cause deeper in the stack trace","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"In this case the function being Int and the value a floating point. The second example shows InexactError may be caused deeper inside an inconspicuous function call, where we want to extend an array by another value, which is unfortunately incompatible.","category":"page"},{"location":"lecture_01/lab/#ArgumentError","page":"Lab","title":"ArgumentError","text":"","category":"section"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"As opposed to the previous two errors, ArgumentError can contain user specified error message and thus can serve multiple purposes. It is however recommended to throw this type of error, when the parameters to a function call do not match a valid signature, e.g. when factorial were given negative or non-integer argument (note that this is being handled in Julia by multiple dispatch and specific DomainError).","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"This example shows a concatenation of two 2d arrays of incompatible sizes 3x3 and 2x2.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"hcat(ones(3,3), zeros(2,2))","category":"page"},{"location":"lecture_01/lab/#KeyError","page":"Lab","title":"KeyError","text":"","category":"section"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"This error is specific to hash table based objects such as the Dict type and tells the user that and indexing operation into such structure tried to access or delete a non-existent element.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"d = Dict(:a => [1,2,3], :b => [1,23])\nd[:c]","category":"page"},{"location":"lecture_01/lab/#TypeError","page":"Lab","title":"TypeError","text":"","category":"section"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Type assertion failure, or calling an intrinsic function (inside LLVM, where code is strictly typed) with incorrect argument type. In practice this error comes up most often when comparing value of a type against the Bool type as seen in the example bellow.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"if 1 end                # calls internally typeassert(1, Bool)\ntypeassert(1, Bool)","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"In order to compare inside conditional statements such as if-elseif-else or the ternary operator x ? a : b the condition has to be always of Bool type, thus the example above can be fixed by the comparison operator: if 1 == 1 end (in reality either the left or the right side of the expression contains an expression or a variable to compare against).","category":"page"},{"location":"lecture_01/lab/#UndefVarError","page":"Lab","title":"UndefVarError","text":"","category":"section"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"While this error is quite self-explanatory, the exact causes are often quite puzzling for the user. The reason behind the confusion is to do with code scoping, which comes into play for example when trying to access a local variable from outside of a given function or just updating a global variable from within a simple loop. ","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"In the first example we show the former case, where variable is declared from within a function and accessed from outside afterwards.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"function plusone(x)\n    uno = 1\n    return x + uno\nend\nuno # defined only within plusone","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Unless there is variable I_am_not_defined in the global scope, the following should throw an error.","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"I_am_not_defined","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"Often these kind of errors arise as a result of bad code practices, such as long running sessions of Julia having long forgotten global variables, that do not exist upon new execution (this one in particular has been addressed by the authors of the reactive Julia notebooks Pluto.jl).","category":"page"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"For more details on code scoping we recommend particular places in the bachelor course lectures here and there.","category":"page"},{"location":"lecture_01/lab/#ErrorException-and-error-function","page":"Lab","title":"ErrorException & error function","text":"","category":"section"},{"location":"lecture_01/lab/","page":"Lab","title":"Lab","text":"ErrorException is the most generic error, which can be thrown/raised just by calling the error function with a chosen string message. As a result developers may be inclined to misuse this for any kind of unexpected behavior a user can run into, often providing out-of-context/uninformative messages.","category":"page"},{"location":"lecture_01/demo/#Extensibility-of-the-language","page":"Examples","title":"Extensibility of the language","text":"","category":"section"},{"location":"lecture_01/demo/#DifferentialEquations","page":"Examples","title":"DifferentialEquations","text":"","category":"section"},{"location":"lecture_01/demo/","page":"Examples","title":"Examples","text":"A package for solving differential equations, similar to odesolve in Matlab.","category":"page"},{"location":"lecture_01/demo/","page":"Examples","title":"Examples","text":"Example:","category":"page"},{"location":"lecture_01/demo/","page":"Examples","title":"Examples","text":"using DifferentialEquations\nfunction lotka_volterra(du,u,p,t)\n  x, y = u\n  α, β, δ, γ = p\n  du[1] = dx = α*x - β*x*y\n  du[2] = dy = -δ*y + γ*x*y\nend\nu0 = [1.0,1.0]\ntspan = (0.0,10.0)\np = [1.5,1.0,3.0,1.0]\nprob = ODEProblem(lotka_volterra,u0,tspan,p)\n\nsol = solve(prob)\nusing Plots\nplot(sol)","category":"page"},{"location":"lecture_01/demo/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"lecture_01/demo/#Measurements","page":"Examples","title":"Measurements","text":"","category":"section"},{"location":"lecture_01/demo/","page":"Examples","title":"Examples","text":"A package defining \"numbers with precision\" and complete algebra on these numbers:","category":"page"},{"location":"lecture_01/demo/","page":"Examples","title":"Examples","text":"using Measurements\n\na = 4.5 ± 0.1\nb = 3.8 ± 0.4\n\n2a + b\nsin(a)/cos(a) - tan(a)","category":"page"},{"location":"lecture_01/demo/","page":"Examples","title":"Examples","text":"It also defines recipes for Plots.jl how to plot such numbers.","category":"page"},{"location":"lecture_01/demo/#Starting-ODE-from-an-interval","page":"Examples","title":"Starting ODE from an interval","text":"","category":"section"},{"location":"lecture_01/demo/","page":"Examples","title":"Examples","text":"using Measurements\nu0 = [1.0±0.1,1.0±0.01]\n\nprob = ODEProblem(lotka_volterra,u0,tspan,p)\nsol = solve(prob)\nplot(sol)","category":"page"},{"location":"lecture_01/demo/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"lecture_01/demo/","page":"Examples","title":"Examples","text":"all algebraic operations are defined, \npasses all grid refinement techniques\nplot uses the correct  plotting for intervals","category":"page"},{"location":"lecture_01/demo/#Integration-with-other-toolkits","page":"Examples","title":"Integration with other toolkits","text":"","category":"section"},{"location":"lecture_01/demo/","page":"Examples","title":"Examples","text":"Flux: toolkit for modelling Neural Networks. Neural network is a function.","category":"page"},{"location":"lecture_01/demo/","page":"Examples","title":"Examples","text":"integration with Measurements,\nIntegration with ODE (think of NN as aprt of the ODE)","category":"page"},{"location":"lecture_01/demo/","page":"Examples","title":"Examples","text":"Turing: Probabilistic modelling toolkit","category":"page"},{"location":"lecture_01/demo/","page":"Examples","title":"Examples","text":"integration with FLux (NN)\ninteration with ODE\nusing arbitrary bijective transformations, Bijectors.jl","category":"page"},{"location":"lecture_02/lab/#lab02","page":"Lab","title":"Lab 2: Predator-Prey Agents","text":"","category":"section"},{"location":"lecture_02/lab/#The-Predator-Prey-Model","page":"Lab","title":"The Predator-Prey Model","text":"","category":"section"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"In the next two labs you will implement your own, simplified, agent-based simulation of a predator-prey model.  The model will contain wolves, sheep, and - to feed your sheep - some grass.  Running and plotting your final result could look something like the plot below.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"(Image: img)","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"As you can see, in this model, the wolves unfortunately died out :(. In this lab we will first define what our agent simulation does on a high level. Then you will write the core methods for finding food (find_food), to specify what an animal eats (eat!), and how it reproduces (reproduce!).","category":"page"},{"location":"lecture_02/lab/#High-level-description","page":"Lab","title":"High level-description","text":"","category":"section"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"In an agent simulation we assume that we have a bunch of agents (in our case grass, sheep, and wolves) that act in some environment (we will call it a world). At every iteration of the simulation each agent will perform a step in which it performs some of the actions that it can take. For example, a grass agent will grow a little at every step. A sheep agent will try to find some grass and reproduce.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"In short:","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Wolves, sheep, and grass exist in a one dimensional world Dict(1=>🐺, 2=>🐑, 3=>🌿, 4=>🌿, ...) and are identified by a unique ID\nEach agent can perform certain actions (eating, growing, reproducing, dying...)\nIn one iteration of the simulation each agent performs its actions","category":"page"},{"location":"lecture_02/lab/#Code-skeleton","page":"Lab","title":"Code skeleton","text":"","category":"section"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"To get started we need a type hierarchy. The first abstract type Agent acts as the root of our tree.  All animals and plants will be subtypes of Agent. There are different kinds of animals and plants so it makes sense to create an Animal type which will be the supertype of all animals. The same is true for Plants. Finally, we need a simple world which consist of a dictionary of agent IDs to agents, and a field that holds the current maximum ID (so that we can generate new ones).","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"abstract type Agent end\nabstract type Animal <: Agent end\nabstract type Plant <: Agent end\n\nmutable struct World{A<:Agent}\n    agents::Dict{Int,A}\n    max_id::Int\nend\nfunction World(agents::Vector{<:Agent})\n    World(Dict(id(a)=>a for a in agents), maximum(id.(agents)))\nend\n\n# optional: you can overload the `show` method to get custom\n# printing of your World\nfunction Base.show(io::IO, w::World)\n    println(io, typeof(w))\n    for (_,a) in w.agents\n        println(io,\"  $a\")\n    end\nend","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"The function world_step! will advance your whole world by one step applying the function agent_step! to each agent. Note that this function assumes that all Agents have a unique id.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"function world_step!(world::World)\n    # make sure that we only iterate over IDs that already exist in the \n    # current timestep this lets us safely add agents\n    ids = deepcopy(keys(world.agents))\n\n    for id in ids\n        # agents can be killed by other agents, so make sure that we are\n        # not stepping dead agents forward\n        !haskey(world.agents,id) && continue\n\n        a = world.agents[id]\n        agent_step!(a,world)\n    end\nend\nnothing # hide","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"The agent_step! function will have multiple methods and is the first function in this lab that uses dispatch. The method for plants checks if a plant is fully grown. If it is, nothing happens. While has not reached is maximum size, the plant will grow a little each time agent_step! is called.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"function agent_step!(a::Plant, w::World)\n    if size(a) != max_size(a)\n        grow!(a)\n    end\nend\nnothing # hide","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"The agent_step! method for animals is different. At the beginning of each step an animal looses energy. Afterwards it tries to find some food, which it will subsequently eat. If the animal then has less than zero energy it dies and is removed from the world. If it has positive energy it will try to reproduce.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"function agent_step!(a::Animal, w::World)\n    incr_energy!(a,-1)\n    if rand() <= foodprob(a)\n        dinner = find_food(a,w)\n        eat!(a, dinner, w)\n    end\n    if energy(a) <= 0\n        kill_agent!(a,w)\n        return\n    end\n    if rand() <= reprprob(a)\n        reproduce!(a,w)\n    end\n    return a\nend\nnothing # hide","category":"page"},{"location":"lecture_02/lab/#The-Grass-Agent","page":"Lab","title":"The Grass Agent","text":"","category":"section"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"The first concrete type we implement is the basis of life in our simulation and source of all energy: Grass. Our Grass will be growing over time and it will need a certain amount of time steps to fully grow before it can be eaten. We will realise this with a countdown field. At every step of the simulation the countdown will decrease until it reaches zero at which point the grass is fully grown.  This has to be reflected in the fields of our grass struct:","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"mutable struct Grass <: Plant\n    id::Int\n    size::Int\n    max_size::Int\nend","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Note that Grass is a mutable type because the size field will change during the simulation. Let us assume that all plants have at least the fields id, size, and max_size, because all plants need some time to fully grow. If this is the case we can make Grass a subtype of Plant (via <:) and define a common interface for all Plants.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"id(a::Agent) = a.id  # every agent has an ID so we can just define id for Agent here\n\nBase.size(a::Plant) = a.size\nmax_size(a::Plant) = a.max_size\ngrow!(a::Plant) = a.size += 1\nnothing # hide","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Define a constructor for Grass which, given only an ID and a maximum size m, will create an instance of Grass that has a randomly initialized size in the range (1m).\nCreate some Grass agents inside a World and run a few world_step!s.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"The constructor for grass with random growth countdown:","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Grass(id,m) = Grass(id, rand(1:m), m)\n\n# optional: overload show function for Grass\nfunction Base.show(io::IO, g::Grass)\n    x = size(g)/max_size(g) * 100\n    print(io,\"🌿 #$(id(g)) $(round(Int,x))% grown\")\nend\nnothing # hide","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Creation of a world with a few grass agents:","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"w = World([Grass(id,3) for id in 1:2])\nfor _ in 1:3\n    world_step!(w)\n    @info w\nend","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_02/lab/#Sheep-eat-grass","page":"Lab","title":"Sheep eat grass","text":"","category":"section"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Our simulated Sheep will have a certain amount of energy E, a reproduction probability p_r, and a probablity to find food p_f in each iteration of our simulation. Additionally, each sheep with get some amout of energy from eating a Grass which is computed with the variable Delta E.. The corresponding struct then looks like this","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"mutable struct Sheep <: Animal\n    id::Int\n    energy::Float64\n    Δenergy::Float64\n    reprprob::Float64\n    foodprob::Float64\nend","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Again we will use Sheep as a generic example for an Animal which leaves us with the interface below. We only have setters for energy because all other fields of our animals will stay constant.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"# get field values\nenergy(a::Animal) = a.energy\nΔenergy(a::Animal) = a.Δenergy\nreprprob(a::Animal) = a.reprprob\nfoodprob(a::Animal) = a.foodprob\n\n# set field values\nenergy!(a::Animal, e) = a.energy = e\nincr_energy!(a::Animal, Δe) = energy!(a, energy(a)+Δe)\n\n# optional: overload the show method for Sheep\nfunction Base.show(io::IO, s::Sheep)\n    e = energy(s)\n    d = Δenergy(s)\n    pr = reprprob(s)\n    pf = foodprob(s)\n    print(io,\"🐑 #$(id(s)) E=$e ΔE=$d pr=$pr pf=$pf\")\nend\nnothing # hide","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"In every iteration of the simulation each sheep will get a chance to eat some grass. The process of one animal eating a plant (or another animal) will be implemented via the eat!(a::Agent,b::Agent,::World) function. Calling the function will cause agent a to eat agent b, possibly mutating them and the world. The eat! function will do something different for different input types and is our first practical example of multiple dispatch.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Implement a function eat!(::Sheep, ::Grass, ::World) which increases the sheep's energy by Delta E multiplied by the size of the grass.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"After the sheep's energy is updated the grass is eaten and its size counter has to be set to zero.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Note that you do not yet need the world in this function. It is needed later for the case of wolves eating sheep.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"function eat!(a::Sheep, b::Grass, w::World)\n    incr_energy!(a, size(b)*Δenergy(a))\n    b.size = 0\nend\nnothing # hide","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Below you can see how a fully grown grass is eaten by a sheep.  The sheep's energy changes size of the grass is set to zero.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"grass = Grass(1,5,5)\nsheep = Sheep(2,10.0,2.0,0.1,0.1)\nworld = World([grass, sheep])\neat!(sheep,grass,world);\nworld","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Note that the order of the arguments has a meaning here. Calling eat!(grass,sheep,world) results in a MethodError which is great, because Grass cannot eat Sheep.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"eat!(grass,sheep,world);","category":"page"},{"location":"lecture_02/lab/#Wolves-eat-sheep","page":"Lab","title":"Wolves eat sheep","text":"","category":"section"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Next, implement a Wolf with the same properties as the sheep (E, Delta E, p_r, and p_f) as well as its eat! method. The eat! method for wolves increases the wolf's energy by energy(sheep)*Δenergy(wolf) and kills the sheep (i.e. removes the sheep from the world). Both eat! and agent_step! need to be able to remove agents from the world so it makes sense to create another function kill_agent!(::Animal,::World). Please implement it as well to make your agent_step! work.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Hint: You can use delete! to remove agents from the dictionary in your world.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"mutable struct Wolf <: Animal\n    id::Int\n    energy::Float64\n    Δenergy::Float64\n    reprprob::Float64\n    foodprob::Float64\nend\n\nfunction eat!(wolf::Wolf, sheep::Sheep, w::World)\n    incr_energy!(wolf, energy(sheep)*Δenergy(wolf))\n    kill_agent!(sheep,w)\nend\n\nkill_agent!(a::Animal, w::World) = delete!(w.agents, id(a))\n\n# optional: overload the show method for Wolf\nfunction Base.show(io::IO, w::Wolf)\n    e = energy(w)\n    d = Δenergy(w)\n    pr = reprprob(w)\n    pf = foodprob(w)\n    print(io,\"🐺 #$(id(w)) E=$e ΔE=$d pr=$pr pf=$pf\")\nend\nnothing # hide","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"With a correct eat! method you should get results like this:","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"grass = Grass(1,5,5);\nsheep = Sheep(2,10.0,1.0,0.1,1.0);\nwolf  = Wolf(3,20.0,2.0,0.1,1.0);\nworld = World([grass, sheep, wolf])\neat!(wolf,sheep,world);\nworld","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"The sheep is removed from the world and the wolf's energy increased by Delta E.","category":"page"},{"location":"lecture_02/lab/#Finding-food-for-sheep","page":"Lab","title":"Finding food for sheep","text":"","category":"section"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"using StatsBase\nfunction find_food(a::Animal, w::World)\n    as = filter(x->eats(a,x), w.agents |> values |> collect)\n    isempty(as) ? nothing : sample(as)\nend\n\neats(::Sheep,g::Grass) = size(g) > 0\neats(::Wolf,::Sheep) = true\neats(::Agent,::Agent) = false","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"The next mechanism in our simulation models an animal's search for food.  For example, a sheep can only try to eat if the world currently holds some grass. The process of finding food for a given animal will be implemented by the function find_food(s::Sheep, ::World). It will either return nothing (if the sheep does not find grass) or sample a random Grass from all available Grass agents.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Implement the method find_food(::Sheep, ::World) which first returns either a Grass (sampled randomly from all Grasses with a size larger than zero) or returns nothing.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Hint: For the functional programming way of coding this can use filter and isa to filter for a certain type and StatsBase.sample to choose a random element from a vector. You can get an Iterator of values of your dictionary via values which you might want to collect before passing it to sample.\nHint: You could also program this with a for-loop that iterates over your agents in a random order.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"using StatsBase  # needed for `sample`\n# you can install it by typing `]add StatsBase` in the REPL\n\nfunction find_food(a::Sheep, w::World)\n    as = filter(x->isa(x,Grass) && size(x)>0, w.agents |> values |> collect)\n    isempty(as) ? nothing : sample(as)\nend","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"To test your function your can create sheep with different p_f. A sheep with p_f=1 will always find some food if there is some in the world, so you should get a result like below.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"grass = Grass(1,5,5);\nsheep = Sheep(2,10.0,1.0,0.1,1.0);\nwolf  = Wolf(3,20.0,2.0,0.1,1.0);\nworld = World([grass, sheep, wolf])\n\ndinner = find_food(sheep,world)\neat!(sheep,dinner,world);\nsheep\nworld","category":"page"},{"location":"lecture_02/lab/#Finding-food-for-wolves","page":"Lab","title":"Finding food for wolves","text":"","category":"section"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Implement a function find_food(::Wolf, ::World) which returns either nothing or a randomly sampled Sheep from all existsing sheep.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"function find_food(a::Wolf, w::World)\n    as = filter(x->isa(x,Sheep), w.agents |> values |> collect)\n    isempty(as) ? nothing : sample(as)\nend","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_02/lab/#General-food-finding","page":"Lab","title":"General food finding","text":"","category":"section"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Identify the code duplications between find_food(::Sheep,::World) and find_food(::Wolf,::World) and generalize the function to find_food(::Animal, ::World).","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Hint: You can introduce a new function eats(::Agent,::Agent)::Bool which specifies which type of agent eats another type of agent.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Once you have done this, remove the two more specific functions for sheep and wolves and restart the REPL once you have deleted those old methods to clean up your namespace.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"function find_food(a::Animal, w::World)\n    as = filter(x->eats(a,x), w.agents |> values |> collect)\n    isempty(as) ? nothing : sample(as)\nend\n\neats(::Sheep,g::Grass) = size(g) > 0\neats(::Wolf,::Sheep) = true\neats(::Agent,::Agent) = false","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_02/lab/#Eating-nothing","page":"Lab","title":"Eating nothing","text":"","category":"section"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"What happens if you call eat!(wolf, find_food(wolf,world), world) and there are no sheep anymore? Or if the wolf's p_f1?","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Consider the world below and the for-loop which represents a simplified simulation in which the wolf tries to eat a sheep in each iteration. Why does it fail?","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"sheep = [Sheep(id,10.0,1.0,1.0,1.0) for id in 1:2]\nwolf  = Wolf(3,20.0,1.0,1.0,1.0)\nworld = World(vcat(sheep, [wolf]))\n\nfor _ in 1:4\n    dinner = find_food(wolf,world)\n    eat!(wolf,dinner,world)\n    @show world\nend","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Hint: You can try to overload the eat! function appropriately.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"# make sure any animal can also eat `nothing`\neat!(a::Animal,b::Nothing,w::World) = nothing\n\nsheep = [Sheep(id,10.0,5.0,1.0,1.0) for id in 1:2]\nwolf  = Wolf(3,20.0,10.0,1.0,1.0)\nworld = World(vcat(sheep, [wolf]))\n\nfor _ in 1:4\n    local dinner # hide\n    @show world\n    dinner = find_food(wolf,world)\n    eat!(wolf,dinner,world)\nend","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_02/lab/#Reproduction","page":"Lab","title":"Reproduction","text":"","category":"section"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Currently our animals can only eat. In our simulation we also want them to reproduce. We will do this by adding a reproduce! method to Animal.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Write a function reproduce! that takes an Animal and a World. Reproducing will cost an animal half of its energy and then add an almost identical copy of the given animal to the world.  The only thing that is different from parent to child is the ID. You can simply increase the max_id of the world by one and use that as the new ID for the child.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"</div></div>\n<details class = \"solution-body\">\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"function reproduce!(a::Animal, w::World)\n    energy!(a, energy(a)/2)\n    new_id = w.max_id + 1\n    â = deepcopy(a)\n    â.id = new_id\n    w.agents[id(â)] = â\n    w.max_id = new_id\nend","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"You can avoid mutating the id field by reconstructing the child from scratch:","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"function reproduce!(a::A, w::World) where A<:Animal\n    energy!(a, energy(a)/2)\n    a_vals = [getproperty(a,n) for n in fieldnames(A) if n!=:id]\n    new_id = w.max_id + 1\n    â = A(new_id, a_vals...)\n    w.agents[id(â)] = â\n    w.max_id = new_id\nend\nnothing # hide","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"</p></details>","category":"page"},{"location":"lecture_02/lab/#Finally!-world_step!","page":"Lab","title":"Finally! world_step!","text":"","category":"section"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"With all our functions in place we can finally run the world_step! function.","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Some grass that is growing:","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"gs = [Grass(id,8) for id in 1:3]\nworld = World(gs)\nfor _ in 1:4\n    world_step!(world)\n    @show world\nend","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"Some sheep that are reproducing and then dying:","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"ss = [Sheep(id,5.0,2.0,1.0,1.0) for id in 1:2]\nworld = World(ss)\nfor _ in 1:3\n    world_step!(world)\n    @show world\nend","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"All of it together!","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"gs = [Grass(id,5) for id in 1:5]\nss = [Sheep(id,10.0,5.0,0.5,0.5) for id in 6:10]\nws = [Wolf(id,20.0,10.,0.1,0.1) for id in 11:12]\n\nworld = World(vcat(gs, ss, ws))\nfor _ in 1:2\n    world_step!(world)\n    @show world\nend","category":"page"},{"location":"lecture_02/lab/","page":"Lab","title":"Lab","text":"The code for this lab is inspired by the predator-prey model of Agents.jl","category":"page"},{"location":"lecture_07/lecture/#macro_lecture","page":"Lecture","title":"Macros","text":"","category":"section"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"What is macro? In its essence, macro is a function, which ","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"takes as an input an expression (parsed input)\nmodify the expressions in argument\ninsert the modified expression at the same place as the one that is parsed.","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"Macros are necessary because they execute when code is parsed, therefore, macros allow the programmer to generate and include fragments of customized code before the full program is run. To illustrate the difference, consider the following example:","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"One of the very conveninet ways to write macros is to write functions modifying the Expression and then call that function in macro as ","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"replace_sin(x::Symbol) = x == :sin ? :cos : x\nreplace_sin(e::Expr) = Expr(e.head, map(replace_sin, e.args)...)\nreplace_sin(u) = u\n\nmacro replace_sin(ex)\n\treplace_sin(esc(ex))\nend\n\n@replace_sin(cosp1(x) = 1 + sin(x))\ncosp1(1) == 1 + cos(1)","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"notice the following","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"the definition of the macro is similar to the definition of the function with the exception that instead of the keyword function we use keyword macro\nwhen calling the macro, we signal to the compiler our intention by prepending the name of the macro with @. \nthe macro receives the expression(s) as the argument instead of the evaluated argument and also returns an expression that is placed on the position where the macro has been called\nwhen you are invoking the macro, you should be aware that the code you are entering can be arbitrarily modified and you can receive something completely different. This meanst that @ should also serve as a warning that you are leaving Julia's syntax. In practice, it make sense to make things akin to how they are done in Julia or to write Domain Specific Language with syntax familiar in that domain.","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"We have mentioned above that macros are indispensible in the sense they intercept the code generation after parsing. You might object that I can achieve the above using the following combination of Meta.parse and eval","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"ex = Meta.parse(\"cosp1(x) = 1 + sin(x)\")\nex = replace_sin(ex)\neval(ex)","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"in the following we cannot do the same trick","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"function cosp2(x)\n\t@replace_sin 2 + sin(x)\nend\ncosp2(1) ≈ (2 + cos(1))","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"function parse_eval_cosp2(x)\n\tex = Meta.parse(\"2 + sin(x)\")\n\tex = replace_sin(ex)\n\teval(ex)\nend\n\njulia> @code_lowered parse_eval_cosp2(1)\nCodeInfo(\n1 ─ %1 = Base.getproperty(Main.Meta, :parse)\n│        ex = (%1)(\"2 + sin(x)\")\n│        ex = Main.replace_sin(ex)\n│   %4 = Main.eval(ex)\n└──      return %4\n)","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"info: Info\nScope of evaleval function is always evaluated in the global scope of the Module in which the macro is called (note that there is that by default you operate in the Main module). Moreover, eval takes effect after the function has been has been executed. This can be demonstrated as add1(x) = x + 1\nfunction redefine_add(x)\n\teval(:(add1(x) = x - 1))\n\tadd1(x)\nend\njulia> redefine_add(1)\n2\n\njulia> redefine_add(1)\n0","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"@macroexpand can allow use to observe, how the macro will be expanded. We can use it for example ","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"@macroexpand @replace_sin(sinp1(x) = 1 + sin(x))","category":"page"},{"location":"lecture_07/lecture/#What-goes-under-the-hood?","page":"Lecture","title":"What goes under the hood?","text":"","category":"section"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"Let's consider what the compiler is doing in this call","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"function cosp2(x)\n\t@replace_sin 2 + sin(x)\nend","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"First, Julia parses the code into the AST as","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"ex = Meta.parse(\"\"\"\n   function cosp2(x)\n\t   @replace_sin 2 + sin(x)\nend\n\"\"\") |> Base.remove_linenums!\ndump(ex)","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"We observe that there is a macrocall in the AST, which means that Julia will expand the macro and put it in place","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"ex.args[2].args[1].head \t# the location of the macrocall\nex.args[2].args[1].args[1]  # which macro to call\nex.args[2].args[1].args[2]  # line number\nex.args[2].args[1].args[3]\t# on which expression","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"let's run the replace_sin and insert it back","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"ex.args[2].args[1] = replace_sin(ex.args[2].args[1].args[3])\nex |> dump","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"now, ex contains the expanded macro and we can see that it correctly defines the function","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"eval(ex)","category":"page"},{"location":"lecture_07/lecture/#Calling-macros","page":"Lecture","title":"Calling macros","text":"","category":"section"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"Macros can be called without parentheses","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"macro showarg(ex)\n\tprintln(\"single argument version\")\n\t@show ex\n\tex\nend\n@showarg 1 + 1\n@showarg(1 + 1)","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"but they use the very same multiple dispatch as functions","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"macro showarg(x1, x2::Symbol)\n\tprintln(\"two argument version, second is Symbol\")\n\tx1\nend\nmacro showarg(x1, x2::Expr)\n\tprintln(\"two argument version, second is Symbol\")\n\tx1\nend\n@showarg(1 + 1, x)\n@showarg(1 + 1, 1 + 3)\n@showarg 1 + 1, 1 + 3\n@showarg 1 + 1  1 + 3","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"(the @showarg(1 + 1, :x) raises an error, since :(:x) is of Type QuoteNode).","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"Observe that macro dispatch is based on the types of AST that are handed to the macro, not the types that the AST evaluates to at runtime.","category":"page"},{"location":"lecture_07/lecture/#Notes-on-quotation","page":"Lecture","title":"Notes on quotation","text":"","category":"section"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"In the previous lecture we have seen that we can quote a block of code, which tells the compiler to treat the input as an data and parse it. We have talked about three ways of quoting code.","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":":(quoted code)\nMeta.parse(input_string)\nquote ... end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"The truth is that Julia does not do full quotation, but a quasiquotation is it allows you to interpolate expressions inside the quoted code using $ symbol similar to the string. This is handy, as sometimes, when we want to insert into the quoted code an result of some computation / preprocessing. Observe the following difference in returned code","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"a = 5\n:(x = a)\n:(x = $(a))\nlet y = :x\n    :(1 + y), :(1 + $y)\nend","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"In contrast to the behavior of :() (or quote ... end, true quotation would not perform interpolation where unary $ occurs. Instead, we would capture the syntax that describes interpolation and produce something like the following:","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"(\n    :(1 + x),                        # Quasiquotation\n    Expr(:call, :+, 1, Expr(:$, :x)), # True quotation\n)","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"When we need true quoting, i.e. we need something to stay quoted, we can use QuoteNode as","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"macro true_quote(e)\n    QuoteNode(e)\nend\nlet y = :x\n    (\n        @true_quote(1 + $y),\n        :(1 + $y),\n    )\nend","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"At first glance, QuoteNode wrapper seems to be useless. But QuoteNode has clear value when it's used inside a macro to indicate that something should stay quoted even after the macro finishes executing. Also notice that the expression received by macro was quoted, not quasiquoted, since in the latter case $y would be replaced. We can demonstate it using the @showarg macro introduced earlier, as","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"@showarg(1 + $x)","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"The error is raised after the macro was evaluated and the output has been inserted to parsed AST.","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"Macros do not know about runtime values, they only know about syntax trees. When a macro receives an expression with a x in it, it can't interpolate the value of x into the syntax tree because it reads the syntax tree before x ever has a value! So the interpolation syntax in macros is not given any actual meaning in julia.","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"Instead, when a macro is given an expression with $ in it, it assumes you're going to give your own meaning to x. In the case of BenchmarkTools.jl they return code that has to wait until runtime to receive the value of x and then splice that value into an expression which is evaluated and benchmarked. Nowhere in the actual body of the macro do they have access to the value of x though.","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"info: Info\nWhy $ for interpolation?The $ string for interpolation was used as it identifies the interpolation inside the string and inside the command. For examplea = 5\ns = \"a = $(5)\"\ntypoef(s)\nprintln(s)\nfilename = \"/tmp/test_of_interpolation\"\nrun(`touch $(filename)`)","category":"page"},{"location":"lecture_07/lecture/#Macro-hygiene","page":"Lecture","title":"Macro hygiene","text":"","category":"section"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"Macro hygiene is a term coined in 1986. The problem it addresses is following: if you're automatically generating code, it's possible that you will introduce variable names in your generated code that will clash with existing variable names in the scope in which a macro is called. These clashes might cause your generated code to read from or write to variables that you should not interacting with. A macro is hygienic when it does not interact with existing variables, which means that when macro is evaluated, it should not have any effect on the surrounding code. ","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"By default, all macros in Julia are hygienic which means that variables introduced in the macro have automatically generated names, where Julia ensures they will not collide with user's variable. These variables are created by gensym function / macro. ","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"info: Info\ngensymgensym([tag]) Generates a symbol which will not conflict with other variable names. ```julia julia> gensym(\"hello\") Symbol(\"##hello#257\")","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"\nLet's demonstrate it on our own version of an macro `@elapsed` which will return the time that was needed to evaluate the block of code.","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia macro tooclean_elapsed(ex) \tquote \t\ttstart = time() \t\tex \t\ttime() - tstart \tend end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"fib(n) = n <= 1 ? n : fib(n-1) + fib(n - 2) let  \tt = @tooclean_elapsed r = fib(10) \tprintln(\"the evaluation of fib took \", t, \"s and result is \", r) end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"We see that variable `r` has not been assigned during the evaluation of macro. We have also used `let` block in orders not to define any variables in the global scope.\nWhy is that?\nLet's observe how the macro was expanded","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia julia> Base.removelinenums!(@macroexpand @toocleanelapsed r = fib(10)) quote     var\"#12#tstart\" = Main.time()     var\"#13#r\" = Main.fib(10)     Main.time() - var\"#12#tstart\" end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"We see that `tstart` in the macro definition was replaced by `var\"#12#tstart\"`, which is a name generated by Julia's gensym to prevent conflict. The same happens to `r`, which was replaced by `var\"#13#r\"`. This names are the result of Julia's hygiene-enforcing pass, which is intended to prevent us from overwriting existing variables during macro expansion. This pass usually makes our macros safer, but it is also a source of confusion because it introduces a gap between the expressions we generate and the expressions that end up in the resulting source code. Notice that in the case of `tstart`, we actually wanted to replace `tstart` with a unique name, such that if we by a bad luck define `tstart` in our code, it would not be affected, as we can see in this example.","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia let  \ttstart = \"should not change the value and type \" \tt = @tooclean_elapsed r = fib(10) \tprintln(tstart, \"  \", typeof(tstart)) end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"But in the second case, we would actually very much like the variable `r` to retain its name, such that we can accesss the results (and also, `ex` can access and change other local variables). Julia offer a way to `escape` from the hygienic mode, which means that the variables will be used and passed as-is. Notice the effect if we escape jus the expression `ex` \n","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia macro justright_elapsed(ex) \tquote \t\ttstart = time() \t\tesc(ex) \t\ttime() - tstart \tend end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"let  \ttstart = \"should not change the value and type \" \tt = @justright_elapsed r = fib(10) \tprintln(\"the evaluation of fib took \", t, \"s and result is \", r) \tprintln(tstart, \"  \", typeof(tstart)) end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"which now works as intended. We can inspect the output again using `@macroexpand`","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia julia> Base.removelinenums!(@macroexpand @justrightelapsed r = fib(10)) quote     var\"#19#tstart\" = Main.time()     r = fib(10)     Main.time() - var\"#19#tstart\" end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"and compare it to `Base.remove_linenums!(@macroexpand @justright_elapsed r = fib(10))`. We see that the experssion `ex` has its symbols intact.\nTo use the escaping / hygience correctly, you need to have a good understanding how the macro evaluation works and what is needed. Let's now try the third version of the macro, where we escape everything as","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia macro toodirty_elapsed(ex) \tex = quote \t\ttstart = time() \t\tex \t\ttime() - tstart \tend \tesc(ex) end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"let  \ttstart = \"should not change the value and type \" \tt = @toodirty_elapsed r = fib(10) \tprintln(\"the evaluation of fib took \", t, \"s and result is \", r) \tprintln(tstart, \"  \", typeof(tstart)) end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"Using `@macroexpand` we observe that `@toodirty_elapsed` does not have any trace of hygiene.","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia julia> Base.removelinenums!(@macroexpand @toodirtyelapsed r = fib(10)) quote     tstart = time()     r = fib(10)     time() - tstart end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"From the above we can also see that hygiene-pass occurs after the macro has been applied but before the code is lowered. `esc` is inserted to AST as a special node `Expr(:escape,...),` which can be seen from the follows.","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia julia> esc(:x) :(Expr(:escape, :x))","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"The definition in `essentials.jl:480` is pretty simple as `esc(@nospecialize(e)) = Expr(:escape, e)`.\n\nWith that in mind, we can now understand our original example with `@replace_sin`. Recall that we have defined it as ","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia macro replacesin(ex) \treplacesin(esc(ex)) end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"where the escaping `replace_sin(esc(ex))` in communicates to compiler that `ex` should be used as without hygienating the `ex`.  Indeed, if we lower it","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia function cosp2(x) \t@replace_sin 2 + sin(x) end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia> @code_lowered(cosp2(1.0)) CodeInfo( 1 ─ %1 = Main.cos(x) │   %2 = 2 + %1 └──      return %2 )","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"we see it works as intended. Whereas if we use hygienic version","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia macro hygienicreplacesin(ex) \treplace_sin(ex) end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"function hcosp2(x) \t@hygienicreplacesin 2 + sin(x) end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia> @code_lowered(hcosp2(1.0)) CodeInfo( 1 ─ %1 = Main.cos(Main.x) │   %2 = 2 + %1 └──      return %2 )","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"\n\n### Can I do the hygiene by myself?\nYes, it is by some considered to be much simpler (and safer) then to understand, how macro hygiene works.","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia macro manual_elapsed(ex)     x = gensym()     esc(quote     \t\tx = time()         \tex         \ttime() - x         end     ) end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"let  \tt = @manual_elapsed r = fib(10) \tprintln(\"the evaluation of fib took \", t, \"s and result is \", r) end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"\n## How macros compose?","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia macro m1(ex) \tprintln(\"m1: \") \tdump(ex) \tex end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"macro m2(ex) \tprintln(\"m2: \") \tdump(ex) \tesc(ex) end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"@m1 @m2 1 + sin(1)","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"which means that macros are expanded in the order from the outer most to inner most, which is exactly the other way around than functions.","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"@macroexpand @m1 @m2 1 + sin(1)","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"also notice that the escaping is only partial (running `@macroexpand @m2 @m1 1 + sin(1)` would not change the results).\n\n<!-- Why are variables on right-hand side replaced by access to global variables? -->\n## Write @exfiltrate macro","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia module Exfiltrator","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"const environment = Dict{Symbol, Any}()","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"function copy_variables!(d::Dict) \tforeach(k -> delete!(environment, k), keys(environment)) \tfor (k, v) in d \t\tenvironment[k] = v \tend end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"macro exfiltrate() \tv = gensym(:vars) \tquote \t\t(v) = (esc((Expr(locals)))) \t\tcopy_variables((v)) \tend end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"\nTest it to ","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia using Main.Exfiltrator: @exfiltrate let  \tx,y,z = 1,\"hello\", (a = \"1\", b = \"b\") \t@exfiltrate end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"Exfiltrator.environment","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"function inside_function() \ta,b,c = 1,2,3 \t@exfiltrate end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"inside_function()","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"Exfiltrator.environment","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"\n\n\n## Domain Specifis Languages (DSL)\nMacros are convenient for writing domain specific languages, which are languages designed for specific domain. This allows them to simplify notation and / or make the notation familiar for people working in the field. For example in `Turing.jl`, the model \nof coinflips can be specified as ","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"@model function coinflip(y)","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"# Our prior belief about the probability of heads in a coin.\np ~ Beta(1, 1)\n\n# The number of observations.\nN = length(y)\nfor n in 1:N\n    # Heads or tails of a coin are drawn from a Bernoulli distribution.\n    y[n] ~ Bernoulli(p)\nend","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"end;","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"which resembles, but not copy Julia's syntax due to the use of `~`. A similar DSLs can be seen in `ModelingToolkit.jl` for differential equations, in `Soss.jl` again for expressing probability problems, in `Metatheory.jl` / `SymbolicUtils.jl` for defining rules on elements of algebras, or `JuMP.jl` for specific mathematical programs.\n\nOne of the reasons for popularity of DSLs is that macro system is very helpful in their implementation, but it also contraints the DSL, as it has to be parseable by Julia's parser. This is a tremendous helps, because one does not have to care about how to parse numbers, strings, parenthesess, functions, etc. \n\nLet's jump into the first example adapted from (John Myles White's howto)[https://github.com/johnmyleswhite/julia_tutorials/blob/master/From%20Macros%20to%20DSLs%20in%20Julia%20-%20Part%202%20-%20DSLs.ipynb].\nWe would like to write a macro, which allows us to define graph in `LightGraphs.jl` just by defining edges.","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia @graph begin  \t1 -> 2 \t2 -> 3 \t3 -> 1 end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"The above should expand to","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia using LightGraphs g = DiGraph(3) addedge!(g, 1,2) addedge!(g, 2,3) add_edge!(g, 3,1) d","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"Let's start with easy and observe, how ","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia ex = Meta.parse(\"\"\" begin  \t1 -> 2 \t2 -> 3 \t3 -> 1 end \"\"\") ex = Base.remove_linenums!(ex)","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"is parsed to ","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia quote     1->begin             2         end     2->begin             3         end     3->begin             1         end end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"We see that \n- the sequence of statements is parsed to `block` (we know that from last lecture).\n- `->` is parsed to `->`, i.e. `ex.args[1].head == :->` with parameters being the first vertex `ex.args[1].args[1] == 1` and the second vertex is quoted to `ex.args[1].args[2].head == :block`. \n\nThe main job will be done in the function `parse_edge`, which will parse one edge. It will check that the node defines edge (otherwise, it will return nothing, which will be filtered out)","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia function parse_edge(ex) \t#checking the syntax \t!hasproperty(ex, :head) && return(nothing) \t!hasproperty(ex, :args) && return(nothing) \tex.head != :-> && return(nothing) \tlength(ex.args) != 2 && return(nothing) \t!hasproperty(ex.args[2], :head) && return(nothing) \tex.args[2].head != :block && length(ex.args[2].args) == 1 && return(nothing)","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"#ready to go\nsrc = ex.args[1]\n@assert src isa Integer\ndst = ex.args[2].args[1]\n@assert dst isa Integer\n:(add_edge!(g, $(src), $(dst)))","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"function parsegraph(ex) \t@assert ex.head == :block \tex = Base.removelinenums!(ex) \tedges = filter(!isnothing, parse_edge.(ex.args)) \tn = maximum(e -> maximum(e.args[3:4]), edges) \tquote        g = LightGraphs.DiGraph(n)        edges...        g    end end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"Once we have the first version, let's make everything hygienic\n","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia function parse_edge(g, ex::Expr) \t#checking the syntax \tex.head != :-> && return(nothing) \tlength(ex.args) != 2 && return(nothing) \t!hasproperty(ex.args[2], :head) && return(nothing) \tex.args[2].head != :block && length(ex.args[2].args) == 1 && return(nothing)","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"#ready to go\nsrc = ex.args[1]\n@assert src isa Integer\ndst = ex.args[2].args[1]\n@assert dst isa Integer\n:(add_edge!($(g), $(src), $(dst)))","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"end parse_edge(g, ex) = nothing","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"function parsegraph(ex) \t@assert ex.head == :block \tg = gensym(:graph) \tex = Base.removelinenums!(ex) \tedges = filter(!isnothing, parse_edge.(g, ex.args)) \tn = maximum(e -> maximum(e.args[3:4]), edges) \tquote        (g) = LightGraphsDiGraph((n))        edges...        g    end end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"and we are ready to go","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia macro graph(ex) \tparse_graph(ex) end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"@graph begin \t1 -> 2 \t2 -> 3 \t3 -> 1 end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"and we can check the output with `@macroexpand`.","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"julia julia> @macroexpand @graph begin                1 -> 2                2 -> 3                3 -> 1        end quote     #= REPL[173]:8 =#     var\"#27###graph#273\" = (Main.LightGraphs).DiGraph(3)     #= REPL[173]:9 =#     Main.addedge!(var\"#27###graph#273\", 1, 2)     Main.addedge!(var\"#27###graph#273\", 2, 3)     Main.add_edge!(var\"#27###graph#273\", 3, 1)     #= REPL[173]:10 =#     var\"#27###graph#273\" end","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"\n## Symbolic differentiation of scalars\n\n## non-standard string literals","category":"page"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"macro r_str(p)     Regex(p) end ```","category":"page"},{"location":"lecture_07/lecture/#sources","page":"Lecture","title":"sources","text":"","category":"section"},{"location":"lecture_07/lecture/","page":"Lecture","title":"Lecture","text":"Great discussion on evaluation of macros https://discourse.julialang.org/t/interpolation-in-macro-calls/25530","category":"page"},{"location":"","page":"Home","title":"Home","text":"<img class=\"docs-light-only\"; src=\"https://raw.githubusercontent.com/JuliaTeachingCTU/JuliaCTUGraphics/master/logo/Scientific-Programming-in-Julia-logo.svg\"; alt=\"Scientific Programming in Julia logo\"; max-width: 100%; height: auto>\n<img class=\"docs-dark-only\"; src=\"https://raw.githubusercontent.com/JuliaTeachingCTU/JuliaCTUGraphics/master/logo/Scientific-Programming-in-Julia-logo-dark.svg\"; alt=\"Scientific Programming in Julia logo\"; max-width: 100%; height: auto;>","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Plots\nENV[\"GKSwstype\"] = \"100\"\ngr()","category":"page"},{"location":"","page":"Home","title":"Home","text":"Scientific Programming requires the highest performance but we also want to write very high level code to enable rapid prototyping and avoid error prone, low level implementations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Julia programming language is designed with exactly those requirements of scientific computing in mind.  In this course we will show you how to make use of the tools and advantages that jit-compiled Julia provides over dynamic, high-level languages like Python or lower level languages like C++.","category":"page"},{"location":"#What-will-you-learn?","page":"Home","title":"What will you learn?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"First and foremost you will learn how to think julia - meaning how write fast, extensible, reusable, and easy-to-read code using things like optional typing, multiple dispatch, and functional programming concepts.  The later part of the course will teach you how to use more advanced concepts like language introspection, metaprogramming, and symbolic computing. Amonst others you will implement your own automatic differetiation (the backbone of modern machine learning) package based on these advanced techniques that can transform intermediate representations of Julia code.","category":"page"},{"location":"#Organization","page":"Home","title":"Organization","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This course webpage contains all information about the course that you need, including lecture notes, lab instructions, and homeworks. The official format of the course is 2+2 (2h lectures/2h labs per week) for 4 credits.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The official course code is: B0M36SPJ and the timetable for the winter semester 2021 can be found here.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The course will be graded based on points from your homework (max. 20 points) and points from a final project (max. 30 points).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Below is a table that shows which lectures have homeworks (and their points).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Homework 1 2 3 4 5 6 7 8 9 10 11 12 13\nPoints 2 2 2 2 2 2 2 2 - 2 - 2 -","category":"page"},{"location":"","page":"Home","title":"Home","text":"Hint: The first few homeworks are easier. Use them to fill up your points.","category":"page"},{"location":"#final_project","page":"Home","title":"Final project","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The final project will be individually agreed on for each student. Ideally you can use this project to solve a problem you have e.g. in your thesis, but don't worry - if you cannot come up with an own project idea, we will suggest one to you. More info and project suggestion can be found here.","category":"page"},{"location":"#Grading","page":"Home","title":"Grading","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Your points from the homeworks and the final project are summed and graded by the standard grading scale below.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Grade A B C D E F\nPoints 45-50 40-44 35-39 30-34 25-29 0-25","category":"page"},{"location":"#emails","page":"Home","title":"Teachers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"– E-mail Room Role\nTomáš Pevný pevnak@protonmail.ch KN:E-406 Lecturer\nVašek Šmídl smidlva1@fjfi.cvut.cz KN:E-333 Lecturer\nJan Franců francja5@fel.cvut.cz KN:E-333 Lab Instructor\nNiklas Heim heimnikl@fel.cvut.cz KN:E-333 Lab Instructor","category":"page"},{"location":"#Prerequisites","page":"Home","title":"Prerequisites","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are no hard requirements to take the course, but if you are not at all familiar with Julia we recommend to take Julia for Optimization and Learning before enrolling in this course.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Functional Programming course also contains some helpful concepts for this course.","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Official documentation\nThink Julia: How to Think Like a Computer Scientist\nFrom Zero to Julia!\nWikiBooks","category":"page"},{"location":"lecture_06/hw/#Homework-6:-Find-variables","page":"Homework","title":"Homework 6: Find variables","text":"","category":"section"},{"location":"lecture_06/hw/","page":"Homework","title":"Homework","text":"Following the lab exercises, you may thing that metaprogramming is a fun little exercise. Let's challenge this notion in this homework, where YOU are being trusted with catching all the edge cases in an AST.","category":"page"},{"location":"lecture_06/hw/#How-to-submit?","page":"Homework","title":"How to submit?","text":"","category":"section"},{"location":"lecture_06/hw/","page":"Homework","title":"Homework","text":"Put the code of the compulsory task inside hw.jl. Zip only this file (not its parent folder) and upload it to BRUTE. Your file should not use any 3rd party dependency.","category":"page"},{"location":"lecture_06/hw/","page":"Homework","title":"Homework","text":"<div class=\"admonition is-category-homework\">\n<header class=\"admonition-header\">Homework (2 points)</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_06/hw/","page":"Homework","title":"Homework","text":"Your task is to find all single letter variables in an expression, i.e. for example when given expression","category":"page"},{"location":"lecture_06/hw/","page":"Homework","title":"Homework","text":"x + 2*y*z - c*x","category":"page"},{"location":"lecture_06/hw/","page":"Homework","title":"Homework","text":"return an array of unique alphabetically sorted symbols representing variables in an expression.","category":"page"},{"location":"lecture_06/hw/","page":"Homework","title":"Homework","text":"[:c, :x, :y, :z]","category":"page"},{"location":"lecture_06/hw/","page":"Homework","title":"Homework","text":"Implement this in a function called find_variables. Note that there may be some edge cases that you may have to handle in a special way, such as ","category":"page"},{"location":"lecture_06/hw/","page":"Homework","title":"Homework","text":"variable assignments r = x*x should return the variable on the left as well (r in this case)\nignoring symbols representing single letter function calls such as f(x)","category":"page"},{"location":"lecture_06/hw/","page":"Homework","title":"Homework","text":"</div></div>\n<details class = \"solution-body\" hidden>\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_06/hw/","page":"Homework","title":"Homework","text":"Nothing to see here.","category":"page"},{"location":"lecture_06/hw/","page":"Homework","title":"Homework","text":"</p></details>","category":"page"},{"location":"lecture_06/hw/#Voluntary-exercise","page":"Homework","title":"Voluntary exercise","text":"","category":"section"},{"location":"lecture_06/hw/","page":"Homework","title":"Homework","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Voluntary exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_06/hw/","page":"Homework","title":"Homework","text":"Create a function that replaces each of +, -, * and / with the respective checked operation, which checks for overflow. E.g. + should be replaced by Base.checked_add.","category":"page"},{"location":"lecture_06/hw/","page":"Homework","title":"Homework","text":"</div></div>\n<details class = \"solution-body\" hidden>\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_06/hw/","page":"Homework","title":"Homework","text":"Not yet published.","category":"page"},{"location":"lecture_06/hw/","page":"Homework","title":"Homework","text":"</p></details>","category":"page"},{"location":"lecture_05/hw/#Homework-5:-Root-finding-of-polynomials","page":"Homework","title":"Homework 5: Root finding of polynomials","text":"","category":"section"},{"location":"lecture_05/hw/","page":"Homework","title":"Homework","text":"This homework should test your ability to use the knowledge of benchmarking, profiling and others to improve an existing implementation of root finding methods for polynomials. The provided code is of questionable quality. In spite of the artificial nature, it should simulate a situation in which you may find yourself quite often, as it represents some intermediate step of going from a simple script to something, that starts to resemble a package.","category":"page"},{"location":"lecture_05/hw/#How-to-submit?","page":"Homework","title":"How to submit?","text":"","category":"section"},{"location":"lecture_05/hw/","page":"Homework","title":"Homework","text":"Put the modified root_finding.jl code inside hw.jl. Zip only this file (not its parent folder) and upload it to BRUTE. Your file should not use any dependency other than those already present in the root_finding.jl.","category":"page"},{"location":"lecture_05/hw/","page":"Homework","title":"Homework","text":"<div class=\"admonition is-category-homework\">\n<header class=\"admonition-header\">Homework (2 points)</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_05/hw/","page":"Homework","title":"Homework","text":"Use profiler on the find_root function to find a piece of unnecessary code, that takes more time than the computation itself. The finding of roots with the polynomial ","category":"page"},{"location":"lecture_05/hw/","page":"Homework","title":"Homework","text":"p(x) = (x - 3)(x - 2)(x - 1)x(x + 1)(x + 2)(x + 3) = x^7 - 14x^5 + 49x^3 - 36x","category":"page"},{"location":"lecture_05/hw/","page":"Homework","title":"Homework","text":"should not take more than 50μs when running with the following parameters","category":"page"},{"location":"lecture_05/hw/","page":"Homework","title":"Homework","text":"atol = 1e-12\nmaxiter = 100\nstepsize = 0.95\n\nx₀ = find_root(p, Bisection(), -5.0, 5.0, maxiter, stepsize, atol)\nx₀ = find_root(p, Newton(), -5.0, 5.0, maxiter, stepsize, atol)\nx₀ = find_root(p, Secant(), -5.0, 5.0, maxiter, stepsize, atol)","category":"page"},{"location":"lecture_05/hw/","page":"Homework","title":"Homework","text":"Remove obvious type instabilities in both find_root and step! functions. Each variable with \"inferred\" type ::Any in @code_warntype will be penalized.","category":"page"},{"location":"lecture_05/hw/","page":"Homework","title":"Homework","text":"HINTS:","category":"page"},{"location":"lecture_05/hw/","page":"Homework","title":"Homework","text":"running the function repeatedly 1000x helps in the profiler sampling\nfocus on parts of the code that may have been used just for debugging purposes","category":"page"},{"location":"lecture_05/hw/","page":"Homework","title":"Homework","text":"</div></div>\n<details class = \"solution-body\" hidden>\n<summary class = \"solution-header\">Solution:</summary><p>","category":"page"},{"location":"lecture_05/hw/","page":"Homework","title":"Homework","text":"Nothing to see here.","category":"page"},{"location":"lecture_05/hw/","page":"Homework","title":"Homework","text":"</p></details>","category":"page"},{"location":"lecture_05/hw/#Voluntary-exercise","page":"Homework","title":"Voluntary exercise","text":"","category":"section"},{"location":"lecture_05/hw/","page":"Homework","title":"Homework","text":"<div class=\"admonition is-category-exercise\">\n<header class=\"admonition-header\">Voluntary exercise</header>\n<div class=\"admonition-body\">","category":"page"},{"location":"lecture_05/hw/","page":"Homework","title":"Homework","text":"Use Plots.jl to plot the polynomial p on the interval -5 5 and visualize the progress/convergence of each method, with a dotted vertical line and a dot on the x-axis for each subsequent root approximation x̃.","category":"page"},{"location":"lecture_05/hw/","page":"Homework","title":"Homework","text":"HINTS:","category":"page"},{"location":"lecture_05/hw/","page":"Homework","title":"Homework","text":"plotting scalar function f - plot(r, f), where r is a range of x values at which we evaluate f\nupdating an existing plot - either plot!(plt, ...) or plot!(...), in the former case the plot lives in variable plt whereas in the latter we modify some implicit global variable\nplotting dots - for example with scatter/scatter!\nplot([(1.0,2.0), (1.0,3.0)], ls=:dot) will create a dotted line from position (x=1.0,y=2.0) to (x=1.0,y=3.0)","category":"page"},{"location":"lecture_05/hw/","page":"Homework","title":"Homework","text":"</div></div>","category":"page"}]
}
